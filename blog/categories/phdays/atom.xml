<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Phdays | From Zero To X]]></title>
  <link href="http://blog.ztrix.me/blog/categories/phdays/atom.xml" rel="self"/>
  <link href="http://blog.ztrix.me/"/>
  <updated>2014-07-07T10:41:14+08:00</updated>
  <id>http://blog.ztrix.me/</id>
  <author>
    <name><![CDATA[zTrix]]></name>
    <email><![CDATA[i@ztrix.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHDays CTF IV Quals 2014 - Turututu Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/"/>
    <updated>2014-01-29T11:13:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>turututu is an ELF 64-bit executable, after some investigation, it&rsquo;s easy to find out that the task.exe is a native binary generated using <code>ocamlopt</code>.</p>

<p>I know little about <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, so at first I searched a lot trying to get some bytecode or decompiler stuff, or some dedicated debugger for <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, but none of these tools could be found.</p>

<p>So it&rsquo;s time to dive into assembly.</p>

<!-- more -->


<p>From the string constant <code>Sorry, waybe next time...</code>(typo here, LOL!) printed by task.exe, we xref to <code>0x402bf0</code>, and at <code>0x402dda</code>, it seems that some check function is called and then print <code>Gratz!</code> or <code>Sorry, waybe next time...</code>(LOL again!) according to its return value.</p>

<p>Deeper diving reaveals that the check function will invoke a list of functions to check the input value, and whenever something went wrong, the return value would be fail.</p>

<ul>
<li>The first one is at <code>0x4024a0</code>, which is a simple function who parse the arg to a ocaml list of chars.</li>
<li>The second one is at <code>0x402520</code>, which is the check length function. From here we know the list size should be 16.</li>
<li>The third one is at <code>0x402790</code>, ah, a magic string <code>The sky above the port was the color of...</code> can be seen here, it seems that some permutation operations are done here, and will always give positive return value, so just leave it here for later analysis.</li>
<li>The fourth one is at <code>0x402870</code>, this is the real check, and will return false if the check fails.</li>
<li>And there are function 5, 6, 7, will check after function 4. Leave them for later analysis.</li>
</ul>


<p>Ok now we know that we should run the program with a string as argument of 16 bytes, and if the string match something, the <code>task.exe</code> will print happy result. And it&rsquo;s very likely that the input argument should be the flag.</p>

<p>There are a lot of ocaml library functions out there without any signature, making it very hard to read assembly. So I compiled a <code>helloworld</code> program using <code>ocamlopt -g hw.ml</code>, and by comparing the hex code, I can identify a lot of important ocaml functions like <code>camlList__map</code>, <code>camlList_c_call</code>, <code>camlList__combine</code>, <code>caml_equal</code>.</p>

<p>But it&rsquo;s still very hard to figure out the actual behavior under the assembly code. Now it&rsquo;s time for the <a href="http://github.com/longld/peda">peda</a> weapon.</p>

<p>I wrote a small piece of code in <a href="http://github.com/longld/peda">peda</a> to print ocaml list values</p>

<p>```python
def ocamlist(self, *arg):</p>

<pre><code>"""
dump ocaml list
Usage:
    ocamlist register
    ocamlist address
"""
(address,) = normalize_argv(arg, 1)
if address is None:
    self._missing_argument()
if str(address).startswith("r"):
    address = peda.getreg(arg[0])
else:
    address = to_int(arg[0])
result = []
for i in range(100):
    result.append(peda.read_int(address, 8))
    address = peda.read_int(address+8, 8)
    if address &lt; 0x1000:
        break
msg('ocamllist: (%d) %s' % (len(result), repr(result)))
return
</code></pre>

<p>```</p>

<p>Now fire! gdbinit here</p>

<pre><code>file task.exe
b *0x402baa
r 1234567890ABCDEF
</code></pre>

<p><code>continue</code> at gdb to skip the first function. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [99, 101, 103, 105, 107, 109, 111, 113, 115, 97, 131, 133, 135, 137, 139, 141]
</code></pre>

<p>Oops, why should ocaml put <code>2x+1</code> value in the list. Never mind.</p>

<p><code>continue</code> two times to skip the length check. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [101, 135, 115, 111, 97, 141, 139, 99, 137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>Now we have the permutation table. :)</p>

<p><code>ni</code> into <code>0x402870</code>, and <code>ni</code> to <code>0x402888</code>, <code>ocamlist $rax</code></p>

<pre><code>gdb-peda$ ocamlist $rax
ocamllist: (8) [137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>so <code>0x4025e0</code> cut the list from index 8, return the second part. <code>ni</code> to <code>0x40289d</code></p>

<pre><code>0x000000000040289d in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (8) [101, 135, 115, 111, 97, 141, 139, 99]
</code></pre>

<p>we got the first half. Then at <code>0x4028a1</code>, we can identify the function called to be <code>camlList__combine</code> by comparing hex code, we can also know the function <code>camlList__map</code> called at <code>0x4028b0</code>, <code>caml_equal</code> loaded at <code>0x4028bf</code>, and the constant list at <code>0x4028b5</code> is</p>

<pre><code>gdb-peda$ ocamlist 0x621c20
ocamllist: (8) [591, 599, 687, 663, 475, 687, 687, 609]
</code></pre>

<p>So, the logic here become evident. if written in python, it should be sth like this</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(f, combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>Now we need to know the function f, <code>si</code> into <code>camlList__map</code> and we can find out f at <code>0x402360</code></p>

<pre><code>=&gt; 0x402360:    sar    rbx,1
   0x402363:    lea    rax,[rax+rbx*4]
   0x402367:    ret
</code></pre>

<p>so the python code can be completed</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(lambda x: (x[1]&gt;&gt;1)*4+x[0], combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>the next 3 check functions are at <code>0x4029e0</code>, <code>0x402a80</code>, <code>0x402b20</code>, all of them looks like the function we just analysed. It&rsquo;s obvious <code>0x402b20</code> is the simplest. Using the same technique stated above. We can find out this check is actually doing this:</p>

<p><code>python
assert lst[7:] == [145, 195, 233, 229, 221, 137, 243, 229, 233]
</code></p>

<p>WTF? I just cannot believe this. Fine, we do not need to analyze other functions. Now we can get our most wanted flag</p>

<p>```python
rev = [7, 0, 11, 14, 13, 12, 3, 10, 2, 4, 15, 9, 1, 8, 6, 5]</p>

<p>fun7 = [145, 195, 233, 229, 221, 137, 243, 229, 233]
fun4 = [591, 599, 687, 663, 475, 687, 687, 609]
p = []
for i in range(8):</p>

<pre><code>p.append(fun4[i] - (fun7[i+1]&gt;&gt;1)*4)
</code></pre>

<p>lst = p + fun7[1:]
lst = [(lst[rev[i]]-1)/2 for i in range(len(lst))]
print &lsquo;&rsquo;.join(map(chr, lst))
```</p>

<p>The flag is <code>HenryDorsettCase</code></p>
]]></content>
  </entry>
  
</feed>
