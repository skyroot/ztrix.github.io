<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | From Zero To X]]></title>
  <link href="http://blog.ztrix.me/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://blog.ztrix.me/"/>
  <updated>2014-02-06T21:34:11+08:00</updated>
  <id>http://blog.ztrix.me/</id>
  <author>
    <name><![CDATA[zTrix]]></name>
    <email><![CDATA[i@ztrix.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHDays CTF IV Quals 2014 - Turututu Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/"/>
    <updated>2014-01-29T11:13:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu</id>
    <content type="html"><![CDATA[<p>by <code>zTrix@blue-lotus</code></p>

<p>turututu is an ELF 64-bit executable, after some investigation, it&rsquo;s easy to find out that the task.exe is a native binary generated using <code>ocamlopt</code>.</p>

<p>I know little about <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, so at first I searched a lot trying to get some bytecode or decompiler stuff, or some dedicated debugger for <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, but none of these tools could be found.</p>

<p>So it&rsquo;s time to dive into assembly.</p>

<!-- more -->


<p>From the string constant <code>Sorry, waybe next time...</code>(typo here, LOL!) printed by task.exe, we xref to <code>0x402bf0</code>, and at <code>0x402dda</code>, it seems that some check function is called and then print <code>Gratz!</code> or <code>Sorry, waybe next time...</code>(LOL again!) according to its return value.</p>

<p>Deeper diving reaveals that the check function will invoke a list of functions to check the input value, and whenever something went wrong, the return value would be fail.</p>

<ul>
<li>The first one is at <code>0x4024a0</code>, which is a simple function who parse the arg to a ocaml list of chars.</li>
<li>The second one is at <code>0x402520</code>, which is the check length function. From here we know the list size should be 16.</li>
<li>The third one is at <code>0x402790</code>, ah, a magic string <code>The sky above the port was the color of...</code> can be seen here, it seems that some permutation operations are done here, and will always give positive return value, so just leave it here for later analysis.</li>
<li>The fourth one is at <code>0x402870</code>, this is the real check, and will return false if the check fails.</li>
<li>And there are function 5, 6, 7, will check after function 4. Leave them for later analysis.</li>
</ul>


<p>Ok now we know that we should run the program with a string as argument of 16 bytes, and if the string match something, the <code>task.exe</code> will print happy result. And it&rsquo;s very likely that the input argument should be the flag.</p>

<p>There are a lot of ocaml library functions out there without any signature, making it very hard to read assembly. So I compiled a <code>helloworld</code> program using <code>ocamlopt -g hw.ml</code>, and by comparing the hex code, I can identify a lot of important ocaml functions like <code>camlList__map</code>, <code>camlList_c_call</code>, <code>camlList__combine</code>, <code>caml_equal</code>.</p>

<p>But it&rsquo;s still very hard to figure out the actual behavior under the assembly code. Now it&rsquo;s time for the <a href="http://github.com/longld/peda">peda</a> weapon.</p>

<p>I wrote a small piece of code in <a href="http://github.com/longld/peda">peda</a> to print ocaml list values</p>

<p>```python
def ocamlist(self, *arg):</p>

<pre><code>"""
dump ocaml list
Usage:
    ocamlist register
    ocamlist address
"""
(address,) = normalize_argv(arg, 1)
if address is None:
    self._missing_argument()
if str(address).startswith("r"):
    address = peda.getreg(arg[0])
else:
    address = to_int(arg[0])
result = []
for i in range(100):
    result.append(peda.read_int(address, 8))
    address = peda.read_int(address+8, 8)
    if address &lt; 0x1000:
        break
msg('ocamllist: (%d) %s' % (len(result), repr(result)))
return
</code></pre>

<p>```</p>

<p>Now fire! gdbinit here</p>

<pre><code>file task.exe
b *0x402baa
r 1234567890ABCDEF
</code></pre>

<p><code>continue</code> at gdb to skip the first function. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [99, 101, 103, 105, 107, 109, 111, 113, 115, 97, 131, 133, 135, 137, 139, 141]
</code></pre>

<p>Oops, why should ocaml put <code>2x+1</code> value in the list. Never mind.</p>

<p><code>continue</code> two times to skip the length check. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [101, 135, 115, 111, 97, 141, 139, 99, 137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>Now we have the permutation table. :)</p>

<p><code>ni</code> into <code>0x402870</code>, and <code>ni</code> to <code>0x402888</code>, <code>ocamlist $rax</code></p>

<pre><code>gdb-peda$ ocamlist $rax
ocamllist: (8) [137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>so <code>0x4025e0</code> cut the list from index 8, return the second part. <code>ni</code> to <code>0x40289d</code></p>

<pre><code>0x000000000040289d in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (8) [101, 135, 115, 111, 97, 141, 139, 99]
</code></pre>

<p>we got the first half. Then at <code>0x4028a1</code>, we can identify the function called to be <code>camlList__combine</code> by comparing hex code, we can also know the function <code>camlList__map</code> called at <code>0x4028b0</code>, <code>caml_equal</code> loaded at <code>0x4028bf</code>, and the constant list at <code>0x4028b5</code> is</p>

<pre><code>gdb-peda$ ocamlist 0x621c20
ocamllist: (8) [591, 599, 687, 663, 475, 687, 687, 609]
</code></pre>

<p>So, the logic here become evident. if written in python, it should be sth like this</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(f, combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>Now we need to know the function f, <code>si</code> into <code>camlList__map</code> and we can find out f at <code>0x402360</code></p>

<pre><code>=&gt; 0x402360:    sar    rbx,1
   0x402363:    lea    rax,[rax+rbx*4]
   0x402367:    ret
</code></pre>

<p>so the python code can be completed</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(lambda x: (x[1]&gt;&gt;1)*4+x[0], combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>the next 3 check functions are at <code>0x4029e0</code>, <code>0x402a80</code>, <code>0x402b20</code>, all of them looks like the function we just analysed. It&rsquo;s obvious <code>0x402b20</code> is the simplest. Using the same technique stated above. We can find out this check is actually doing this:</p>

<p><code>python
assert lst[7:] == [145, 195, 233, 229, 221, 137, 243, 229, 233]
</code></p>

<p>WTF? I just cannot believe this. Fine, we do not need to analyze other functions. Now we can get our most wanted flag</p>

<p>```python
rev = [7, 0, 11, 14, 13, 12, 3, 10, 2, 4, 15, 9, 1, 8, 6, 5]</p>

<p>fun7 = [145, 195, 233, 229, 221, 137, 243, 229, 233]
fun4 = [591, 599, 687, 663, 475, 687, 687, 609]
p = []
for i in range(8):</p>

<pre><code>p.append(fun4[i] - (fun7[i+1]&gt;&gt;1)*4)
</code></pre>

<p>lst = p + fun7[1:]
lst = [(lst[rev[i]]-1)/2 for i in range(len(lst))]
print &lsquo;&rsquo;.join(map(chr, lst))
```</p>

<p>The flag is <code>HenryDorsettCase</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defcon 20 小记]]></title>
    <link href="http://blog.ztrix.me/blog/2012/06/08/defcon-ctf-quals-20/"/>
    <updated>2012-06-08T23:35:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2012/06/08/defcon-ctf-quals-20</id>
    <content type="html"><![CDATA[<p>6 月 2 号到 4 号有幸加入 blue-lotus 参加了 defcon CTF 2012 的比赛，感慨颇深。清华第一次组队参加这个比赛，虽然没进决赛，但第一次参赛能进前 20，也算不错的成绩了。</p>

<!-- more -->


<p>第一次参加 CTF，对于题目最大的感觉就是没有头绪。其实题目涉及面太广，许多题目了解背景知识很快即可破题，不知道的人，想破脑袋也解不出。比如 Forensics 100 的题目，给了个文件系统，大家全在文件系统里面翻，看到一堆又一堆的头文件，但是就是没有结果。等到赛后看了 writeup，发现使用 <a href="http://www.sleuthkit.org/">STK</a> 用一行命令就能得到 key:</p>

<pre><code>blkls -s f100_xxx
</code></pre>

<p>大家大呼坑爹，这谁知道啊！！为什么这样得到的是 key 啊！！有没有什么解释啊！！</p>

<p>但是事实是无情的，虽然是 100 分的题目，只要一个命令，但是我们就是解不出来，而各国牛队则瞬秒。这也许就是经验的差距吧。</p>

<h2>Grab Bag</h2>

<p>Grab Bag 的题目普遍简单，5 道题目我们解出来 4 题，最后的 500 分题到现在 writeup 都没出来，估计也没几个队做出来了。</p>

<h3>grab bag 100</h3>

<p>gb100 的题目就一句话： <code>hack the planet_</code>。我就一直在思考为啥 planet 后面是个下划线。结果没过几分钟，我们组就有人做出来了，key 就是一个 <code>!</code>，当时也没多想，现在才发现，下划线的意思是在最后填一个 <code>char</code>，<code>hack the planet!</code> 可能是一句 hack 文化里面的 slang 吧。所以没有点背景知识就来打酱油真不行。</p>

<h3>grab bag 200</h3>

<p>gb200 的题目是给一个图片和一个 mac double format 文件，mac double format 里面藏了一个链接链到图片的原文件，对比一下发现给的图片后面附加了一个 DNS PTR 查询包。于是大家都想到了构造这个包再发一遍，但是，结果别人得到了结果，我没得到。悲剧！等到赛后看 writeup，发现原来我没有把 source port 指定相同。唉！就差了一步呀。</p>

<h3>grab bag 300</h3>

<p>gb300 是个破解 ATM 取款机的题目，组里有人一眼就看出了规律，太强了！但是人眼看速度不够，只好写程序，好吧，我写得没别人快，就没继续做了。</p>

<h3>grab bag 400</h3>

<p>gb400 是个 SQL 注入，组里有强人立刻就发现了漏洞入口了，好强。没有注入经验，果断不会，好在有强人在，很快解决了。</p>

<h2>Random</h2>

<h3>random 100</h3>

<p>random100 也是让人摸不着头脑的题目，题目是一句话：</p>

<pre><code>How many developers;) did it take to secure Windows 8?
</code></pre>

<p>key 是 152，看了 writeup 也不知道为啥，甚至当时大家做出来的时候，都不知道谁做出来了。我当时写了个脚本把 1 到 1000 都遍历提交了一遍，莫非是我解决的？好开心！</p>

<h3>random 200</h3>

<p>random200 果断不会，今天看 <a href="http://devtrixlabs.com/blog/2012/06/defcon-2012-urandom-200-writeup/">writeup</a>，发现前面都正常，到了最后，作者发现了这个的时候：</p>

<pre><code>fr an
it ha
hi ez
jp er
en-us !!
</code></pre>

<p>他居然直接就猜出了 key 是 <code>icanhazcheezburger!!</code> 。这也太假了吧！！莫非是有我们不知道的 hacker 典故？还是这个人是脑力王？？</p>

<h3>random 300</h3>

<p>random 300 是最 straight forward 的一到题目了，要求用足够少的交换次数把 100000 个 uint16 排序。我开始怕超时写了个 qsort，结果发现交换次数太多。然后准备写 O(n<sup>2</sup>) 的 selection sort，达到最多交换次数 N-1。结果写到一半又被别人抢先了。悲剧！</p>

<h2>Forensics</h2>

<p>binary 和 pwnable 的题都要求 binary 调试，还是各种 MIPS Binary，FreeBSD，我果断看都没看。不过取证这块还是可以看看的。</p>

<h3>Forensics 200</h3>

<p>大家都盯着那几个图片看了。结果又是一道工具题，不知道的人果断是解不出来的，结果也就几行命令：</p>

<pre><code>stegdetect -s 2 2467trash.jpg
outguess -r -e -k “ddtek” 2467trash.jpg key
</code></pre>

<p>原来是道 Steganography 的题目。好吧，现在懂了，不过这个 outguess 里面用到的 ddtek 是怎么来的，writeup 作者说是用了一个字典搜的，换作我们，即使知道用 outguess 也猜不出 key 吧，谁的字典里会有 ddtek ?</p>

<h3>Forensics 300</h3>

<p>Hooray! 这是我唯一解出来并提交的题目！大概就是给了个 OpenWRT 的 firmware 镜像，用 <a href="http://code.google.com/p/firmware-mod-kit/">firmware-mod-kit</a> 解一下，就能得到答案了。太开心了！</p>

<h2>Binary</h2>

<p>突然想起来，其实还是看了一道 binary 题目的，就是 bin 100 的题目。这也是一道好可惜的题目。题目给了一个用 skynet 漏洞的 ssh 和它的输出文件 mac.h，我们也发现了 mac.h 是用直接去反编码的 ASCII。但是谁知道 key 就在里面！！我们都跑去分析给的另外两个 ssh 和 sshd 了。好在最后还是做出来了。不知道是谁试的。其实我印象中记得我把 mac.h 里面的字符串都试了一遍，为啥我们试出来？RPWT？</p>

<h2>总结</h2>

<p>Anyway，比赛已经过去。很高兴能认识很多安全领域的牛人，也很开心打酱油也能做出题来。发个结果图和名字纪念一下吧！期待明年再战！</p>

<p><a href="http://repo.shell-storm.org/CTF/Defcon-20-quals/Scoreboard.txt">最终排名</a> 和最终解题结果：</p>

<p><img class="middle" src="/images/defcon-20-blue-lotus.jpg" title="&lsquo;defcon 20 quals rank&rsquo;" ></p>

<p>其中绿色是我们解出来的题目，蓝色是我们没解出来，但是有队伍解出来的题目，灰色是还没开放的题目。紫色是当前在做的题目。再发个链接：<a href="http://devpsc.blogspot.jp/2012/06/defcon-20-quals-writeup-collection.html">writeup collection</a></p>
]]></content>
  </entry>
  
</feed>
