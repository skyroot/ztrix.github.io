<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | From Zero To X]]></title>
  <link href="http://blog.ztrix.me/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://blog.ztrix.me/"/>
  <updated>2014-04-14T23:03:45+08:00</updated>
  <id>http://blog.ztrix.me/</id>
  <author>
    <name><![CDATA[zTrix]]></name>
    <email><![CDATA[i@ztrix.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PlaidCTF 2014 - Parlor (Crypto 250) Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup/"/>
    <updated>2014-04-14T21:12:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup</id>
    <content type="html"><![CDATA[<p>by <code>zTrix@blue-lotus</code></p>

<p>Problem description</p>

<pre><code>Crypto (250 pts)

The Plague is running a betting service to build up funds for his massive empire. Can you 
figure out a way to beat the house? The service is running at 54.197.195.247:4321.
</code></pre>

<!-- more -->


<p>use nc to connect the service, we got the following screen</p>

<pre><code>/------------------------------------------------------------------------------\
| Welcome to the betting parlor!                                               |
|                                                                              |
| We implement State of the Art cryptography to give you the fairest and most  |
| exciting betting experience!                                                 |
|                                                                              |
| Here's how it works: we both pick a nonce, you tell us odds, and you give us |
| some money.                                                                  |
| If md5(our number + your number) % odds == 0, you win bet amount*odds.       |
| UPDATE: IF YOU DIDN'T REALIZE IT, WE DO INCLUDE A NEWLINE AT THE END OF YOUR |
| NUMBER. SORRY FOR THE INCONVENIENCE. THANK YOU FOR USING PARLOR              |
| Otherwise, we get your money! We're even so nice, we gave you $1000 to start.|
|                                                                              |
| If you don't trust us, we will generate a new nonce, and reveal the old nonce|
| to you, so you can verify all of our results!                                |
|                                                                              |
| (Oh, and if you win a billion dollars, we'll give you a flag.)               |
\______________________________________________________________________________/

====================
  1) set your odds
  2) set your bet
  3) play a round
  4) get balance
  5) reveal nonce
  6) quit
====================
</code></pre>

<p>So, it&rsquo;s a small betting game, if we can win enough money, we&rsquo;ll get a flag.</p>

<p>Studying the rules, we can see that, the smaller the odds, the more likely we can win. If we set odds to <code>1^2</code>, the chance to win will be a half. But we cannot bet the same nonce after winning.</p>

<p>So if we can figure out a way to always win, then we can double our balance each time, reaching a billion won&rsquo;t be a problem any more.</p>

<p>Since the md5 is calculated on <code>server_nonce + player_nonce</code>, and <code>server_nonce</code> won&rsquo;t change until you reveal it, and <code>player_nonce</code> is under our control, so we can easily think of the <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>.</p>

<p>However, to use <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>, we need the result of <code>md5(server_nonce + player_nonce)</code>. If we set odds to <code>1^100</code>, then we can get 100 bits of the md5 digest, how about the remaining 28 bits?</p>

<p>Since <code>2^28</code> is not a huge number, we can use brute-force. Here is the attack plan:</p>

<ol>
<li> Set our bet to 1$, odds to <code>2^100</code>, play a round, send &lsquo;a\n&rsquo;</li>
<li> It&rsquo;s mostly likely we will lose, never mind, grab the generated value, which should be sth like <code>0000000171ccbeef0869667267a6bbdd</code> in hex format.</li>
<li> Construct hash length attack padding suffix, play another round, send &lsquo;a\n&rsquo; + suffix + &lsquo;b\n&rsquo;, which would be sth like <code>a\n\x80\x00\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n</code></li>
<li> And, not surprised, we lose again, never mind, grab the second generated value, which should be sth like <code>0000000f48eabc92e4b180a8d1b7c3d3</code> in hex format.</li>
</ol>


<p>OK, now we know</p>

<ol>
<li> <code>md5(server_nonce + 'a\n') == XXXXXX171ccbeef0869667267a6bbdd</code></li>
<li> <code>md5(server_nonce + 'a\n\x80\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n' == YYYYYYf48eabc92e4b180a8d1b7c3d3</code></li>
<li> if we know the value of XXXXXXX, we can calculate YYYYYYf48eabc92e4b180a8d1b7c3d3 by hash length extention attack</li>
</ol>


<p>So just brute-force the value of XXXXXXX, and calculate the second md5 value, until we get the same suffix (f48eabc92e4b180a8d1b7c3d3).</p>

<p>After that, use hash extension attack again to search md5 hashes ending with bit 0, which is very easy. Send those winning nonce and get the flag!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (parlor.py)</span> <a href='/downloads/code/plaidctf-2014-parlor-writeup/parlor.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python2</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="c"># https://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">md5_ext</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tl</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x80</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="o">%</span> <span class="mi">64</span> <span class="o">!=</span> <span class="mi">56</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="n">tl</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;54.197.195.247&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">4321</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain1_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain1</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain1</span><span class="p">,</span> <span class="n">remain1_str</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;b</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain2_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain2</span><span class="p">,</span> <span class="n">remain2_str</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;5&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;the nonce has been &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nonce</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">nonce</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">prefix</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">])</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="o">==</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_md5</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">+</span> <span class="n">remain1_str</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;between 1 and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">candi</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">])</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">candi</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
</span><span class='line'>    <span class="n">ary</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>    <span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&#39;hash expectation: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ary</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39; and &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">balance</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;):&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="n">balance</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;====&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Too bad&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">elif</span> <span class="s">&#39;key&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the command line output recorded by asciinema <a href="https://asciinema.org/a/8888">commandline output record</a></p>

<script type="text/javascript" src="https://asciinema.org/a/8888.js" id="asciicast-8888" async></script>


<p>Download source code here</p>

<ul>
<li><a href="/download/plaidctf-2014-parlor-writeup/parlor.py">attack script parlor.py</a></li>
<li><a href="/download/plaidctf-2014-parlor-writeup/search.cpp">search.cpp</a></li>
<li><a href="/download/plaidctf-2014-parlor-writeup/even.cpp">even.cpp</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Final 2014 Memory]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/10/codegate-ctf-final-2014-memory/"/>
    <updated>2014-04-10T23:48:01+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/10/codegate-ctf-final-2014-memory</id>
    <content type="html"><![CDATA[<p>Last week, We represented team blue-lotus, consisting of me(zTrix), cbmixx, Aluex, Adrian, fqj and our beautiful photographer as well as translator, at Codegate CTF Finals 2014, in Seoul, South Korea. It&rsquo;s really a wonderful experience.</p>

<p>Since we are close to Seoul, we took off at April 1st, just one day before the game.</p>

<!-- more -->


<p>The good part of participating CTF offline final events in South Korea is, we are familiar with the culture, and only 1 hour time zone delta cause no jetlag at all. Besides, some of us took part in Secuinside Finals 2013, which was also in Seoul. So basically, things went very smoothly.</p>

<p>But still we have some problems, the biggest one was language. We knew nothing about Korean, and our translator as well as photographer, always told us to communicate by ourselves, unless necessary, she wouldn&rsquo;t help us. So we tried as hard as we could, using simple English words, gestures, even a little Japanese, and amazingly, Korean people could understand us!</p>

<p>The CTF game started at 2pm on April 2nd, and lasted 20 hours until 10 AM the next morning. All 14 teams (CLGT didn&rsquo;t manage to present) were in a large Hall room, with the organizers located at a corner.</p>

<p><img src="/images/codegate-ctf-final-2014-memory/cg.jpg" alt="/images/codegate-ctf-final-2014-memory/cg.jpg" /></p>

<p>Most of the TOP CTF teams such as <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, <a href="http://mslc.ctf.su/">More Smoked Leet Chicken</a>, <a href="http://blog.dragonsector.pl">dragon sector</a> were in the competition. <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> sent the most powerful members, including the famous <a href="http://geohot.com/">geohot</a>. So even before the game, we could bet on <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>&rsquo;s winning of champion without hesitation.</p>

<p>A total of 15 problems were released one after another. Here are the problem list.</p>

<ul>
<li>RPG, web, 300</li>
<li>wsh, pwnable, 400</li>
<li>akkka, reversing, 300</li>
<li>running_danbi, mixed, 750</li>
<li>graynode, reversing, 800</li>
<li>TK, web, 200</li>
<li>pentester, logical + pwnable, 450</li>
<li>login page, web, 350</li>
<li>securepack, mixed, 350</li>
<li>trueman, web, 600</li>
<li>fortune teller, crypto + pwnable, 650</li>
<li>hexagrams, reversing, 600</li>
<li>virtual terminal, pwnable, 500</li>
<li>drupbox, pwnable, 400</li>
<li>webboard, web, 350</li>
</ul>


<p>So actually problems can be categoried into web (lots of SQL injection) and binary analysis (piggyback crypto, logical and pwnable elements).</p>

<p>From our point of view, the problems are hard and tricky, but not for <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>. At 14:55, only less than one hour from the beginning, the organizer announced first blood from <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>. After that, I can still remember they announced several first blood of <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, especially for graynode, the problem with the highest score. Actually only <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> solved that problem thoughout the game. For us, we even didn&rsquo;t get any time on opening it.</p>

<p>We solved several web problems, and only one binary, the pentester, by me. The bug is a tricky logic error which could be called &ldquo;use before init&rdquo;. A buffer malloced from heap are created each time storing the password, but without initialization, which allow us to dump the admin password byte by byte. Although the problems are marked as &ldquo;Logical + Pwnable&rdquo;, it turned out there was nothing &ldquo;pwnable&rdquo; here, just exploiting the logic error was enough to score. I used my own crafted io library <a href="https://github.com/zTrix/zio">zio</a>, which was very handy, and I only took less than 10 minutes on writing exploitation code after identifying the bug.</p>

<p>Finally we ranked 8. We tried our best. And congratulations to <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, <a href="http://mslc.ctf.su/">MSLC</a>, <a href="http://blog.dragonsector.pl">Dragon Sector</a>, <a href="http://eindbazen.net/">eindbazen</a>, you guys really rocks!</p>

<p><img src="/images/codegate-ctf-final-2014-memory/scoreboard.png" alt="/images/codegate-ctf-final-2014-memory/scoreboard.png" /></p>

<p>Note that <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> got more scores than the sum of 2nd and 3rd place.</p>

<p>There was an interesting network session after the CTF. We met a lot of interesting people. We met some members from <a href="https://ctftime.org/team/1816">pwnies</a>, they were very friendly. And their <a href="https://github.com/pwnies/pwntools">pwntools</a> is one of our favorite tools. Thanks for such great tool! We talked with the awesome <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> members, and got some clue on how they solved those hard problems. It&rsquo;s really great to meet those cool guys.</p>

<p>To conclude, I really appreciate this trip to South Korea participating such a great CTF. The problems were well prepared with very few defects, and the organizer provided network router, cable, switch, power socket, and even food. So we could focus on solving problems. Thank you for hosting. Looking forward to codegate CTFs in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF 2014 Quals - Weirdshark Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/02/25/codegate-2014-weirdshark-writeup/"/>
    <updated>2014-02-25T01:51:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/02/25/codegate-2014-weirdshark-writeup</id>
    <content type="html"><![CDATA[<p>by <code>zTrix@blue-lotus</code></p>

<p>A pcap file is given here for analysis. check type using <code>file</code></p>

<pre><code># file weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7
weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7: pcap-ng capture file - version 1.0
</code></pre>

<p>Open the file using wireshark, but no luck, wireshark reports malformed file format and refuse to open it.</p>

<p>So we need to extract the packets inside manually.</p>

<!-- more -->


<p>Soon I got the file format document <a href="https://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html">here</a>, the file format is really simple, it&rsquo;s organized in blocks, and according to my comprehension, each block contains a single network frame packet.</p>

<p>According to <code>general block structure</code> section in the pcap document, we can easily get the block type, length, and content.</p>

<p>And as for the packet, there are several levels of network protocol headers, a brief hex view shows that the network traffic are HTTP requests and responses, so the protocol stack should be IP + TCP + HTTP</p>

<pre><code>| 6 + 6 bytes MAC addr + 2 bytes (ethertype 08 00) | 20 bytes IP header | 20 bytes TCP header | HTTP Header + HTTP Body |
</code></pre>

<p>the hard thing here to do manually pcap parse is to assemble TCP packets into byte stream, which require a good understanding of TCP control sequence. But we can assume that the network condition is good, no packet loss or retranssmission happens, just assemble them one by one and see what happens.</p>

<p>use the following python code to extract all http content</p>

<p>```python
import os, sys, struct</p>

<p>f = open(&lsquo;weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7&rsquo;).read()
total = len(f)</p>

<h1>skip the first two blocks, which seems broken, 0x80 and 0x9c are the block sizes respectively</h1>

<p>index = 0x80 + 0x9c</p>

<p>w = open(&lsquo;http-content.bin&rsquo;, &lsquo;w&rsquo;)</p>

<p>while index &lt; total:</p>

<pre><code>block_type = f[index:index+4].encode('hex')
block_size = struct.unpack('&lt;I', f[index+4:index+8])[0]
captured_len = struct.unpack('&lt;I', f[index+20:index+24])[0]
packet_len = struct.unpack('&lt;I', f[index+24:index+28])[0]
print index, block_size, packet_len, captured_len, block_type
w.write(f[index+28+54:index+28+packet_len])
w.flush()
index += block_size
</code></pre>

<p>w.close()
```</p>

<p>The result seems very promising,  just concat the packet contents one by one really works! which indicates the network condition is really good. There are several http requests inside</p>

<pre><code>GET / HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /mario.png HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /obama.bmp HTTP/1.1
GET /codegate.jpg HTTP/1.1
GET /multiple.pdf HTTP/1.1
GET /grayhash.jpg HTTP/1.1
</code></pre>

<p>And to my surprise, the flag is not in <code>codegate.jpg</code>, but in <code>multiple.pdf</code></p>

<p>FLAG = <code>FORENSICS_WITH_HAXORS</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHDays CTF IV Quals 2014 - Turututu Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/"/>
    <updated>2014-01-29T11:13:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu</id>
    <content type="html"><![CDATA[<p>by <code>zTrix@blue-lotus</code></p>

<p>turututu is an ELF 64-bit executable, after some investigation, it&rsquo;s easy to find out that the task.exe is a native binary generated using <code>ocamlopt</code>.</p>

<p>I know little about <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, so at first I searched a lot trying to get some bytecode or decompiler stuff, or some dedicated debugger for <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, but none of these tools could be found.</p>

<p>So it&rsquo;s time to dive into assembly.</p>

<!-- more -->


<p>From the string constant <code>Sorry, waybe next time...</code>(typo here, LOL!) printed by task.exe, we xref to <code>0x402bf0</code>, and at <code>0x402dda</code>, it seems that some check function is called and then print <code>Gratz!</code> or <code>Sorry, waybe next time...</code>(LOL again!) according to its return value.</p>

<p>Deeper diving reaveals that the check function will invoke a list of functions to check the input value, and whenever something went wrong, the return value would be fail.</p>

<ul>
<li>The first one is at <code>0x4024a0</code>, which is a simple function who parse the arg to a ocaml list of chars.</li>
<li>The second one is at <code>0x402520</code>, which is the check length function. From here we know the list size should be 16.</li>
<li>The third one is at <code>0x402790</code>, ah, a magic string <code>The sky above the port was the color of...</code> can be seen here, it seems that some permutation operations are done here, and will always give positive return value, so just leave it here for later analysis.</li>
<li>The fourth one is at <code>0x402870</code>, this is the real check, and will return false if the check fails.</li>
<li>And there are function 5, 6, 7, will check after function 4. Leave them for later analysis.</li>
</ul>


<p>Ok now we know that we should run the program with a string as argument of 16 bytes, and if the string match something, the <code>task.exe</code> will print happy result. And it&rsquo;s very likely that the input argument should be the flag.</p>

<p>There are a lot of ocaml library functions out there without any signature, making it very hard to read assembly. So I compiled a <code>helloworld</code> program using <code>ocamlopt -g hw.ml</code>, and by comparing the hex code, I can identify a lot of important ocaml functions like <code>camlList__map</code>, <code>camlList_c_call</code>, <code>camlList__combine</code>, <code>caml_equal</code>.</p>

<p>But it&rsquo;s still very hard to figure out the actual behavior under the assembly code. Now it&rsquo;s time for the <a href="http://github.com/longld/peda">peda</a> weapon.</p>

<p>I wrote a small piece of code in <a href="http://github.com/longld/peda">peda</a> to print ocaml list values</p>

<p>```python
def ocamlist(self, *arg):</p>

<pre><code>"""
dump ocaml list
Usage:
    ocamlist register
    ocamlist address
"""
(address,) = normalize_argv(arg, 1)
if address is None:
    self._missing_argument()
if str(address).startswith("r"):
    address = peda.getreg(arg[0])
else:
    address = to_int(arg[0])
result = []
for i in range(100):
    result.append(peda.read_int(address, 8))
    address = peda.read_int(address+8, 8)
    if address &lt; 0x1000:
        break
msg('ocamllist: (%d) %s' % (len(result), repr(result)))
return
</code></pre>

<p>```</p>

<p>Now fire! gdbinit here</p>

<pre><code>file task.exe
b *0x402baa
r 1234567890ABCDEF
</code></pre>

<p><code>continue</code> at gdb to skip the first function. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [99, 101, 103, 105, 107, 109, 111, 113, 115, 97, 131, 133, 135, 137, 139, 141]
</code></pre>

<p>Oops, why should ocaml put <code>2x+1</code> value in the list. Never mind.</p>

<p><code>continue</code> two times to skip the length check. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [101, 135, 115, 111, 97, 141, 139, 99, 137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>Now we have the permutation table. :)</p>

<p><code>ni</code> into <code>0x402870</code>, and <code>ni</code> to <code>0x402888</code>, <code>ocamlist $rax</code></p>

<pre><code>gdb-peda$ ocamlist $rax
ocamllist: (8) [137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>so <code>0x4025e0</code> cut the list from index 8, return the second part. <code>ni</code> to <code>0x40289d</code></p>

<pre><code>0x000000000040289d in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (8) [101, 135, 115, 111, 97, 141, 139, 99]
</code></pre>

<p>we got the first half. Then at <code>0x4028a1</code>, we can identify the function called to be <code>camlList__combine</code> by comparing hex code, we can also know the function <code>camlList__map</code> called at <code>0x4028b0</code>, <code>caml_equal</code> loaded at <code>0x4028bf</code>, and the constant list at <code>0x4028b5</code> is</p>

<pre><code>gdb-peda$ ocamlist 0x621c20
ocamllist: (8) [591, 599, 687, 663, 475, 687, 687, 609]
</code></pre>

<p>So, the logic here become evident. if written in python, it should be sth like this</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(f, combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>Now we need to know the function f, <code>si</code> into <code>camlList__map</code> and we can find out f at <code>0x402360</code></p>

<pre><code>=&gt; 0x402360:    sar    rbx,1
   0x402363:    lea    rax,[rax+rbx*4]
   0x402367:    ret
</code></pre>

<p>so the python code can be completed</p>

<p><code>python
combined = zip(lst[:8], lst[8:])
maped = map(lambda x: (x[1]&gt;&gt;1)*4+x[0], combined)
assert maped == [591, 599, 687, 663, 475, 687, 687, 609]
</code></p>

<p>the next 3 check functions are at <code>0x4029e0</code>, <code>0x402a80</code>, <code>0x402b20</code>, all of them looks like the function we just analysed. It&rsquo;s obvious <code>0x402b20</code> is the simplest. Using the same technique stated above. We can find out this check is actually doing this:</p>

<p><code>python
assert lst[7:] == [145, 195, 233, 229, 221, 137, 243, 229, 233]
</code></p>

<p>WTF? I just cannot believe this. Fine, we do not need to analyze other functions. Now we can get our most wanted flag</p>

<p>```python
rev = [7, 0, 11, 14, 13, 12, 3, 10, 2, 4, 15, 9, 1, 8, 6, 5]</p>

<p>fun7 = [145, 195, 233, 229, 221, 137, 243, 229, 233]
fun4 = [591, 599, 687, 663, 475, 687, 687, 609]
p = []
for i in range(8):</p>

<pre><code>p.append(fun4[i] - (fun7[i+1]&gt;&gt;1)*4)
</code></pre>

<p>lst = p + fun7[1:]
lst = [(lst[rev[i]]-1)/2 for i in range(len(lst))]
print &lsquo;&rsquo;.join(map(chr, lst))
```</p>

<p>The flag is <code>HenryDorsettCase</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defcon 20 小记]]></title>
    <link href="http://blog.ztrix.me/blog/2012/06/08/defcon-ctf-quals-20/"/>
    <updated>2012-06-08T23:35:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2012/06/08/defcon-ctf-quals-20</id>
    <content type="html"><![CDATA[<p>6 月 2 号到 4 号有幸加入 blue-lotus 参加了 defcon CTF 2012 的比赛，感慨颇深。清华第一次组队参加这个比赛，虽然没进决赛，但第一次参赛能进前 20，也算不错的成绩了。</p>

<!-- more -->


<p>第一次参加 CTF，对于题目最大的感觉就是没有头绪。其实题目涉及面太广，许多题目了解背景知识很快即可破题，不知道的人，想破脑袋也解不出。比如 Forensics 100 的题目，给了个文件系统，大家全在文件系统里面翻，看到一堆又一堆的头文件，但是就是没有结果。等到赛后看了 writeup，发现使用 <a href="http://www.sleuthkit.org/">STK</a> 用一行命令就能得到 key:</p>

<pre><code>blkls -s f100_xxx
</code></pre>

<p>大家大呼坑爹，这谁知道啊！！为什么这样得到的是 key 啊！！有没有什么解释啊！！</p>

<p>但是事实是无情的，虽然是 100 分的题目，只要一个命令，但是我们就是解不出来，而各国牛队则瞬秒。这也许就是经验的差距吧。</p>

<h2>Grab Bag</h2>

<p>Grab Bag 的题目普遍简单，5 道题目我们解出来 4 题，最后的 500 分题到现在 writeup 都没出来，估计也没几个队做出来了。</p>

<h3>grab bag 100</h3>

<p>gb100 的题目就一句话： <code>hack the planet_</code>。我就一直在思考为啥 planet 后面是个下划线。结果没过几分钟，我们组就有人做出来了，key 就是一个 <code>!</code>，当时也没多想，现在才发现，下划线的意思是在最后填一个 <code>char</code>，<code>hack the planet!</code> 可能是一句 hack 文化里面的 slang 吧。所以没有点背景知识就来打酱油真不行。</p>

<h3>grab bag 200</h3>

<p>gb200 的题目是给一个图片和一个 mac double format 文件，mac double format 里面藏了一个链接链到图片的原文件，对比一下发现给的图片后面附加了一个 DNS PTR 查询包。于是大家都想到了构造这个包再发一遍，但是，结果别人得到了结果，我没得到。悲剧！等到赛后看 writeup，发现原来我没有把 source port 指定相同。唉！就差了一步呀。</p>

<h3>grab bag 300</h3>

<p>gb300 是个破解 ATM 取款机的题目，组里有人一眼就看出了规律，太强了！但是人眼看速度不够，只好写程序，好吧，我写得没别人快，就没继续做了。</p>

<h3>grab bag 400</h3>

<p>gb400 是个 SQL 注入，组里有强人立刻就发现了漏洞入口了，好强。没有注入经验，果断不会，好在有强人在，很快解决了。</p>

<h2>Random</h2>

<h3>random 100</h3>

<p>random100 也是让人摸不着头脑的题目，题目是一句话：</p>

<pre><code>How many developers;) did it take to secure Windows 8?
</code></pre>

<p>key 是 152，看了 writeup 也不知道为啥，甚至当时大家做出来的时候，都不知道谁做出来了。我当时写了个脚本把 1 到 1000 都遍历提交了一遍，莫非是我解决的？好开心！</p>

<h3>random 200</h3>

<p>random200 果断不会，今天看 <a href="http://devtrixlabs.com/blog/2012/06/defcon-2012-urandom-200-writeup/">writeup</a>，发现前面都正常，到了最后，作者发现了这个的时候：</p>

<pre><code>fr an
it ha
hi ez
jp er
en-us !!
</code></pre>

<p>他居然直接就猜出了 key 是 <code>icanhazcheezburger!!</code> 。这也太假了吧！！莫非是有我们不知道的 hacker 典故？还是这个人是脑力王？？</p>

<h3>random 300</h3>

<p>random 300 是最 straight forward 的一到题目了，要求用足够少的交换次数把 100000 个 uint16 排序。我开始怕超时写了个 qsort，结果发现交换次数太多。然后准备写 O(n<sup>2</sup>) 的 selection sort，达到最多交换次数 N-1。结果写到一半又被别人抢先了。悲剧！</p>

<h2>Forensics</h2>

<p>binary 和 pwnable 的题都要求 binary 调试，还是各种 MIPS Binary，FreeBSD，我果断看都没看。不过取证这块还是可以看看的。</p>

<h3>Forensics 200</h3>

<p>大家都盯着那几个图片看了。结果又是一道工具题，不知道的人果断是解不出来的，结果也就几行命令：</p>

<pre><code>stegdetect -s 2 2467trash.jpg
outguess -r -e -k “ddtek” 2467trash.jpg key
</code></pre>

<p>原来是道 Steganography 的题目。好吧，现在懂了，不过这个 outguess 里面用到的 ddtek 是怎么来的，writeup 作者说是用了一个字典搜的，换作我们，即使知道用 outguess 也猜不出 key 吧，谁的字典里会有 ddtek ?</p>

<h3>Forensics 300</h3>

<p>Hooray! 这是我唯一解出来并提交的题目！大概就是给了个 OpenWRT 的 firmware 镜像，用 <a href="http://code.google.com/p/firmware-mod-kit/">firmware-mod-kit</a> 解一下，就能得到答案了。太开心了！</p>

<h2>Binary</h2>

<p>突然想起来，其实还是看了一道 binary 题目的，就是 bin 100 的题目。这也是一道好可惜的题目。题目给了一个用 skynet 漏洞的 ssh 和它的输出文件 mac.h，我们也发现了 mac.h 是用直接去反编码的 ASCII。但是谁知道 key 就在里面！！我们都跑去分析给的另外两个 ssh 和 sshd 了。好在最后还是做出来了。不知道是谁试的。其实我印象中记得我把 mac.h 里面的字符串都试了一遍，为啥我们试出来？RPWT？</p>

<h2>总结</h2>

<p>Anyway，比赛已经过去。很高兴能认识很多安全领域的牛人，也很开心打酱油也能做出题来。发个结果图和名字纪念一下吧！期待明年再战！</p>

<p><a href="http://repo.shell-storm.org/CTF/Defcon-20-quals/Scoreboard.txt">最终排名</a> 和最终解题结果：</p>

<p><img class="middle" src="/images/defcon-20-blue-lotus.jpg" title="&lsquo;defcon 20 quals rank&rsquo;" ></p>

<p>其中绿色是我们解出来的题目，蓝色是我们没解出来，但是有队伍解出来的题目，灰色是还没开放的题目。紫色是当前在做的题目。再发个链接：<a href="http://devpsc.blogspot.jp/2012/06/defcon-20-quals-writeup-collection.html">writeup collection</a></p>
]]></content>
  </entry>
  
</feed>
